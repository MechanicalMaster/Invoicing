This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.claude/
  settings.local.json
app/
  api/
    storage/
      signed-url/
        route.ts
      upload/
        route.ts
  bookings/
    create/
      date-picker.tsx
      page.tsx
    loading.tsx
    page.tsx
  components/
    footer/
      footer.tsx
    auth-modal.tsx
    invoice-stats.tsx
    recent-invoices.tsx
  create-invoice/
    components/
      add-customer-modal.tsx
    invoice-pdf.tsx
    invoice-preview.tsx
    page.tsx
    pdf-download-link-wrapper.tsx
  customers/
    [id]/
      edit/
        page.tsx
      page.tsx
    add/
      page.tsx
    customer-card.tsx
    loading.tsx
    page.tsx
  dashboard/
    layout.tsx
    page.tsx
  invoices/
    [id]/
      edit/
        page.tsx
      loading.tsx
      page.tsx
    layout.tsx
    loading.tsx
    page.tsx
  profile/
    page.tsx
  purchases/
    components/
      supplier-card.tsx
    invoices/
      [id]/
        edit/
          page.tsx
        page.tsx
      add/
        page.tsx
    suppliers/
      [id]/
        edit/
          page.tsx
        page.tsx
      add/
        page.tsx
    layout.tsx
    page.tsx
  resources/
    blog/
      page.tsx
    contact-us/
      loading.tsx
      page.tsx
    documentation/
      loading.tsx
      page.tsx
    faq/
      loading.tsx
      page.tsx
    terms-and-conditions/
      loading.tsx
      page.tsx
    tutorials/
      page.tsx
    layout.tsx
    page.tsx
  settings/
    page.tsx
  stock/
    [id]/
      edit/
        page.tsx
      image-gallery.tsx
      page.tsx
    add/
      page.tsx
    components/
      stock-item-label-download-wrapper.tsx
      stock-item-label-pdf.tsx
    loading.tsx
    page.tsx
    stock-category-card.tsx
    stock-item-card.tsx
    stock-item-table.tsx
  globals.css
  layout.tsx
  page.tsx
components/
  ui/
    accordion.tsx
    alert-dialog.tsx
    alert.tsx
    aspect-ratio.tsx
    avatar.tsx
    badge.tsx
    breadcrumb.tsx
    button.tsx
    calendar.tsx
    card.tsx
    carousel.tsx
    chart.tsx
    checkbox.tsx
    collapsible.tsx
    command.tsx
    confirm-dialog.tsx
    context-menu.tsx
    dialog.tsx
    drawer.tsx
    dropdown-menu.tsx
    form.tsx
    hover-card.tsx
    input-otp.tsx
    input.tsx
    label.tsx
    menubar.tsx
    navigation-menu.tsx
    notification-bell.tsx
    pagination.tsx
    popover.tsx
    progress.tsx
    radio-group.tsx
    resizable.tsx
    scroll-area.tsx
    select.tsx
    separator.tsx
    sheet.tsx
    sidebar.tsx
    skeleton.tsx
    slider.tsx
    sonner.tsx
    switch.tsx
    table.tsx
    tabs.tsx
    textarea.tsx
    time-input.tsx
    toast.tsx
    toaster.tsx
    toggle-group.tsx
    toggle.tsx
    tooltip.tsx
    use-mobile.tsx
    use-toast.tsx
  auth-provider.tsx
  header.tsx
  mode-toggle.tsx
  sidebar-toggle.tsx
  theme-provider.tsx
  user-nav.tsx
hooks/
  use-mobile.tsx
  use-toast.ts
lib/
  hooks/
    useUserSettings.tsx
  providers/
    notification-provider.tsx
  database.types.ts
  imageUtils.ts
  invoice-text.ts
  storage-utils.ts
  supabase-server.ts
  supabase.ts
  types.ts
  utils.ts
migrations/
  add_is_sold_to_stock_items.sql
  add_qr_error_correction_to_user_settings.sql
  create_notifications_table.sql
  enable_rls_policies.sql
  remove_making_charges.sql
public/
  placeholder-logo.svg
  placeholder.svg
styles/
  globals.css
.gitignore
components.json
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".claude/settings.local.json">
{
  "permissions": {
    "allow": [
      "Bash(cat:*)",
      "Bash(pnpm add:*)"
    ],
    "deny": [],
    "ask": []
  }
}
</file>

<file path="app/api/storage/signed-url/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { supabaseServer } from '@/lib/supabase-server';
import { createClient } from '@supabase/supabase-js';

// Generate signed URL for downloading files
export async function POST(request: NextRequest) {
  try {
    const { bucket, path, expiresIn = 3600 } = await request.json();

    if (!bucket || !path) {
      return NextResponse.json(
        { error: 'Bucket and path are required' },
        { status: 400 }
      );
    }

    // Get the authenticated user from the request
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Authorization header required' },
        { status: 401 }
      );
    }

    // Create a client with the user's token to verify authentication
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
    const token = authHeader.replace('Bearer ', '');
    
    const supabaseClient = createClient(supabaseUrl, supabaseAnonKey, {
      global: {
        headers: {
          Authorization: authHeader,
        },
      },
    });

    // Verify user is authenticated
    const { data: { user }, error: userError } = await supabaseClient.auth.getUser(token);
    if (userError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Verify the path belongs to the user (paths should be prefixed with user_id)
    if (!path.startsWith(`${user.id}/`)) {
      return NextResponse.json(
        { error: 'Forbidden: You can only access your own files' },
        { status: 403 }
      );
    }

    // Generate signed URL using service role client
    const { data, error } = await supabaseServer.storage
      .from(bucket)
      .createSignedUrl(path, expiresIn);

    if (error) {
      console.error('Error creating signed URL:', error);
      return NextResponse.json(
        { error: 'Failed to create signed URL' },
        { status: 500 }
      );
    }

    return NextResponse.json({ signedUrl: data.signedUrl });
  } catch (error) {
    console.error('Error in signed-url API:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
</file>

<file path="app/api/storage/upload/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { supabaseServer } from '@/lib/supabase-server';
import { createClient } from '@supabase/supabase-js';

// Handle file upload with validation
export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    const file = formData.get('file') as File;
    const bucket = formData.get('bucket') as string;
    const path = formData.get('path') as string;

    if (!file || !bucket || !path) {
      return NextResponse.json(
        { error: 'File, bucket, and path are required' },
        { status: 400 }
      );
    }

    // Get the authenticated user from the request
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Authorization header required' },
        { status: 401 }
      );
    }

    // Create a client with the user's token to verify authentication
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
    const token = authHeader.replace('Bearer ', '');
    
    const supabaseClient = createClient(supabaseUrl, supabaseAnonKey, {
      global: {
        headers: {
          Authorization: authHeader,
        },
      },
    });

    // Verify user is authenticated
    const { data: { user }, error: userError } = await supabaseClient.auth.getUser(token);
    if (userError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Verify the path belongs to the user
    if (!path.startsWith(`${user.id}/`)) {
      return NextResponse.json(
        { error: 'Forbidden: You can only upload to your own directory' },
        { status: 403 }
      );
    }

    // Server-side file validation
    const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
    const ALLOWED_MIME_TYPES = [
      'image/jpeg',
      'image/jpg',
      'image/png',
      'image/gif',
      'image/webp',
      'application/pdf',
    ];

    if (file.size > MAX_FILE_SIZE) {
      return NextResponse.json(
        { error: 'File size exceeds 5MB limit' },
        { status: 400 }
      );
    }

    if (!ALLOWED_MIME_TYPES.includes(file.type)) {
      return NextResponse.json(
        { error: 'Invalid file type. Only images and PDFs are allowed.' },
        { status: 400 }
      );
    }

    // Convert file to buffer
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);

    // Upload file using service role client
    const { data, error } = await supabaseServer.storage
      .from(bucket)
      .upload(path, buffer, {
        contentType: file.type,
        cacheControl: '3600',
        upsert: false,
      });

    if (error) {
      console.error('Error uploading file:', error);
      return NextResponse.json(
        { error: 'Failed to upload file' },
        { status: 500 }
      );
    }

    // Generate a signed URL for the uploaded file (valid for 1 hour)
    const { data: signedUrlData, error: signedUrlError } = await supabaseServer.storage
      .from(bucket)
      .createSignedUrl(path, 3600);

    if (signedUrlError) {
      console.error('Error creating signed URL:', signedUrlError);
      return NextResponse.json(
        { error: 'File uploaded but failed to create signed URL' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      path: data.path,
      signedUrl: signedUrlData.signedUrl,
    });
  } catch (error) {
    console.error('Error in upload API:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
</file>

<file path="app/bookings/create/date-picker.tsx">
"use client"
import { format } from "date-fns"
import { CalendarIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"

interface DatePickerProps {
  date: Date
  setDate: (date: Date) => void
}

export function DatePicker({ date, setDate }: DatePickerProps) {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant={"outline"}
          className={cn("w-full justify-start text-left font-normal", !date && "text-muted-foreground")}
        >
          <CalendarIcon className="mr-2 h-4 w-4" />
          {date ? format(date, "PPP") : <span>Pick a date</span>}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0">
        <Calendar mode="single" selected={date} onSelect={(date) => date && setDate(date)} initialFocus />
      </PopoverContent>
    </Popover>
  )
}
</file>

<file path="app/bookings/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="app/components/footer/footer.tsx">
import Link from "next/link"
import { ChevronRight, FileText } from "lucide-react"

export function Footer() {
  return (
    <footer className="border-t bg-stone-50">
      <div className="container mx-auto px-4 py-8 md:px-6 lg:px-8">
        <div className="grid gap-8 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
          <div>
            <div className="flex items-center gap-2 font-semibold">
              <FileText className="h-5 w-5 text-amber-600" />
              <span className="text-lg text-amber-800">Sethiya Gold</span>
            </div>
            <p className="mt-2 text-sm text-muted-foreground">
              A premium invoicing system designed specifically for Indian jewelry shops.
            </p>
          </div>
          <div>
            <h3 className="mb-3 text-sm font-medium text-amber-800">Resources</h3>
            <ul className="space-y-2 text-sm">
              <li>
                <Link 
                  href="/resources/documentation" 
                  className="flex items-center text-muted-foreground hover:text-amber-600"
                >
                  <ChevronRight className="mr-1 h-3 w-3" />
                  Documentation
                </Link>
              </li>
              <li>
                <Link 
                  href="/resources/tutorials" 
                  className="flex items-center text-muted-foreground hover:text-amber-600"
                >
                  <ChevronRight className="mr-1 h-3 w-3" />
                  Tutorials
                </Link>
              </li>
              <li>
                <Link 
                  href="/resources/blog" 
                  className="flex items-center text-muted-foreground hover:text-amber-600"
                >
                  <ChevronRight className="mr-1 h-3 w-3" />
                  Blog
                </Link>
              </li>
            </ul>
          </div>
          <div>
            <h3 className="mb-3 text-sm font-medium text-amber-800">Support</h3>
            <ul className="space-y-2 text-sm">
              <li>
                <Link 
                  href="/resources/contact-us" 
                  className="flex items-center text-muted-foreground hover:text-amber-600"
                >
                  <ChevronRight className="mr-1 h-3 w-3" />
                  Contact Us
                </Link>
              </li>
              <li>
                <Link 
                  href="/resources/faq" 
                  className="flex items-center text-muted-foreground hover:text-amber-600"
                >
                  <ChevronRight className="mr-1 h-3 w-3" />
                  FAQ
                </Link>
              </li>
            </ul>
          </div>
          <div>
            <h3 className="mb-3 text-sm font-medium text-amber-800">Legal</h3>
            <ul className="space-y-2 text-sm">
              <li>
                <Link 
                  href="/resources/terms-and-conditions" 
                  className="flex items-center text-muted-foreground hover:text-amber-600"
                >
                  <ChevronRight className="mr-1 h-3 w-3" />
                  Terms & Conditions
                </Link>
              </li>
            </ul>
          </div>
        </div>
        <div className="mt-8 border-t border-muted pt-6 text-center text-sm text-muted-foreground">
          <p>© {new Date().getFullYear()} Sethiya Gold. All rights reserved.</p>
        </div>
      </div>
    </footer>
  )
}
</file>

<file path="app/components/auth-modal.tsx">
"use client"

import type React from "react"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { Eye, EyeOff, Mail, User, Lock } from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { useToast } from "@/components/ui/use-toast"
import supabase from "@/lib/supabase"

export function AuthModal({ children }: { children: React.ReactNode }) {
  const router = useRouter()
  const { toast } = useToast()
  const [isOpen, setIsOpen] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [loginForm, setLoginForm] = useState({
    email: "",
    password: "",
  })
  const [signupForm, setSignupForm] = useState({
    name: "",
    email: "",
    password: "",
  })

  const handleLoginChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setLoginForm((prev) => ({ ...prev, [name]: value }))
  }

  const handleSignupChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setSignupForm((prev) => ({ ...prev, [name]: value }))
  }

  const handleLoginSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email: loginForm.email,
        password: loginForm.password,
      })

      if (error) {
        toast({
          title: "Login failed",
          description: error.message,
          variant: "destructive",
        })
        return
      }

      if (data.session) {
        toast({
          title: "Login successful",
          description: "Welcome back!",
        })
        setIsOpen(false)
        router.push("/dashboard")
      }
    } catch (error) {
      toast({
        title: "Login failed",
        description: "An unexpected error occurred",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleSignupSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    
    try {
      const { data, error } = await supabase.auth.signUp({
        email: signupForm.email,
        password: signupForm.password,
        options: {
          data: {
            full_name: signupForm.name,
          },
        },
      })

      if (error) {
        toast({
          title: "Signup failed",
          description: error.message,
          variant: "destructive",
        })
        return
      }

      toast({
        title: "Signup successful",
        description: "Please check your email to confirm your account",
      })
      setIsOpen(false)
    } catch (error) {
      toast({
        title: "Signup failed",
        description: "An unexpected error occurred",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle className="text-center font-serif text-2xl font-bold text-amber-800">
            Welcome to Ratna Invoicing
          </DialogTitle>
          <DialogDescription className="text-center">Access your jewelry shop management system</DialogDescription>
        </DialogHeader>
        <Tabs defaultValue="login" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="login">Login</TabsTrigger>
            <TabsTrigger value="signup">Sign Up</TabsTrigger>
          </TabsList>
          <TabsContent value="login">
            <form onSubmit={handleLoginSubmit} className="space-y-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <div className="relative">
                  <Mail className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="email"
                    name="email"
                    placeholder="your@email.com"
                    type="email"
                    className="pl-10"
                    value={loginForm.email}
                    onChange={handleLoginChange}
                    required
                  />
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="password">Password</Label>
                <div className="relative">
                  <Lock className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="password"
                    name="password"
                    type={showPassword ? "text" : "password"}
                    className="pl-10 pr-10"
                    value={loginForm.password}
                    onChange={handleLoginChange}
                    required
                  />
                  <button
                    type="button"
                    className="absolute right-3 top-3 text-muted-foreground"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  </button>
                </div>
              </div>
              <Button type="submit" className="w-full bg-amber-600 hover:bg-amber-700" disabled={isLoading}>
                {isLoading ? "Loading..." : "Login"}
              </Button>
            </form>
          </TabsContent>
          <TabsContent value="signup">
            <form onSubmit={handleSignupSubmit} className="space-y-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="name">Full Name</Label>
                <div className="relative">
                  <User className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="name"
                    name="name"
                    placeholder="Your Name"
                    className="pl-10"
                    value={signupForm.name}
                    onChange={handleSignupChange}
                    required
                  />
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="signup-email">Email</Label>
                <div className="relative">
                  <Mail className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="signup-email"
                    name="email"
                    placeholder="your@email.com"
                    type="email"
                    className="pl-10"
                    value={signupForm.email}
                    onChange={handleSignupChange}
                    required
                  />
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="signup-password">Password</Label>
                <div className="relative">
                  <Lock className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="signup-password"
                    name="password"
                    type={showPassword ? "text" : "password"}
                    className="pl-10 pr-10"
                    value={signupForm.password}
                    onChange={handleSignupChange}
                    required
                  />
                  <button
                    type="button"
                    className="absolute right-3 top-3 text-muted-foreground"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  </button>
                </div>
              </div>
              <Button type="submit" className="w-full bg-amber-600 hover:bg-amber-700" disabled={isLoading}>
                {isLoading ? "Loading..." : "Create Account"}
              </Button>
            </form>
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  )
}
</file>

<file path="app/components/invoice-stats.tsx">
"use client"

import { Bar, BarChart, ResponsiveContainer, XAxis, YAxis } from "recharts"

export function InvoiceStats() {
  const data = [
    {
      name: "Jan",
      total: 18000,
    },
    {
      name: "Feb",
      total: 22000,
    },
    {
      name: "Mar",
      total: 25000,
    },
    {
      name: "Apr",
      total: 32000,
    },
    {
      name: "May",
      total: 45000,
    },
    {
      name: "Jun",
      total: 38000,
    },
  ]

  return (
    <ResponsiveContainer width="100%" height={350}>
      <BarChart data={data}>
        <XAxis dataKey="name" stroke="#888888" fontSize={12} tickLine={false} axisLine={false} />
        <YAxis
          stroke="#888888"
          fontSize={12}
          tickLine={false}
          axisLine={false}
          tickFormatter={(value) => `₹${value / 1000}k`}
        />
        <Bar dataKey="total" fill="#d97706" radius={[4, 4, 0, 0]} />
      </BarChart>
    </ResponsiveContainer>
  )
}
</file>

<file path="app/create-invoice/components/add-customer-modal.tsx">
"use client"

import { useState } from "react"
import { z } from "zod"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { PlusCircle } from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { useAuth } from "@/components/auth-provider"
import supabase from "@/lib/supabase"
import { toast } from "@/components/ui/use-toast"

// Define the schema for customer creation form
const customerSchema = z.object({
  name: z.string().min(2, { message: "Name must be at least 2 characters" }),
  phone: z.string().optional(),
  email: z.string().email({ message: "Invalid email address" }).optional().or(z.literal("")),
  address: z.string().optional(),
  identity_type: z.enum(["pan_card", "aadhaar_card", "others", "none"]).default("none"),
  identity_reference: z.string().optional(),
})

type CustomerFormValues = z.infer<typeof customerSchema>

interface AddCustomerModalProps {
  onCustomerAdded: (newCustomer: any) => void
}

export function AddCustomerModal({ onCustomerAdded }: AddCustomerModalProps) {
  const { user } = useAuth()
  const [isOpen, setIsOpen] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)

  // Initialize the form
  const form = useForm<CustomerFormValues>({
    resolver: zodResolver(customerSchema),
    defaultValues: {
      name: "",
      phone: "",
      email: "",
      address: "",
      identity_type: "none",
      identity_reference: "",
    },
  })

  const onSubmit = async (data: CustomerFormValues) => {
    if (!user) {
      toast({
        title: "Authentication required",
        description: "You must be logged in to add customers.",
        variant: "destructive",
      })
      return
    }

    setIsSubmitting(true)

    try {
      // Create new customer in Supabase
      const { data: newCustomer, error } = await supabase
        .from("customers")
        .insert([
          {
            ...data,
            user_id: user.id,
          },
        ])
        .select()

      if (error) throw error

      // Get the newly created customer
      if (newCustomer && newCustomer.length > 0) {
        toast({
          title: "Customer added",
          description: `${data.name} has been added to your customers.`,
        })

        // Call the callback with the new customer data
        onCustomerAdded(newCustomer[0])

        // Reset form and close modal
        form.reset()
        setIsOpen(false)
      }
    } catch (error: any) {
      toast({
        title: "Error adding customer",
        description: error.message || "Failed to add customer. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" className="w-full justify-start">
          <PlusCircle className="mr-2 h-4 w-4" />
          Add New Customer
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>Add New Customer</DialogTitle>
          <DialogDescription>
            Enter customer details below to create a new customer record.
          </DialogDescription>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Customer Name <span className="text-destructive">*</span></FormLabel>
                  <FormControl>
                    <Input placeholder="Full name" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
              <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Phone Number</FormLabel>
                    <FormControl>
                      <Input placeholder="Phone number" type="tel" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input placeholder="Email address" type="email" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="address"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Address</FormLabel>
                  <FormControl>
                    <Textarea placeholder="Full address" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
              <FormField
                control={form.control}
                name="identity_type"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>ID Type</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select ID type" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="none">None</SelectItem>
                        <SelectItem value="pan_card">PAN Card</SelectItem>
                        <SelectItem value="aadhaar_card">Aadhaar Card</SelectItem>
                        <SelectItem value="others">Other ID</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="identity_reference"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>ID Number</FormLabel>
                    <FormControl>
                      <Input placeholder="ID reference number" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <DialogFooter>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => setIsOpen(false)}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button 
                type="submit"
                disabled={isSubmitting}
                className="bg-primary hover:bg-primary/90"
              >
                {isSubmitting ? (
                  <>
                    <div className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent"></div>
                    Saving...
                  </>
                ) : (
                  "Save Customer"
                )}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  )
}
</file>

<file path="app/customers/customer-card.tsx">
import Link from "next/link"
import { Calendar, Edit, Phone, Mail, MapPin, CreditCard, User } from "lucide-react"

import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"

interface CustomerTransaction {
  id: string
  date: Date
  amount: number
  type: string
  description: string
}

interface Customer {
  id: string
  name: string
  phone: string
  email: string
  address: string
  identityType: string
  identityNumber: string
  referredBy?: string
  createdAt: Date
  lastTransaction?: CustomerTransaction
}

interface CustomerCardProps {
  customer: Customer
}

export function CustomerCard({ customer }: CustomerCardProps) {
  // Get initials for avatar
  const getInitials = (name: string) => {
    return name
      .split(" ")
      .map((n) => n[0])
      .join("")
      .toUpperCase()
  }

  return (
    <Card className="overflow-hidden transition-all hover:border-primary/30 hover:shadow-md">
      <CardHeader className="pb-2">
        <div className="flex items-start justify-between">
          <div className="flex items-center gap-3">
            <Avatar className="h-10 w-10 border border-muted">
              <AvatarFallback className="bg-secondary text-secondary-foreground">
                {getInitials(customer.name)}
              </AvatarFallback>
            </Avatar>
            <div>
              <h3 className="font-medium">{customer.name}</h3>
              <p className="text-sm text-muted-foreground">Customer since {customer.createdAt.toLocaleDateString()}</p>
            </div>
          </div>
          {customer.referredBy && (
            <Badge variant="outline" className="ml-auto">
              Referred
            </Badge>
          )}
        </div>
      </CardHeader>
      <CardContent className="pb-2">
        <div className="space-y-2 text-sm">
          <div className="flex items-center gap-2">
            <Phone className="h-4 w-4 text-primary" />
            <span>{customer.phone}</span>
          </div>
          <div className="flex items-center gap-2">
            <Mail className="h-4 w-4 text-primary" />
            <span>{customer.email}</span>
          </div>
          <div className="flex items-start gap-2">
            <MapPin className="h-4 w-4 text-primary" />
            <span className="line-clamp-1">{customer.address}</span>
          </div>
          <div className="flex items-center gap-2">
            <CreditCard className="h-4 w-4 text-primary" />
            <span>
              {customer.identityType}: {customer.identityNumber}
            </span>
          </div>
          {customer.referredBy && (
            <div className="flex items-center gap-2">
              <User className="h-4 w-4 text-primary" />
              <span>Referred by: {customer.referredBy}</span>
            </div>
          )}
        </div>

        {customer.lastTransaction && (
          <div className="mt-4 rounded-md bg-secondary p-3">
            <div className="flex items-center gap-2 text-sm font-medium">
              <Calendar className="h-4 w-4 text-primary" />
              <span>Last Transaction</span>
            </div>
            <div className="mt-1 text-sm">
              <div className="font-medium">₹{customer.lastTransaction.amount.toLocaleString("en-IN")}</div>
              <div className="text-muted-foreground">
                {customer.lastTransaction.description} - {customer.lastTransaction.date.toLocaleDateString()}
              </div>
            </div>
          </div>
        )}
      </CardContent>
      <CardFooter className="flex justify-between pt-2">
        <Link href={`/customers/${customer.id}`}>
          <Button variant="outline" size="sm">
            View Details
          </Button>
        </Link>
        <Link href={`/customers/${customer.id}/edit`}>
          <Button variant="outline" size="sm">
            <Edit className="mr-2 h-3 w-3" />
            Edit
          </Button>
        </Link>
      </CardFooter>
    </Card>
  )
}
</file>

<file path="app/customers/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="app/dashboard/layout.tsx">
import type { Metadata } from "next"

export const metadata: Metadata = {
  title: "Dashboard - Sethiya Gold",
  description: "A premium invoicing system for Indian jewelry shops",
}

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <>{children}</>
}
</file>

<file path="app/invoices/[id]/loading.tsx">
import Link from "next/link"
import { ArrowLeft, FileText } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Skeleton } from "@/components/ui/skeleton"

export default function Loading() {
  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <Link href="/dashboard" className="flex items-center gap-2 font-semibold">
          <FileText className="h-6 w-6 text-amber-500" />
          <span className="text-xl">Sethiya Gold</span>
        </Link>
      </header>
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <div className="flex items-center">
          <Link href="/invoices">
            <Button variant="ghost" size="sm" className="gap-1">
              <ArrowLeft className="h-4 w-4" />
              Back to Invoices
            </Button>
          </Link>
          <Skeleton className="ml-4 h-8 w-48" />
        </div>
        <div className="flex justify-end gap-2">
          <Skeleton className="h-10 w-28" />
          <Skeleton className="h-10 w-28" />
          <Skeleton className="h-10 w-28" />
        </div>
        <Skeleton className="h-[70vh] w-full" />
      </main>
    </div>
  )
}
</file>

<file path="app/invoices/loading.tsx">
import Link from "next/link"
import { FileText } from "lucide-react"

import { Skeleton } from "@/components/ui/skeleton"
import { Card, CardContent, CardHeader } from "@/components/ui/card"

export default function Loading() {
  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <Link href="/dashboard" className="flex items-center gap-2 font-semibold">
          <FileText className="h-6 w-6 text-amber-500" />
          <span className="text-xl">Sethiya Gold</span>
        </Link>
      </header>
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <div className="flex items-center justify-between">
          <h1 className="text-xl font-semibold md:text-2xl">Invoices</h1>
          <Skeleton className="h-10 w-36" />
        </div>
        <div className="flex flex-col gap-4 md:flex-row md:items-center">
          <Skeleton className="h-10 flex-1" />
          <Skeleton className="h-10 w-40" />
          <Skeleton className="h-10 w-40" />
          <Skeleton className="h-10 w-10" />
        </div>
        <Card>
          <CardHeader className="pb-2">
            <Skeleton className="h-6 w-36 mb-2" />
            <Skeleton className="h-4 w-48" />
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {Array(5).fill(0).map((_, i) => (
                <div key={i} className="flex items-center justify-between">
                  <div className="flex-1 space-y-2">
                    <div className="flex items-center gap-4">
                      <Skeleton className="h-5 w-24" />
                      <Skeleton className="h-5 w-32" />
                      <Skeleton className="h-5 w-24" />
                      <Skeleton className="h-5 w-20" />
                      <Skeleton className="h-5 w-16" />
                    </div>
                  </div>
                  <div className="flex gap-2">
                    <Skeleton className="h-9 w-16" />
                    <Skeleton className="h-9 w-16" />
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </main>
    </div>
  )
}
</file>

<file path="app/profile/page.tsx">
"use client"

import { useEffect, useState } from "react"
import Link from "next/link"
import { ArrowLeft, Camera, FileText, Mail, MapPin, Phone, Save, User } from "lucide-react"
import { z } from "zod"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"

import { useAuth } from "@/components/auth-provider"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { toast } from "@/components/ui/use-toast"
import supabase from "@/lib/supabase"

// Form validation schema
const profileFormSchema = z.object({
  full_name: z.string().min(1, "Full name is required"),
  email_address: z.string().email("Please enter a valid email address"),
  phone_number: z.string().min(1, "Phone number is required"),
  current_password: z.string().optional(),
  new_password: z.string().min(6, "Password must be at least 6 characters").optional(),
  confirm_password: z.string().optional(),
}).refine(data => {
  // Only validate passwords if current_password is provided
  if (data.current_password && data.current_password.length > 0) {
    if (!data.new_password || data.new_password.length === 0) {
      return false;
    }
    if (data.new_password !== data.confirm_password) {
      return false;
    }
  }
  return true;
}, {
  message: "New password and confirm password must match",
  path: ["confirm_password"]
});

type ProfileFormValues = z.infer<typeof profileFormSchema>;

export default function ProfilePage() {
  const { user } = useAuth();
  const [isLoading, setIsLoading] = useState(true);
  const [avatarUrl, setAvatarUrl] = useState<string | null>(null);

  // Initialize form with react-hook-form
  const {
    register,
    handleSubmit,
    setValue,
    formState: { errors },
  } = useForm<ProfileFormValues>({
    resolver: zodResolver(profileFormSchema),
    defaultValues: {
      full_name: "",
      email_address: "",
      phone_number: "",
      current_password: "",
      new_password: "",
      confirm_password: "",
    },
  });

  // Fetch user profile data
  useEffect(() => {
    const fetchProfile = async () => {
      if (!user) return;

      try {
        const { data, error } = await supabase
          .from("profiles")
          .select("*")
          .eq("id", user.id)
          .single();

        if (error) {
          // If profile doesn't exist, create one
          if (error.code === "PGRST116") {
            const { error: insertError } = await supabase
              .from("profiles")
              .insert({
                id: user.id,
                full_name: user.user_metadata?.full_name || "",
                avatar_url: null,
                email_address: user.email || "",
                phone_number: user.phone || "",
              });
            
            if (insertError) throw insertError;
            
            // Fetch the created profile
            const { data: newProfile, error: fetchError } = await supabase
              .from("profiles")
              .select("*")
              .eq("id", user.id)
              .single();
            
            if (fetchError) throw fetchError;
            
            populateForm(newProfile);
          } else {
            throw error;
          }
        } else {
          populateForm(data);
        }
      } catch (error) {
        console.error("Error fetching profile:", error);
        toast({
          title: "Error loading profile",
          description: "There was a problem loading your profile data.",
          variant: "destructive",
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchProfile();
  }, [user, setValue]);

  // Helper to populate form with profile data
  const populateForm = (profile: any) => {
    setValue("full_name", profile.full_name || "");
    setValue("email_address", profile.email_address || "");
    setValue("phone_number", profile.phone_number || "");
    setAvatarUrl(profile.avatar_url);
  };

  // Handle form submission
  const onSubmit = async (values: ProfileFormValues) => {
    if (!user) return;
    
    setIsLoading(true);
    
    try {
      // Update profile data
      const { error: profileError } = await supabase
        .from("profiles")
        .update({
          full_name: values.full_name,
          email_address: values.email_address,
          phone_number: values.phone_number,
          updated_at: new Date().toISOString(),
        })
        .eq("id", user.id);

      if (profileError) throw profileError;

      // Update password if requested
      if (values.current_password && values.new_password) {
        const { error: passwordError } = await supabase.auth.updateUser({
          password: values.new_password,
        });

        if (passwordError) {
          throw passwordError;
        }

        // Clear password fields
        setValue("current_password", "");
        setValue("new_password", "");
        setValue("confirm_password", "");
        
        toast({
          title: "Password updated",
          description: "Your password has been updated successfully.",
        });
      }

      toast({
        title: "Profile updated",
        description: "Your profile information has been updated successfully.",
      });
    } catch (error: any) {
      console.error("Error updating profile:", error);
      toast({
        title: "Error updating profile",
        description: error.message || "There was a problem updating your profile.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Generate avatar fallback from name
  const getAvatarFallback = (name?: string | null) => {
    if (!name) return "U";
    return name
      .split(" ")
      .map(part => part[0])
      .join("")
      .toUpperCase()
      .substring(0, 2);
  };

  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <Link href="/dashboard" className="flex items-center gap-2 font-semibold">
          <FileText className="h-6 w-6 text-primary" />
          <span className="text-xl">Sethiya Gold</span>
        </Link>
      </header>
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <div className="flex items-center">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm" className="gap-1">
              <ArrowLeft className="h-4 w-4" />
              Back to Dashboard
            </Button>
          </Link>
          <h1 className="ml-4 text-xl font-semibold md:text-2xl">My Profile</h1>
        </div>

        <div className="grid grid-cols-1 gap-6 md:grid-cols-3">
          {/* Profile Sidebar */}
          <Card className="md:col-span-1">
            <CardContent className="p-6">
              <div className="flex flex-col items-center space-y-4">
                <div className="relative">
                  <Avatar className="h-24 w-24 border-2 border-muted">
                    <AvatarImage src={avatarUrl || "/placeholder.svg?height=96&width=96"} alt="Profile" />
                    <AvatarFallback className="bg-secondary text-secondary-foreground text-xl">
                      {getAvatarFallback(user?.user_metadata?.full_name || user?.email)}
                    </AvatarFallback>
                  </Avatar>
                  <Button
                    size="icon"
                    variant="outline"
                    className="absolute bottom-0 right-0 h-8 w-8 rounded-full border-2 border-background bg-secondary text-secondary-foreground hover:bg-secondary/80"
                  >
                    <Camera className="h-4 w-4" />
                    <span className="sr-only">Change avatar</span>
                  </Button>
                </div>
                <div className="text-center">
                  <h2 className="text-xl font-semibold">{user?.user_metadata?.full_name || "User"}</h2>
                  <p className="text-sm text-muted-foreground">{user?.email}</p>
                </div>
                <Separator />
                <div className="w-full space-y-3">
                  <div className="flex items-center gap-2 text-sm">
                    <Mail className="h-4 w-4 text-primary" />
                    <span className="text-muted-foreground">{user?.email}</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <Phone className="h-4 w-4 text-primary" />
                    <span className="text-muted-foreground">{user?.phone || "No phone number"}</span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Profile Content */}
          <Card className="md:col-span-2">
            <CardHeader>
              <CardTitle>Account Settings</CardTitle>
              <CardDescription>Manage your account information and password</CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Profile Information</h3>
                  <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                    <div className="space-y-2">
                      <Label htmlFor="full_name">Full Name</Label>
                      <div className="relative">
                        <User className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                        <Input
                          id="full_name"
                          className="pl-10"
                          {...register("full_name")}
                          disabled={isLoading}
                        />
                      </div>
                      {errors.full_name && (
                        <p className="text-sm text-destructive">{errors.full_name.message}</p>
                      )}
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="email_address">Email Address</Label>
                      <div className="relative">
                        <Mail className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                        <Input
                          id="email_address"
                          type="email"
                          className="pl-10"
                          {...register("email_address")}
                          disabled={isLoading}
                        />
                      </div>
                      {errors.email_address && (
                        <p className="text-sm text-destructive">{errors.email_address.message}</p>
                      )}
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="phone_number">Phone Number</Label>
                    <div className="relative">
                      <Phone className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                      <Input
                        id="phone_number"
                        className="pl-10"
                        {...register("phone_number")}
                        disabled={isLoading}
                      />
                    </div>
                    {errors.phone_number && (
                      <p className="text-sm text-destructive">{errors.phone_number.message}</p>
                    )}
                  </div>
                </div>

                <Separator />

                <div className="space-y-4">
                  <h3 className="text-lg font-medium">Change Password</h3>
                  <div className="space-y-2">
                    <Label htmlFor="current_password">Current Password</Label>
                    <Input
                      id="current_password"
                      type="password"
                      {...register("current_password")}
                      disabled={isLoading}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="new_password">New Password</Label>
                    <Input
                      id="new_password"
                      type="password"
                      {...register("new_password")}
                      disabled={isLoading}
                    />
                    {errors.new_password && (
                      <p className="text-sm text-destructive">{errors.new_password.message}</p>
                    )}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="confirm_password">Confirm New Password</Label>
                    <Input
                      id="confirm_password"
                      type="password"
                      {...register("confirm_password")}
                      disabled={isLoading}
                    />
                    {errors.confirm_password && (
                      <p className="text-sm text-destructive">{errors.confirm_password.message}</p>
                    )}
                  </div>
                </div>

                <Button type="submit" className="w-full bg-primary hover:bg-primary/90" disabled={isLoading}>
                  <Save className="mr-2 h-4 w-4" />
                  {isLoading ? "Saving Changes..." : "Save Changes"}
                </Button>
              </form>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  )
}
</file>

<file path="app/purchases/components/supplier-card.tsx">
"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { useRouter } from "next/navigation"
import { Tables } from "@/lib/database.types"
import { Building, Mail, MapPin, Phone } from "lucide-react"

type Supplier = Tables<"suppliers">

interface SupplierCardProps {
  supplier: Supplier
}

export default function SupplierCard({ supplier }: SupplierCardProps) {
  const router = useRouter()

  return (
    <Card key={supplier.id} className="overflow-hidden">
      <CardHeader className="pb-3">
        <CardTitle className="text-lg">{supplier.name}</CardTitle>
        {supplier.contact_person && (
          <CardDescription>Contact: {supplier.contact_person}</CardDescription>
        )}
      </CardHeader>
      <CardContent className="pb-3">
        <div className="grid gap-2">
          {supplier.phone && (
            <div className="flex items-center gap-2 text-sm">
              <Phone className="h-4 w-4 text-muted-foreground" />
              <span>{supplier.phone}</span>
            </div>
          )}
          {supplier.email && (
            <div className="flex items-center gap-2 text-sm">
              <Mail className="h-4 w-4 text-muted-foreground" />
              <span>{supplier.email}</span>
            </div>
          )}
          {supplier.address && (
            <div className="flex items-center gap-2 text-sm">
              <MapPin className="h-4 w-4 text-muted-foreground" />
              <span className="line-clamp-1">{supplier.address}</span>
            </div>
          )}
        </div>
      </CardContent>
      <div className="flex justify-end gap-2 border-t bg-secondary/20 p-2">
        <Button
          variant="outline"
          size="sm"
          onClick={() => router.push(`/purchases/suppliers/${supplier.id}/edit`)}
        >
          Edit
        </Button>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => router.push(`/purchases/suppliers/${supplier.id}`)}
        >
          View Details
        </Button>
      </div>
    </Card>
  )
}
</file>

<file path="app/purchases/suppliers/[id]/edit/page.tsx">
"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { useAuth } from "@/components/auth-provider"
import { useToast } from "@/components/ui/use-toast"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { ArrowLeft, Building } from "lucide-react"
import { Skeleton } from "@/components/ui/skeleton"
import supabase from "@/lib/supabase"
import { Tables } from "@/lib/database.types"

type Supplier = Tables<"suppliers">

export default function EditSupplierPage({ params }: { params: { id: string } }) {
  const { user, isLoading: authLoading } = useAuth()
  const router = useRouter()
  const { toast } = useToast()
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [formData, setFormData] = useState({
    name: "",
    contact_person: "",
    email: "",
    phone: "",
    address: "",
    notes: "",
  })

  useEffect(() => {
    if (!authLoading && !user) {
      router.push("/")
      toast({
        title: "Authentication required",
        description: "Please log in to edit a supplier",
        variant: "destructive",
      })
      return
    }

    if (user) {
      fetchSupplier()
    }
  }, [user, authLoading, params.id])

  const fetchSupplier = async () => {
    setIsLoading(true)
    try {
      const { data, error } = await supabase
        .from("suppliers")
        .select("*")
        .eq("id", params.id)
        .eq("user_id", user!.id)
        .single()

      if (error) throw error

      if (!data) {
        toast({
          title: "Supplier not found",
          description: "The requested supplier does not exist or you don't have access to it",
          variant: "destructive",
        })
        router.push("/purchases?tab=suppliers")
        return
      }

      setFormData({
        name: data.name || "",
        contact_person: data.contact_person || "",
        email: data.email || "",
        phone: data.phone || "",
        address: data.address || "",
        notes: data.notes || "",
      })
    } catch (error: any) {
      console.error("Error fetching supplier:", error)
      toast({
        title: "Error loading supplier",
        description: error.message || "An error occurred while loading supplier details",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!user) {
      toast({
        title: "Authentication required",
        description: "Please log in to update a supplier",
        variant: "destructive",
      })
      return
    }

    if (!formData.name.trim()) {
      toast({
        title: "Required field missing",
        description: "Supplier name is required",
        variant: "destructive",
      })
      return
    }

    setIsSubmitting(true)

    try {
      const { data, error } = await supabase
        .from("suppliers")
        .update({
          ...formData,
          updated_at: new Date().toISOString(),
        })
        .eq("id", params.id)
        .eq("user_id", user.id)

      if (error) throw error

      toast({
        title: "Supplier updated successfully",
        description: `${formData.name} has been updated`,
      })
      
      router.push(`/purchases/suppliers/${params.id}`)
    } catch (error: any) {
      console.error("Error updating supplier:", error)
      toast({
        title: "Error updating supplier",
        description: error.message || "An error occurred while updating the supplier",
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  if (authLoading) {
    return <div className="flex min-h-screen items-center justify-center">Loading...</div>
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <main className="flex flex-1 flex-col gap-6 p-6 md:gap-8 md:p-8">
        <div className="flex items-center gap-4">
          <Button variant="ghost" size="icon" onClick={() => router.back()} className="h-8 w-8">
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h1 className="text-2xl font-bold tracking-tight md:text-3xl">Edit Supplier</h1>
        </div>

        {isLoading ? (
          <div className="grid gap-6">
            <Card>
              <CardHeader>
                <Skeleton className="h-8 w-48" />
                <Skeleton className="h-4 w-32" />
              </CardHeader>
              <CardContent className="grid gap-4">
                <Skeleton className="h-10 w-full" />
                <Skeleton className="h-10 w-full" />
                <Skeleton className="h-10 w-full" />
                <Skeleton className="h-20 w-full" />
              </CardContent>
            </Card>
          </div>
        ) : (
          <form onSubmit={handleSubmit}>
            <div className="grid gap-6">
              {/* Basic Information Card */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-xl">Basic Information</CardTitle>
                  <CardDescription>Edit the supplier's contact information</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid gap-4">
                    <div className="grid gap-2">
                      <Label htmlFor="name">
                        Supplier Name <span className="text-red-500">*</span>
                      </Label>
                      <Input
                        id="name"
                        name="name"
                        placeholder="Enter supplier name"
                        value={formData.name}
                        onChange={handleChange}
                        required
                      />
                    </div>
                    <div className="grid gap-2">
                      <Label htmlFor="contact_person">Contact Person</Label>
                      <Input
                        id="contact_person"
                        name="contact_person"
                        placeholder="Enter name of contact person"
                        value={formData.contact_person}
                        onChange={handleChange}
                      />
                    </div>
                    <div className="grid gap-2">
                      <Label htmlFor="email">Email</Label>
                      <Input
                        id="email"
                        name="email"
                        type="email"
                        placeholder="Enter supplier email"
                        value={formData.email}
                        onChange={handleChange}
                      />
                    </div>
                    <div className="grid gap-2">
                      <Label htmlFor="phone">Phone</Label>
                      <Input
                        id="phone"
                        name="phone"
                        placeholder="Enter supplier phone number"
                        value={formData.phone}
                        onChange={handleChange}
                      />
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Additional Information Card */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-xl">Additional Information</CardTitle>
                  <CardDescription>Edit more details about the supplier</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid gap-4">
                    <div className="grid gap-2">
                      <Label htmlFor="address">Address</Label>
                      <Textarea
                        id="address"
                        name="address"
                        placeholder="Enter supplier address"
                        value={formData.address}
                        onChange={handleChange}
                        rows={3}
                      />
                    </div>
                    <div className="grid gap-2">
                      <Label htmlFor="notes">Notes</Label>
                      <Textarea
                        id="notes"
                        name="notes"
                        placeholder="Add any additional notes about this supplier"
                        value={formData.notes}
                        onChange={handleChange}
                        rows={3}
                      />
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Supplier Information Card */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-xl">Supplier Information</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-start gap-4 rounded-md border p-4 bg-muted/50">
                    <Building className="mt-0.5 h-5 w-5 text-primary" />
                    <div className="text-sm">
                      <p>
                        Supplier information is used across your account to help you manage your inventory and purchases.
                      </p>
                      <p className="mt-2">
                        Changes made here will be reflected in all associated purchase invoices.
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Action Buttons */}
              <div className="flex justify-end gap-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => router.push(`/purchases/suppliers/${params.id}`)}
                  disabled={isSubmitting}
                >
                  Cancel
                </Button>
                <Button type="submit" disabled={isSubmitting}>
                  {isSubmitting ? "Saving..." : "Save Changes"}
                </Button>
              </div>
            </div>
          </form>
        )}
      </main>
    </div>
  )
}
</file>

<file path="app/purchases/suppliers/[id]/page.tsx">
"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { ArrowLeft, Edit, Mail, MapPin, Phone, Trash2, User } from "lucide-react"
import { useAuth } from "@/components/auth-provider"
import { useToast } from "@/components/ui/use-toast"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import { Skeleton } from "@/components/ui/skeleton"
import supabase from "@/lib/supabase"
import { Tables } from "@/lib/database.types"

type SupplierWithInvoiceCount = Tables<"suppliers"> & {
  invoiceCount: number;
}

export default function SupplierDetailPage({ params }: { params: { id: string } }) {
  const { user, isLoading: authLoading } = useAuth()
  const router = useRouter()
  const { toast } = useToast()
  const [supplier, setSupplier] = useState<SupplierWithInvoiceCount | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [isDeleting, setIsDeleting] = useState(false)

  useEffect(() => {
    if (!authLoading && !user) {
      router.push("/")
      toast({
        title: "Authentication required",
        description: "Please log in to view supplier details",
        variant: "destructive",
      })
      return
    }

    if (user) {
      fetchSupplier()
    }
  }, [user, authLoading, params.id])

  const fetchSupplier = async () => {
    setIsLoading(true)
    try {
      // Fetch supplier data
      const { data: supplierData, error: supplierError } = await supabase
        .from("suppliers")
        .select("*")
        .eq("id", params.id)
        .eq("user_id", user!.id)
        .single()

      if (supplierError) {
        throw supplierError
      }

      if (!supplierData) {
        toast({
          title: "Supplier not found",
          description: "The requested supplier does not exist or you don't have access to it",
          variant: "destructive",
        })
        router.push("/purchases?tab=suppliers")
        return
      }

      // Get count of invoices associated with this supplier
      const { count, error: countError } = await supabase
        .from("purchase_invoices")
        .select("*", { count: 'exact', head: true })
        .eq("supplier_id", params.id)
        .eq("user_id", user!.id)

      if (countError) {
        console.error("Error getting invoice count:", countError)
      }

      setSupplier({ ...supplierData, invoiceCount: count || 0 })
    } catch (error: any) {
      console.error("Error fetching supplier:", error)
      toast({
        title: "Error loading supplier",
        description: error.message || "An error occurred while loading supplier details",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleDeleteSupplier = async () => {
    if (!user) return

    setIsDeleting(true)
    try {
      const { error } = await supabase
        .from("suppliers")
        .delete()
        .eq("id", params.id)
        .eq("user_id", user.id)

      if (error) throw error

      toast({
        title: "Supplier deleted",
        description: "The supplier has been successfully deleted",
      })
      router.push("/purchases?tab=suppliers")
    } catch (error: any) {
      console.error("Error deleting supplier:", error)
      toast({
        title: "Error deleting supplier",
        description: error.message || "An error occurred while deleting the supplier",
        variant: "destructive",
      })
    } finally {
      setIsDeleting(false)
    }
  }

  if (authLoading) {
    return <div className="flex min-h-screen items-center justify-center">Loading...</div>
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <main className="flex flex-1 flex-col gap-6 p-6 md:gap-8 md:p-8">
        <div className="flex items-center gap-4">
          <Button variant="ghost" size="icon" onClick={() => router.back()} className="h-8 w-8">
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h1 className="text-2xl font-bold tracking-tight md:text-3xl">Supplier Details</h1>
        </div>

        {isLoading ? (
          <div className="grid gap-6">
            <Card>
              <CardHeader>
                <Skeleton className="h-8 w-48" />
                <Skeleton className="h-4 w-32" />
              </CardHeader>
              <CardContent className="grid gap-4">
                <Skeleton className="h-5 w-full" />
                <Skeleton className="h-5 w-full" />
                <Skeleton className="h-5 w-full" />
                <Skeleton className="h-20 w-full" />
              </CardContent>
            </Card>
          </div>
        ) : supplier ? (
          <div className="grid gap-6">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle className="text-2xl">{supplier.name}</CardTitle>
                    {supplier.contact_person && (
                      <CardDescription className="mt-1.5">
                        Contact: {supplier.contact_person}
                      </CardDescription>
                    )}
                  </div>
                  <div className="flex gap-2">
                    <Button variant="outline" asChild>
                      <Link href={`/purchases/suppliers/${params.id}/edit`}>
                        <Edit className="mr-2 h-4 w-4" />
                        Edit
                      </Link>
                    </Button>
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button variant="destructive" disabled={isDeleting}>
                          <Trash2 className="mr-2 h-4 w-4" />
                          Delete
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                          <AlertDialogDescription>
                            This will permanently delete the supplier {supplier.name}
                            {supplier.invoiceCount > 0 ? (
                              <strong className="mt-2 block text-destructive">
                                Warning: This supplier has {supplier.invoiceCount} purchase invoice(s) associated with it.
                                Deleting this supplier will remove the association from those invoices.
                              </strong>
                            ) : null}
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>Cancel</AlertDialogCancel>
                          <AlertDialogAction
                            onClick={handleDeleteSupplier}
                            disabled={isDeleting}
                            className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                          >
                            {isDeleting ? "Deleting..." : "Delete"}
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  </div>
                </div>
              </CardHeader>
              <Separator />
              <CardContent className="pt-6">
                <div className="grid gap-4">
                  {supplier.phone && (
                    <div className="flex items-start gap-3">
                      <Phone className="mt-0.5 h-5 w-5 text-muted-foreground" />
                      <div>
                        <p className="font-medium">Phone</p>
                        <p className="text-muted-foreground">{supplier.phone}</p>
                      </div>
                    </div>
                  )}
                  {supplier.email && (
                    <div className="flex items-start gap-3">
                      <Mail className="mt-0.5 h-5 w-5 text-muted-foreground" />
                      <div>
                        <p className="font-medium">Email</p>
                        <p className="text-muted-foreground">{supplier.email}</p>
                      </div>
                    </div>
                  )}
                  {supplier.address && (
                    <div className="flex items-start gap-3">
                      <MapPin className="mt-0.5 h-5 w-5 text-muted-foreground" />
                      <div>
                        <p className="font-medium">Address</p>
                        <p className="text-muted-foreground whitespace-pre-line">{supplier.address}</p>
                      </div>
                    </div>
                  )}
                  {supplier.notes && (
                    <div className="flex items-start gap-3">
                      <User className="mt-0.5 h-5 w-5 text-muted-foreground" />
                      <div>
                        <p className="font-medium">Notes</p>
                        <p className="text-muted-foreground whitespace-pre-line">{supplier.notes}</p>
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
              <CardFooter className="border-t bg-muted/50 p-4">
                <div className="flex w-full items-center justify-between text-sm">
                  <div className="text-muted-foreground">
                    Added on {new Date(supplier.created_at || "").toLocaleDateString()}
                  </div>
                  <div className="text-muted-foreground">
                    {supplier.invoiceCount} purchase invoice(s) with this supplier
                  </div>
                </div>
              </CardFooter>
            </Card>

            <div className="mt-4 flex justify-between">
              <Button variant="outline" onClick={() => router.push("/purchases?tab=suppliers")}>
                Back to Suppliers
              </Button>
              <Link href={`/purchases/invoices/add?supplier=${params.id}`}>
                <Button>
                  Create Purchase Invoice
                </Button>
              </Link>
            </div>
          </div>
        ) : (
          <div className="flex flex-col items-center justify-center py-12">
            <h3 className="mb-2 text-lg font-medium">Supplier Not Found</h3>
            <p className="mb-6 text-center text-sm text-gray-500">
              The requested supplier does not exist or you don't have access to it.
            </p>
            <Button asChild>
              <Link href="/purchases?tab=suppliers">
                Back to Suppliers
              </Link>
            </Button>
          </div>
        )}
      </main>
    </div>
  )
}
</file>

<file path="app/purchases/suppliers/add/page.tsx">
"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { useAuth } from "@/components/auth-provider"
import { useToast } from "@/components/ui/use-toast"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { ArrowLeft, Building } from "lucide-react"
import supabase from "@/lib/supabase"

export default function AddSupplierPage() {
  const { user, isLoading } = useAuth()
  const router = useRouter()
  const { toast } = useToast()
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [formData, setFormData] = useState({
    name: "",
    contact_person: "",
    email: "",
    phone: "",
    address: "",
    notes: "",
  })

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!user) {
      toast({
        title: "Authentication required",
        description: "Please log in to add a supplier",
        variant: "destructive",
      })
      return
    }

    if (!formData.name.trim()) {
      toast({
        title: "Required field missing",
        description: "Supplier name is required",
        variant: "destructive",
      })
      return
    }

    setIsSubmitting(true)

    try {
      const { data, error } = await supabase.from("suppliers").insert({
        ...formData,
        user_id: user.id,
      })

      if (error) throw error

      toast({
        title: "Supplier added successfully",
        description: `${formData.name} has been added to your suppliers list`,
      })
      
      router.push("/purchases?tab=suppliers")
    } catch (error: any) {
      console.error("Error adding supplier:", error)
      toast({
        title: "Error adding supplier",
        description: error.message || "An error occurred while adding the supplier",
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  // Show loading state
  if (isLoading) {
    return <div className="flex min-h-screen items-center justify-center">Loading...</div>
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <main className="flex flex-1 flex-col gap-6 p-6 md:gap-8 md:p-8">
        <div className="flex items-center gap-4">
          <Button variant="ghost" size="icon" onClick={() => router.back()} className="h-8 w-8">
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h1 className="text-2xl font-bold tracking-tight md:text-3xl">Add New Supplier</h1>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="grid gap-6">
            {/* Basic Information Card */}
            <Card>
              <CardHeader>
                <CardTitle className="text-xl">Basic Information</CardTitle>
                <CardDescription>Add the supplier's contact information</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid gap-4">
                  <div className="grid gap-2">
                    <Label htmlFor="name">
                      Supplier Name <span className="text-red-500">*</span>
                    </Label>
                    <Input
                      id="name"
                      name="name"
                      placeholder="Enter supplier name"
                      value={formData.name}
                      onChange={handleChange}
                      required
                    />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="contact_person">Contact Person</Label>
                    <Input
                      id="contact_person"
                      name="contact_person"
                      placeholder="Enter name of contact person"
                      value={formData.contact_person}
                      onChange={handleChange}
                    />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="email">Email</Label>
                    <Input
                      id="email"
                      name="email"
                      type="email"
                      placeholder="Enter supplier email"
                      value={formData.email}
                      onChange={handleChange}
                    />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="phone">Phone</Label>
                    <Input
                      id="phone"
                      name="phone"
                      placeholder="Enter supplier phone number"
                      value={formData.phone}
                      onChange={handleChange}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Additional Information Card */}
            <Card>
              <CardHeader>
                <CardTitle className="text-xl">Additional Information</CardTitle>
                <CardDescription>Add more details about the supplier</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid gap-4">
                  <div className="grid gap-2">
                    <Label htmlFor="address">Address</Label>
                    <Textarea
                      id="address"
                      name="address"
                      placeholder="Enter supplier address"
                      value={formData.address}
                      onChange={handleChange}
                      rows={3}
                    />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="notes">Notes</Label>
                    <Textarea
                      id="notes"
                      name="notes"
                      placeholder="Add any additional notes about this supplier"
                      value={formData.notes}
                      onChange={handleChange}
                      rows={3}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Supplier Information Card */}
            <Card>
              <CardHeader>
                <CardTitle className="text-xl">Supplier Information</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex items-start gap-4 rounded-md border p-4 bg-muted/50">
                  <Building className="mt-0.5 h-5 w-5 text-primary" />
                  <div className="text-sm">
                    <p>
                      Supplier information is used across your account to help you manage your inventory and purchases.
                    </p>
                    <p className="mt-2">
                      You can edit this information anytime from the supplier details page.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Action Buttons */}
            <div className="flex justify-end gap-4">
              <Button
                type="button"
                variant="outline"
                onClick={() => router.push("/purchases?tab=suppliers")}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? "Saving..." : "Save Supplier"}
              </Button>
            </div>
          </div>
        </form>
      </main>
    </div>
  )
}
</file>

<file path="app/resources/blog/page.tsx">
import { ArrowLeft } from "lucide-react"
import Link from "next/link"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"

export default function BlogPage() {
  const featuredPost = {
    title: "Gold Rate Trends for 2025: What Jewelry Shop Owners Need to Know",
    description: "Analysis of gold price forecasts and how jewelry businesses can adapt their pricing strategies",
    image: "/placeholder.svg?height=300&width=800",
    date: "May 8, 2025",
    author: "Priya Sharma",
    authorRole: "Industry Analyst",
    category: "Industry Insights",
    href: "/resources/blog/gold-rate-trends-2025",
  }

  const recentPosts = [
    {
      title: "5 Ways to Streamline Your Jewelry Inventory Management",
      description: "Tips to efficiently manage your jewelry stock and reduce overhead costs",
      image: "/placeholder.svg?height=180&width=320",
      date: "May 5, 2025",
      author: "Rahul Mehta",
      category: "Inventory Tips",
      href: "/resources/blog/streamline-jewelry-inventory",
    },
    {
      title: "GST Updates for Indian Jewelers: New Compliance Changes",
      description: "Recent changes to GST regulations that affect jewelry businesses in India",
      image: "/placeholder.svg?height=180&width=320",
      date: "May 2, 2025",
      author: "Ankit Jain",
      category: "Compliance",
      href: "/resources/blog/gst-updates-jewelers",
    },
    {
      title: "Building Customer Loyalty in the Luxury Jewelry Market",
      description: "Strategies to create lasting relationships with high-value jewelry customers",
      image: "/placeholder.svg?height=180&width=320",
      date: "April 29, 2025",
      author: "Neha Gupta",
      category: "Customer Relations",
      href: "/resources/blog/customer-loyalty-jewelry",
    },
  ]

  return (
    <>
      <div className="mb-8">
        <h1 className="mb-2 text-3xl font-bold text-amber-800">Jewelry Blog</h1>
        <p className="text-lg text-muted-foreground">
          Industry insights, tips, and trends for jewelry business owners
        </p>
      </div>

      <div className="grid gap-8">
        {/* Featured post */}
        <Card className="overflow-hidden transition-all hover:border-amber-300 hover:shadow-md">
          <div className="relative h-[300px] w-full bg-cover bg-center" style={{ backgroundImage: `url(${featuredPost.image})` }}>
            <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent">
              <div className="absolute bottom-0 left-0 p-6">
                <span className="mb-2 inline-block rounded-full bg-amber-600 px-3 py-1 text-xs font-medium text-white">
                  {featuredPost.category}
                </span>
                <h2 className="mb-2 text-2xl font-bold text-white">{featuredPost.title}</h2>
                <p className="mb-4 text-white/90">{featuredPost.description}</p>
                <div className="flex items-center text-white/80">
                  <span>{featuredPost.date}</span>
                  <span className="mx-2">•</span>
                  <span>
                    {featuredPost.author}, {featuredPost.authorRole}
                  </span>
                </div>
              </div>
            </div>
          </div>
          <CardFooter className="flex justify-center bg-amber-50 p-4">
            <Button asChild className="bg-amber-600 hover:bg-amber-700">
              <Link href={featuredPost.href}>Read Full Article</Link>
            </Button>
          </CardFooter>
        </Card>

        {/* Recent posts */}
        <div className="grid gap-6 md:grid-cols-3">
          {recentPosts.map((post) => (
            <Card key={post.title} className="overflow-hidden transition-all hover:border-amber-300 hover:shadow-md">
              <div
                className="h-[180px] w-full bg-cover bg-center"
                style={{ backgroundImage: `url(${post.image})` }}
              />
              <CardHeader>
                <div className="mb-2 flex items-center">
                  <span className="text-xs text-muted-foreground">{post.date}</span>
                  <span className="mx-2">•</span>
                  <span className="text-xs text-amber-600">{post.category}</span>
                </div>
                <CardTitle className="line-clamp-2 text-lg text-amber-800">{post.title}</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="line-clamp-3 text-sm text-muted-foreground">{post.description}</p>
              </CardContent>
              <CardFooter>
                <Button asChild variant="outline" className="w-full border-amber-200 text-amber-800 hover:bg-amber-50">
                  <Link href={post.href}>Read More</Link>
                </Button>
              </CardFooter>
            </Card>
          ))}
        </div>
      </div>

      <div className="mt-8">
        <Button variant="outline" asChild className="text-amber-700 hover:bg-amber-50 hover:text-amber-800">
          <Link href="/">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Home
          </Link>
        </Button>
      </div>
    </>
  )
}
</file>

<file path="app/resources/contact-us/loading.tsx">
import { Loader2 } from "lucide-react"

export default function ContactUsLoading() {
  return (
    <div className="flex min-h-[300px] w-full items-center justify-center">
      <Loader2 className="h-8 w-8 animate-spin text-amber-600" />
    </div>
  )
}
</file>

<file path="app/resources/contact-us/page.tsx">
import { ArrowLeft, Mail, Phone, MapPin } from "lucide-react"
import Link from "next/link"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"

export default function ContactUsPage() {
  return (
    <>
      <div className="mb-8">
        <h1 className="mb-2 text-3xl font-bold text-amber-800">Contact Us</h1>
        <p className="text-lg text-muted-foreground">
          Get in touch with our team for any questions or support needs
        </p>
      </div>

      <div className="grid gap-8 md:grid-cols-2">
        <Card className="transition-all hover:border-amber-300 hover:shadow-md">
          <CardHeader>
            <CardTitle className="text-xl text-amber-800">Our Information</CardTitle>
            <CardDescription>Reach out to us through these channels</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-start">
              <Mail className="mr-3 h-5 w-5 text-amber-600" />
              <div>
                <h3 className="font-medium">Email Us</h3>
                <p className="text-sm text-muted-foreground">support@ratnainvoicing.com</p>
                <p className="text-sm text-muted-foreground">sales@ratnainvoicing.com</p>
              </div>
            </div>
            
            <div className="flex items-start">
              <Phone className="mr-3 h-5 w-5 text-amber-600" />
              <div>
                <h3 className="font-medium">Call Us</h3>
                <p className="text-sm text-muted-foreground">+91 1234 567890 (Support)</p>
                <p className="text-sm text-muted-foreground">+91 9876 543210 (Sales)</p>
              </div>
            </div>
            
            <div className="flex items-start">
              <MapPin className="mr-3 h-5 w-5 text-amber-600" />
              <div>
                <h3 className="font-medium">Visit Us</h3>
                <p className="text-sm text-muted-foreground">
                  Ratna Tech Solutions<br />
                  123 Jewelers Lane, Diamond District<br />
                  Mumbai, Maharashtra 400001<br />
                  India
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="transition-all hover:border-amber-300 hover:shadow-md">
          <CardHeader>
            <CardTitle className="text-xl text-amber-800">Send Us a Message</CardTitle>
            <CardDescription>We'll get back to you as soon as possible</CardDescription>
          </CardHeader>
          <CardContent className="p-6">
            <div className="rounded-lg bg-amber-50 p-6 text-center">
              <h3 className="mb-2 text-lg font-medium text-amber-800">Contact Form Coming Soon</h3>
              <p className="text-amber-700">
                We're working on a contact form to make it easier for you to reach us. 
                In the meantime, please use the contact information provided.
              </p>
            </div>
          </CardContent>
        </Card>
      </div>

      <Separator className="my-10 bg-amber-100" />

      <div className="rounded-lg bg-amber-50 p-6">
        <div className="text-center">
          <h2 className="mb-2 text-2xl font-bold text-amber-800">Office Hours</h2>
          <p className="mb-4 text-amber-700">Our support team is available during the following hours:</p>
          <div className="mx-auto max-w-md">
            <div className="grid grid-cols-2 gap-2 text-sm">
              <div className="rounded-l bg-amber-100 p-2 font-medium text-amber-800">Monday - Friday</div>
              <div className="rounded-r bg-white p-2 text-gray-700">9:00 AM - 6:00 PM IST</div>
              <div className="rounded-l bg-amber-100 p-2 font-medium text-amber-800">Saturday</div>
              <div className="rounded-r bg-white p-2 text-gray-700">10:00 AM - 4:00 PM IST</div>
              <div className="rounded-l bg-amber-100 p-2 font-medium text-amber-800">Sunday & Holidays</div>
              <div className="rounded-r bg-white p-2 text-gray-700">Closed</div>
            </div>
          </div>
        </div>
      </div>

      <div className="mt-8">
        <Button variant="outline" asChild className="text-amber-700 hover:bg-amber-50 hover:text-amber-800">
          <Link href="/">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Home
          </Link>
        </Button>
      </div>
    </>
  )
}
</file>

<file path="app/resources/documentation/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="app/resources/documentation/page.tsx">
import { ArrowRight, ArrowLeft, FileText, Search } from "lucide-react"
import Link from "next/link"

import { Input } from "@/components/ui/input"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { Button } from "@/components/ui/button"

export default function DocumentationPage() {
  return (
    <>
      <div className="mb-8">
        <h1 className="mb-2 text-3xl font-bold text-amber-800">Documentation</h1>
        <p className="text-lg text-muted-foreground">
          Comprehensive guides and reference materials for Ratna Invoicing
        </p>
      </div>

      <div className="mb-8">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
          <Input placeholder="Search documentation..." className="pl-10" />
        </div>
      </div>

      <div className="grid gap-8 md:grid-cols-2">
        {/* Getting Started Section */}
        <Card className="transition-all hover:border-amber-300 hover:shadow-md">
          <CardHeader>
            <CardTitle className="text-xl text-amber-800">Getting Started</CardTitle>
            <CardDescription>Essential guides to set up and use the system</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <ul className="space-y-3">
              <li>
                <Link
                  href="/resources/documentation/getting-started"
                  className="flex items-center text-sm text-amber-700 hover:text-amber-900 hover:underline"
                >
                  <FileText className="mr-2 h-4 w-4" />
                  Quick Start Guide
                </Link>
              </li>
              <li>
                <Link
                  href="/resources/documentation/system-requirements"
                  className="flex items-center text-sm text-amber-700 hover:text-amber-900 hover:underline"
                >
                  <FileText className="mr-2 h-4 w-4" />
                  System Requirements
                </Link>
              </li>
              <li>
                <Link
                  href="/resources/documentation/account-setup"
                  className="flex items-center text-sm text-amber-700 hover:text-amber-900 hover:underline"
                >
                  <FileText className="mr-2 h-4 w-4" />
                  Account Setup
                </Link>
              </li>
              <li>
                <Link
                  href="/resources/documentation/dashboard-overview"
                  className="flex items-center text-sm text-amber-700 hover:text-amber-900 hover:underline"
                >
                  <FileText className="mr-2 h-4 w-4" />
                  Dashboard Overview
                </Link>
              </li>
            </ul>
            <Button variant="outline" asChild className="w-full mt-2">
              <Link href="/resources/documentation/getting-started">
                View All Getting Started Guides <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </Button>
          </CardContent>
        </Card>

        {/* Invoicing Section */}
        <Card className="transition-all hover:border-amber-300 hover:shadow-md">
          <CardHeader>
            <CardTitle className="text-xl text-amber-800">Invoicing</CardTitle>
            <CardDescription>Learn how to create and manage invoices</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <ul className="space-y-3">
              <li>
                <Link
                  href="/resources/documentation/create-invoice"
                  className="flex items-center text-sm text-amber-700 hover:text-amber-900 hover:underline"
                >
                  <FileText className="mr-2 h-4 w-4" />
                  Creating New Invoices
                </Link>
              </li>
              <li>
                <Link
                  href="/resources/documentation/customizing-invoices"
                  className="flex items-center text-sm text-amber-700 hover:text-amber-900 hover:underline"
                >
                  <FileText className="mr-2 h-4 w-4" />
                  Customizing Invoice Templates
                </Link>
              </li>
              <li>
                <Link
                  href="/resources/documentation/printing-invoices"
                  className="flex items-center text-sm text-amber-700 hover:text-amber-900 hover:underline"
                >
                  <FileText className="mr-2 h-4 w-4" />
                  Printing and PDF Export
                </Link>
              </li>
              <li>
                <Link
                  href="/resources/documentation/invoice-management"
                  className="flex items-center text-sm text-amber-700 hover:text-amber-900 hover:underline"
                >
                  <FileText className="mr-2 h-4 w-4" />
                  Invoice History and Management
                </Link>
              </li>
            </ul>
            <Button variant="outline" asChild className="w-full mt-2">
              <Link href="/resources/documentation/invoicing">
                View All Invoicing Guides <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </Button>
          </CardContent>
        </Card>

        {/* Inventory Management Section */}
        <Card className="transition-all hover:border-amber-300 hover:shadow-md">
          <CardHeader>
            <CardTitle className="text-xl text-amber-800">Inventory Management</CardTitle>
            <CardDescription>Track your jewelry inventory effectively</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <ul className="space-y-3">
              <li>
                <Link
                  href="/resources/documentation/adding-items"
                  className="flex items-center text-sm text-amber-700 hover:text-amber-900 hover:underline"
                >
                  <FileText className="mr-2 h-4 w-4" />
                  Adding New Items
                </Link>
              </li>
              <li>
                <Link
                  href="/resources/documentation/inventory-categories"
                  className="flex items-center text-sm text-amber-700 hover:text-amber-900 hover:underline"
                >
                  <FileText className="mr-2 h-4 w-4" />
                  Organizing by Categories
                </Link>
              </li>
              <li>
                <Link
                  href="/resources/documentation/tracking-gold-rates"
                  className="flex items-center text-sm text-amber-700 hover:text-amber-900 hover:underline"
                >
                  <FileText className="mr-2 h-4 w-4" />
                  Gold Rate Tracking
                </Link>
              </li>
              <li>
                <Link
                  href="/resources/documentation/inventory-reports"
                  className="flex items-center text-sm text-amber-700 hover:text-amber-900 hover:underline"
                >
                  <FileText className="mr-2 h-4 w-4" />
                  Inventory Reports
                </Link>
              </li>
            </ul>
            <Button variant="outline" asChild className="w-full mt-2">
              <Link href="/resources/documentation/inventory">
                View All Inventory Guides <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </Button>
          </CardContent>
        </Card>

        {/* Customer Management Section */}
        <Card className="transition-all hover:border-amber-300 hover:shadow-md">
          <CardHeader>
            <CardTitle className="text-xl text-amber-800">Customer Management</CardTitle>
            <CardDescription>Build and maintain customer relationships</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <ul className="space-y-3">
              <li>
                <Link
                  href="/resources/documentation/adding-customers"
                  className="flex items-center text-sm text-amber-700 hover:text-amber-900 hover:underline"
                >
                  <FileText className="mr-2 h-4 w-4" />
                  Adding Customer Records
                </Link>
              </li>
              <li>
                <Link
                  href="/resources/documentation/customer-history"
                  className="flex items-center text-sm text-amber-700 hover:text-amber-900 hover:underline"
                >
                  <FileText className="mr-2 h-4 w-4" />
                  Purchase History Tracking
                </Link>
              </li>
              <li>
                <Link
                  href="/resources/documentation/customer-reminders"
                  className="flex items-center text-sm text-amber-700 hover:text-amber-900 hover:underline"
                >
                  <FileText className="mr-2 h-4 w-4" />
                  Special Occasion Reminders
                </Link>
              </li>
              <li>
                <Link
                  href="/resources/documentation/customer-communications"
                  className="flex items-center text-sm text-amber-700 hover:text-amber-900 hover:underline"
                >
                  <FileText className="mr-2 h-4 w-4" />
                  Email Communications
                </Link>
              </li>
            </ul>
            <Button variant="outline" asChild className="w-full mt-2">
              <Link href="/resources/documentation/customers">
                View All Customer Guides <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </Button>
          </CardContent>
        </Card>
      </div>

      <Separator className="my-10 bg-amber-100" />

      <div className="mb-4">
        <h2 className="mb-2 text-2xl font-bold text-amber-800">API Documentation</h2>
        <p className="text-muted-foreground">For developers who want to integrate with Ratna Invoicing</p>
      </div>

      <div className="grid gap-6 md:grid-cols-3">
        <Card className="transition-all hover:border-amber-300 hover:shadow-md">
          <CardHeader>
            <CardTitle className="text-amber-800">Authentication</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="mb-4 text-sm text-muted-foreground">
              Learn how to authenticate with our API using OAuth 2.0 and manage API keys.
            </p>
            <Button variant="outline" asChild className="w-full">
              <Link href="/resources/documentation/api/authentication">
                View Authentication <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </Button>
          </CardContent>
        </Card>

        <Card className="transition-all hover:border-amber-300 hover:shadow-md">
          <CardHeader>
            <CardTitle className="text-amber-800">Endpoints</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="mb-4 text-sm text-muted-foreground">
              Comprehensive list of all API endpoints with examples and use cases.
            </p>
            <Button variant="outline" asChild className="w-full">
              <Link href="/resources/documentation/api/endpoints">
                View Endpoints <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </Button>
          </CardContent>
        </Card>

        <Card className="transition-all hover:border-amber-300 hover:shadow-md">
          <CardHeader>
            <CardTitle className="text-amber-800">Webhooks</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="mb-4 text-sm text-muted-foreground">
              Set up webhooks to get real-time notifications for events in your account.
            </p>
            <Button variant="outline" asChild className="w-full">
              <Link href="/resources/documentation/api/webhooks">
                View Webhooks <ArrowRight className="ml-2 h-4 w-4" />
              </Link>
            </Button>
          </CardContent>
        </Card>
      </div>

      <div className="mt-8">
        <Button variant="outline" asChild className="text-amber-700 hover:bg-amber-50 hover:text-amber-800">
          <Link href="/">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Home
          </Link>
        </Button>
      </div>
    </>
  )
}
</file>

<file path="app/resources/faq/loading.tsx">
import { Loader2 } from "lucide-react"

export default function FAQLoading() {
  return (
    <div className="flex min-h-[300px] w-full items-center justify-center">
      <Loader2 className="h-8 w-8 animate-spin text-amber-600" />
    </div>
  )
}
</file>

<file path="app/resources/faq/page.tsx">
import { ArrowLeft } from "lucide-react"
import Link from "next/link"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"

export default function FAQPage() {
  const faqs = [
    {
      question: "How do I create my first invoice?",
      answer: "To create your first invoice, navigate to the 'Create Invoice' section from the dashboard. Fill in the customer details, add items from your inventory, apply any discounts or taxes, and click 'Generate Invoice'. You can then preview, edit if needed, and finalize the invoice for printing or sending electronically.",
    },
    {
      question: "Can I customize my invoice template?",
      answer: "Yes, Ratna Invoicing allows full customization of invoice templates. Go to 'Settings > Invoice Templates' to add your shop logo, change colors, adjust layouts, and set default terms and conditions. You can create multiple templates for different types of sales or seasons.",
    },
    {
      question: "How does gold rate tracking work?",
      answer: "Our gold rate tracking feature automatically updates daily gold rates based on market prices. You can set up which markets to follow (MCX, IBJA, etc.) in 'Settings > Gold Rate Tracking'. The system will use these rates to calculate prices for items based on their weight and making charges.",
    },
    {
      question: "Is my data secure and backed up?",
      answer: "Absolutely. All your data is encrypted and stored securely in the cloud. We perform automatic backups daily, and you can also manually backup your data anytime from 'Settings > Backup & Restore'. Your business information never leaves our secure servers.",
    },
    {
      question: "How do I manage my jewelry inventory?",
      answer: "Manage your inventory by going to 'Stock > Inventory Management'. Here you can add new items with details like weight, purity, stone details, and images. The system tracks stock levels, shows low stock alerts, and updates automatically when sales are made.",
    },
    {
      question: "What payment methods are supported?",
      answer: "Ratna Invoicing supports various payment methods including cash, credit/debit cards, UPI, bank transfers, and partial payments. You can configure these options in 'Settings > Payment Methods' and track outstanding balances for customers who make partial payments.",
    },
    {
      question: "Can I generate reports for my business?",
      answer: "Yes, comprehensive reporting is available under 'Reports'. You can generate sales reports, inventory valuation, customer purchase history, and tax summaries. Reports can be filtered by date ranges, categories, or customer segments and exported as PDF or Excel files.",
    },
    {
      question: "How do I get technical support?",
      answer: "For technical support, click on 'Help > Support' in the application or visit our Contact Us page. Our support team is available Monday-Friday, 9:00 AM - 6:00 PM IST, and Saturday, 10:00 AM - 4:00 PM IST. You can also email support@ratnainvoicing.com for assistance.",
    },
  ]

  return (
    <>
      <div className="mb-8">
        <h1 className="mb-2 text-3xl font-bold text-amber-800">Frequently Asked Questions</h1>
        <p className="text-lg text-muted-foreground">
          Find answers to common questions about Ratna Invoicing
        </p>
      </div>

      <Card className="mb-8 transition-all hover:border-amber-300 hover:shadow-md">
        <CardHeader>
          <CardTitle className="text-xl text-amber-800">Common Questions</CardTitle>
          <CardDescription>Everything you need to know about our jewelry invoicing system</CardDescription>
        </CardHeader>
        <CardContent>
          <Accordion type="single" collapsible className="w-full">
            {faqs.map((faq, index) => (
              <AccordionItem key={index} value={`item-${index}`}>
                <AccordionTrigger className="text-amber-800 hover:text-amber-600">
                  {faq.question}
                </AccordionTrigger>
                <AccordionContent className="text-muted-foreground">
                  {faq.answer}
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        </CardContent>
      </Card>

      <Separator className="my-8 bg-amber-100" />

      <div className="rounded-lg bg-amber-50 p-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between">
          <div className="mb-4 md:mb-0">
            <h2 className="text-2xl font-bold text-amber-800">Still Have Questions?</h2>
            <p className="text-amber-700">
              If you couldn't find an answer to your question, please reach out to our support team.
            </p>
          </div>
          <Button asChild className="bg-amber-600 hover:bg-amber-700">
            <Link href="/resources/contact-us">
              Contact Support
            </Link>
          </Button>
        </div>
      </div>

      <div className="mt-8">
        <Button variant="outline" asChild className="text-amber-700 hover:bg-amber-50 hover:text-amber-800">
          <Link href="/">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Home
          </Link>
        </Button>
      </div>
    </>
  )
}
</file>

<file path="app/resources/terms-and-conditions/loading.tsx">
import { Loader2 } from "lucide-react"

export default function TermsAndConditionsLoading() {
  return (
    <div className="flex min-h-[300px] w-full items-center justify-center">
      <Loader2 className="h-8 w-8 animate-spin text-amber-600" />
    </div>
  )
}
</file>

<file path="app/resources/terms-and-conditions/page.tsx">
import { ArrowLeft } from "lucide-react"
import Link from "next/link"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"

export default function TermsAndConditionsPage() {
  return (
    <>
      <div className="mb-8">
        <h1 className="mb-2 text-3xl font-bold text-amber-800">Terms and Conditions</h1>
        <p className="text-lg text-muted-foreground">
          Please read these terms carefully before using Ratna Invoicing
        </p>
      </div>

      <Card className="mb-8 transition-all hover:border-amber-300 hover:shadow-md">
        <CardHeader>
          <CardTitle className="text-xl text-amber-800">Terms of Use</CardTitle>
        </CardHeader>
        <CardContent className="prose prose-amber max-w-none">
          <p>
            Welcome to Ratna Invoicing. By accessing or using our service, you agree to be bound by these Terms and Conditions. 
            If you disagree with any part of these terms, you may not access the service.
          </p>

          <h3>1. License to Use</h3>
          <p>
            Ratna Tech Solutions grants you a limited, non-exclusive, non-transferable license to use Ratna Invoicing software 
            for your jewelry business operations. This license is subject to these Terms and Conditions.
          </p>

          <h3>2. User Account</h3>
          <p>
            To access certain features of the service, you must register for an account. You are responsible for maintaining the 
            confidentiality of your account information and for all activities under your account. You agree to notify us immediately 
            of any unauthorized use of your account.
          </p>

          <h3>3. Data Privacy</h3>
          <p>
            Your use of the service is also governed by our Privacy Policy, which outlines how we collect, use, and protect your 
            personal information and business data. By using Ratna Invoicing, you consent to the data practices described in 
            the Privacy Policy.
          </p>

          <h3>4. Subscription and Billing</h3>
          <p>
            Some features of Ratna Invoicing require a paid subscription. Billing occurs according to the plan you select, 
            and you agree to pay all fees associated with your subscription. We reserve the right to change subscription fees 
            upon reasonable notice.
          </p>

          <h3>5. Acceptable Use</h3>
          <p>
            You agree not to:
          </p>
          <ul>
            <li>Use the service for any illegal purpose or in violation of any laws</li>
            <li>Violate the intellectual property rights of Ratna Tech Solutions or any third party</li>
            <li>Attempt to gain unauthorized access to any portion of the service</li>
            <li>Interfere with the proper working of the service</li>
            <li>Use the service to store or transmit malicious code</li>
          </ul>

          <h3>6. Termination</h3>
          <p>
            We may terminate or suspend your account and access to the service immediately, without prior notice, for conduct 
            that we determine violates these Terms or is harmful to other users, us, or third parties, or for any other reason.
          </p>

          <h3>7. Limitation of Liability</h3>
          <p>
            To the maximum extent permitted by law, Ratna Tech Solutions shall not be liable for any indirect, incidental, 
            special, consequential, or punitive damages, including loss of profits, data, or business opportunities, resulting 
            from your use of the service.
          </p>

          <h3>8. Changes to Terms</h3>
          <p>
            We reserve the right to modify these terms at any time. We will provide notice of significant changes by posting the 
            new Terms on the service. Your continued use of the service after such modifications constitutes your acceptance of the revised Terms.
          </p>

          <h3>9. Governing Law</h3>
          <p>
            These Terms shall be governed by the laws of India, without regard to its conflict of law provisions. Any disputes 
            arising under these Terms shall be subject to the exclusive jurisdiction of the courts located in Mumbai, Maharashtra.
          </p>
        </CardContent>
      </Card>

      <Separator className="my-8 bg-amber-100" />

      <div className="rounded-lg bg-amber-50 p-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between">
          <div className="mb-4 md:mb-0">
            <h2 className="text-2xl font-bold text-amber-800">Questions About Our Terms?</h2>
            <p className="text-amber-700">
              If you have any questions about these terms, please contact our support team.
            </p>
          </div>
          <Button asChild className="bg-amber-600 hover:bg-amber-700">
            <Link href="/resources/contact-us">
              Contact Us
            </Link>
          </Button>
        </div>
      </div>

      <div className="mt-8">
        <Button variant="outline" asChild className="text-amber-700 hover:bg-amber-50 hover:text-amber-800">
          <Link href="/">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Home
          </Link>
        </Button>
      </div>
    </>
  )
}
</file>

<file path="app/resources/tutorials/page.tsx">
import { ArrowRight, ArrowLeft, PlayCircle, Clock, Filter } from "lucide-react"
import Link from "next/link"

import { Button } from "@/components/ui/button"
import { Card, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { Badge } from "@/components/ui/badge"

export default function TutorialsPage() {
  const tutorials = [
    {
      title: "Creating Your First Invoice",
      description: "Learn how to create, customize, and send a professional invoice to your customers",
      image: "/placeholder.svg?height=180&width=320",
      duration: "5 min",
      level: "Beginner",
      category: "Invoicing",
      href: "/resources/tutorials/creating-first-invoice",
    },
    {
      title: "Setting Up Gold Rate Tracking",
      description: "Configure automatic gold rate updates to keep your pricing accurate",
      image: "/placeholder.svg?height=180&width=320",
      duration: "7 min",
      level: "Intermediate",
      category: "Inventory",
      href: "/resources/tutorials/gold-rate-tracking",
    },
    {
      title: "Managing Customer Profiles",
      description: "Create detailed customer profiles to track preferences and purchase history",
      image: "/placeholder.svg?height=180&width=320",
      duration: "6 min",
      level: "Beginner",
      category: "Customer Management",
      href: "/resources/tutorials/customer-profiles",
    },
    {
      title: "Generating Sales Reports",
      description: "Learn how to create comprehensive sales reports for business analysis",
      image: "/placeholder.svg?height=180&width=320",
      duration: "8 min",
      level: "Intermediate",
      category: "Reports",
      href: "/resources/tutorials/sales-reports",
    },
    {
      title: "Setting Up Stock Categories",
      description: "Organize your jewelry inventory with customized categories",
      image: "/placeholder.svg?height=180&width=320",
      duration: "4 min",
      level: "Beginner",
      category: "Inventory",
      href: "/resources/tutorials/stock-categories",
    },
    {
      title: "PDF Invoice Customization",
      description: "Customize the layout and branding of your PDF invoices",
      image: "/placeholder.svg?height=180&width=320",
      duration: "10 min",
      level: "Advanced",
      category: "Invoicing",
      href: "/resources/tutorials/pdf-customization",
    },
  ]

  const categories = ["All", "Invoicing", "Inventory", "Customer Management", "Reports"]

  return (
    <>
      <div className="mb-8">
        <h1 className="mb-2 text-3xl font-bold text-amber-800">Tutorials</h1>
        <p className="text-lg text-muted-foreground">
          Step-by-step video guides to help you make the most of Ratna Invoicing
        </p>
      </div>

      <div className="mb-8 flex flex-wrap items-center gap-3">
        <Filter className="h-5 w-5 text-amber-600" />
        <span className="mr-2 text-sm font-medium text-muted-foreground">Filter by:</span>
        {categories.map((category) => (
          <Button
            key={category}
            variant={category === "All" ? "default" : "outline"}
            size="sm"
            className={category === "All" ? "bg-amber-600 hover:bg-amber-700" : ""}
          >
            {category}
          </Button>
        ))}
      </div>

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {tutorials.map((tutorial) => (
          <Card key={tutorial.title} className="overflow-hidden transition-all hover:border-amber-300 hover:shadow-md">
            <div className="relative aspect-video">
              <div className="h-full w-full bg-cover bg-center" style={{ backgroundImage: `url(${tutorial.image})` }}>
                <div className="absolute inset-0 flex items-center justify-center bg-black/20 transition-colors hover:bg-black/40">
                  <PlayCircle className="h-12 w-12 text-white" />
                </div>
              </div>
            </div>
            <CardHeader className="pb-2">
              <div className="flex items-center gap-2">
                <Badge variant="outline" className="bg-amber-50 text-amber-700">
                  {tutorial.category}
                </Badge>
                <div className="flex items-center text-xs text-muted-foreground">
                  <Clock className="mr-1 h-3 w-3" /> {tutorial.duration}
                </div>
              </div>
              <CardTitle className="line-clamp-1 text-lg text-amber-800">{tutorial.title}</CardTitle>
              <CardDescription className="line-clamp-2">{tutorial.description}</CardDescription>
            </CardHeader>
            <CardFooter>
              <Button asChild className="w-full bg-amber-600 hover:bg-amber-700">
                <Link href={tutorial.href}>
                  Watch Tutorial <ArrowRight className="ml-2 h-4 w-4" />
                </Link>
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>

      <Separator className="my-10 bg-amber-100" />

      <div className="rounded-lg bg-amber-50 p-6">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between">
          <div className="mb-4 md:mb-0">
            <h2 className="text-2xl font-bold text-amber-800">Request a Tutorial</h2>
            <p className="text-amber-700">
              Don't see what you're looking for? Let us know what tutorial would help your business.
            </p>
          </div>
          <Button asChild className="bg-amber-600 hover:bg-amber-700">
            <Link href="/resources/support#request-tutorial">
              Request a Topic <ArrowRight className="ml-2 h-4 w-4" />
            </Link>
          </Button>
        </div>
      </div>

      <div className="mt-8">
        <Button variant="outline" asChild className="text-amber-700 hover:bg-amber-50 hover:text-amber-800">
          <Link href="/">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Home
          </Link>
        </Button>
      </div>
    </>
  )
}
</file>

<file path="app/resources/page.tsx">
import Link from "next/link"
import { ArrowRight, BookOpen, HelpCircle, Newspaper, FileBadge, Users } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"

export default function ResourcesPage() {
  const resourceCards = [
    {
      title: "Documentation",
      description: "Comprehensive guides and references for Ratna Invoicing",
      icon: BookOpen,
      href: "/resources/documentation",
      color: "bg-amber-50 text-amber-600",
    },
    {
      title: "Tutorials",
      description: "Step-by-step instructions for common tasks",
      icon: FileBadge,
      href: "/resources/tutorials",
      color: "bg-amber-50 text-amber-600",
    },
    {
      title: "Blog",
      description: "News, updates, and insights about jewelry management",
      icon: Newspaper,
      href: "/resources/blog",
      color: "bg-amber-50 text-amber-600",
    },
    {
      title: "Support",
      description: "Get help from our dedicated support team",
      icon: Users,
      href: "/resources/support",
      color: "bg-amber-50 text-amber-600",
    },
    {
      title: "FAQ",
      description: "Answers to commonly asked questions",
      icon: HelpCircle,
      href: "/resources/faq",
      color: "bg-amber-50 text-amber-600",
    },
  ]

  return (
    <>
      <div className="mb-8">
        <h1 className="mb-2 text-3xl font-bold text-amber-800">Resources</h1>
        <p className="text-lg text-muted-foreground">Everything you need to make the most of Sethiya Gold system</p>
      </div>

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {resourceCards.map((card) => (
          <Card key={card.title} className="transition-all hover:border-amber-300 hover:shadow-md">
            <CardHeader className="pb-3">
              <div className={`mb-3 inline-flex rounded-md p-2 ${card.color}`}>
                <card.icon className="h-6 w-6" />
              </div>
              <CardTitle className="text-amber-800">{card.title}</CardTitle>
              <CardDescription>{card.description}</CardDescription>
            </CardHeader>
            <CardContent>
              <Button asChild className="w-full bg-amber-600 hover:bg-amber-700">
                <Link href={card.href}>
                  Explore {card.title} <ArrowRight className="ml-2 h-4 w-4" />
                </Link>
              </Button>
            </CardContent>
          </Card>
        ))}
      </div>

      <div className="mt-12 rounded-lg border border-amber-200 bg-amber-50 p-6">
        <h2 className="mb-4 text-2xl font-bold text-amber-800">Getting Started</h2>
        <p className="mb-4 text-amber-700">
          New to Sethiya Gold? Our quick start guide will help you set up your account and understand the basic
          features.
        </p>
        <div className="space-y-4">
          <div className="flex items-start gap-3">
            <div className="flex h-7 w-7 shrink-0 items-center justify-center rounded-full bg-amber-200 text-amber-800">
              1
            </div>
            <div>
              <h3 className="font-medium text-amber-800">Set up your business profile</h3>
              <p className="text-sm text-amber-600">
                Configure your business details, including your shop name, GST information, and contact details.
              </p>
            </div>
          </div>
          <div className="flex items-start gap-3">
            <div className="flex h-7 w-7 shrink-0 items-center justify-center rounded-full bg-amber-200 text-amber-800">
              2
            </div>
            <div>
              <h3 className="font-medium text-amber-800">Add your inventory</h3>
              <p className="text-sm text-amber-600">
                Start adding your jewelry items to the inventory management system, including weights and prices.
              </p>
            </div>
          </div>
          <div className="flex items-start gap-3">
            <div className="flex h-7 w-7 shrink-0 items-center justify-center rounded-full bg-amber-200 text-amber-800">
              3
            </div>
            <div>
              <h3 className="font-medium text-amber-800">Create your first invoice</h3>
              <p className="text-sm text-amber-600">
                Generate a professional invoice for your customer with just a few clicks.
              </p>
            </div>
          </div>
        </div>
        <div className="mt-6">
          <Button asChild className="bg-amber-600 hover:bg-amber-700">
            <Link href="/resources/documentation/getting-started">
              Read the full guide <ArrowRight className="ml-2 h-4 w-4" />
            </Link>
          </Button>
        </div>
      </div>
    </>
  )
}
</file>

<file path="app/stock/[id]/image-gallery.tsx">
"use client"

import { useState } from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"

import { Button } from "@/components/ui/button"

interface ImageGalleryProps {
  images: string[]
}

export function ImageGallery({ images }: ImageGalleryProps) {
  const [currentIndex, setCurrentIndex] = useState(0)

  const goToPrevious = () => {
    setCurrentIndex((prevIndex) => (prevIndex === 0 ? images.length - 1 : prevIndex - 1))
  }

  const goToNext = () => {
    setCurrentIndex((prevIndex) => (prevIndex === images.length - 1 ? 0 : prevIndex + 1))
  }

  const goToImage = (index: number) => {
    setCurrentIndex(index)
  }

  return (
    <div className="space-y-2">
      <div className="relative aspect-square overflow-hidden rounded-md border">
        <img
          src={images[currentIndex] || "/placeholder.svg"}
          alt={`Product image ${currentIndex + 1}`}
          className="h-full w-full object-cover"
        />
        {images.length > 1 && (
          <>
            <Button
              variant="ghost"
              size="icon"
              className="absolute left-2 top-1/2 h-8 w-8 -translate-y-1/2 rounded-full bg-background/80 backdrop-blur-sm"
              onClick={goToPrevious}
            >
              <ChevronLeft className="h-4 w-4" />
              <span className="sr-only">Previous image</span>
            </Button>
            <Button
              variant="ghost"
              size="icon"
              className="absolute right-2 top-1/2 h-8 w-8 -translate-y-1/2 rounded-full bg-background/80 backdrop-blur-sm"
              onClick={goToNext}
            >
              <ChevronRight className="h-4 w-4" />
              <span className="sr-only">Next image</span>
            </Button>
          </>
        )}
      </div>

      {images.length > 1 && (
        <div className="flex justify-center gap-2 overflow-auto py-1">
          {images.map((image, index) => (
            <button
              key={index}
              className={`relative h-16 w-16 overflow-hidden rounded-md border ${
                index === currentIndex ? "ring-2 ring-primary" : ""
              }`}
              onClick={() => goToImage(index)}
            >
              <img
                src={image || "/placeholder.svg"}
                alt={`Thumbnail ${index + 1}`}
                className="h-full w-full object-cover"
              />
            </button>
          ))}
        </div>
      )}
    </div>
  )
}
</file>

<file path="app/stock/components/stock-item-label-download-wrapper.tsx">
"use client";

import { useState, useEffect } from 'react';
import { PDFDownloadLink } from '@react-pdf/renderer';
import { Button } from '@/components/ui/button';
import { Printer, Download } from 'lucide-react';
import StockItemLabelPDF from './stock-item-label-pdf';

// Define types
type LabelSettings = {
  type: 'standard' | 'large' | 'small';
  copies: number;
  includeProductName: boolean;
  includePrice: boolean;
  includeBarcode: boolean;
  includeDate: boolean;
  includeMetal: boolean;
  includeWeight: boolean;
  includePurity: boolean;
  includeQrCode: boolean;
  qrErrorCorrection: 'L' | 'M' | 'Q' | 'H';
};

type StockItemData = {
  id: string;
  name: string;
  price: number;
  category: string;
  material: string;
  weight: number;
  purity: string | null;
  dateAdded: Date;
};

type StockItemLabelDownloadWrapperProps = {
  itemData: StockItemData;
  labelSettings: LabelSettings;
};

const StockItemLabelDownloadWrapper = ({ 
  itemData, 
  labelSettings 
}: StockItemLabelDownloadWrapperProps) => {
  const [isClient, setIsClient] = useState(false);
  
  // React-PDF requires client-side rendering, so we use this effect to ensure we're on the client
  useEffect(() => {
    setIsClient(true);
  }, []);
  
  if (!isClient) {
    return (
      <Button disabled>
        <Printer className="mr-2 h-4 w-4" />
        Preparing Label...
      </Button>
    );
  }
  
  return (
    <PDFDownloadLink
      document={<StockItemLabelPDF itemData={itemData} labelSettings={labelSettings} />}
      fileName={`label-${itemData.id}.pdf`}
      style={{ textDecoration: 'none' }}
    >
      {({ blob, url, loading, error }) => 
        loading ? (
          <Button disabled>
            <Printer className="mr-2 h-4 w-4" />
            Generating PDF...
          </Button>
        ) : (
          <Button>
            <Download className="mr-2 h-4 w-4" />
            Download Label
          </Button>
        )
      }
    </PDFDownloadLink>
  );
};

export default StockItemLabelDownloadWrapper;
</file>

<file path="app/stock/components/stock-item-label-pdf.tsx">
"use client";

import { useEffect, useState } from 'react';
import { Document, Page, Text, View, StyleSheet, Image } from '@react-pdf/renderer';
import QRCode from 'qrcode';

// Constants for unit conversion
const MM_TO_PT = 2.83465; // 1mm = 2.83465pt

// Define types
type LabelSettings = {
  type: 'standard' | 'large' | 'small';
  copies: number;
  includeProductName: boolean;
  includePrice: boolean;
  includeBarcode: boolean;
  includeDate: boolean;
  includeMetal: boolean;
  includeWeight: boolean;
  includePurity: boolean;
  includeQrCode: boolean;
  qrErrorCorrection: 'L' | 'M' | 'Q' | 'H';
};

type StockItemData = {
  id: string;
  name: string;
  price: number;
  category: string;
  material: string;
  weight: number;
  purity: string | null;
  dateAdded: Date;
};

// Calculate size based on label type
const getLabelSize = (type: 'standard' | 'large' | 'small') => {
  switch (type) {
    case 'large':
      return {
        width: 3 * 72, // 3 inches in points
        height: 2 * 72, // 2 inches in points
      };
    case 'small':
      return {
        width: 1.5 * 72, // 1.5 inches in points
        height: 1 * 72, // 1 inch in points
      };
    case 'standard':
    default:
      return {
        width: 2.25 * 72, // 2.25 inches in points
        height: 1.25 * 72, // 1.25 inches in points
      };
  }
};

// Component props
type StockItemLabelPDFProps = {
  itemData: StockItemData;
  labelSettings: LabelSettings;
};

// Create PDF Document component
const StockItemLabelPDF = ({ itemData, labelSettings }: StockItemLabelPDFProps) => {
  const [qrDataUrl, setQrDataUrl] = useState<string | null>(null);
  const labelSize = getLabelSize(labelSettings.type);
  
  // Generate QR code when component mounts or when relevant props change
  useEffect(() => {
    const generateQRCode = async () => {
      if (labelSettings.includeQrCode) {
        try {
          // QR width based on label size - 10mm width
          const qrWidth = 30; // ~10mm at 72 DPI
          const dataUrl = await QRCode.toDataURL(itemData.id, { 
            errorCorrectionLevel: labelSettings.qrErrorCorrection, 
            width: qrWidth,
            margin: 1
          });
          setQrDataUrl(dataUrl);
        } catch (error) {
          console.error('Error generating QR code:', error);
        }
      }
    };
    
    generateQRCode();
  }, [itemData.id, labelSettings.includeQrCode, labelSettings.qrErrorCorrection]);
  
  // Define styles
  const styles = StyleSheet.create({
    page: {
      padding: 0,
      width: labelSize.width,
      height: labelSize.height,
    },
    labelContainer: {
      width: '100%',
      height: '100%',
      padding: 5,
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'space-between',
      border: '1pt solid #ccc',
    },
    header: {
      fontSize: 10,
      fontWeight: 'bold',
      marginBottom: 4,
      textAlign: 'center',
    },
    infoRow: {
      marginBottom: 2,
      fontSize: 8,
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'space-between',
    },
    labelText: {
      fontSize: 8,
      fontWeight: 'bold',
    },
    value: {
      fontSize: 8,
    },
    price: {
      fontSize: 12,
      fontWeight: 'bold',
      textAlign: 'center',
      marginVertical: 4,
    },
    qrCodeContainer: {
      alignSelf: 'center',
      marginTop: 3,
      marginBottom: 3,
    },
    qrCodeImage: {
      width: 10 * MM_TO_PT, // 10mm
      height: 10 * MM_TO_PT, // 10mm
    },
    footer: {
      fontSize: 6,
      textAlign: 'center',
      color: '#666',
      marginTop: 2,
    },
  });
  
  // Generate document with specified number of copies
  const copies = Array.from({ length: labelSettings.copies }, (_, i) => i);
  
  return (
    <Document>
      {copies.map((_, index) => (
        <Page key={index} size={[labelSize.width, labelSize.height]} style={styles.page}>
          <View style={styles.labelContainer}>
            {labelSettings.includeProductName && (
              <Text style={styles.header}>{itemData.name}</Text>
            )}
            
            <View style={styles.infoRow}>
              {labelSettings.includeMetal && (
                <View>
                  <Text style={styles.labelText}>Metal:</Text>
                  <Text style={styles.value}>{itemData.material}</Text>
                </View>
              )}
              
              {labelSettings.includePurity && (
                <View>
                  <Text style={styles.labelText}>Purity:</Text>
                  <Text style={styles.value}>{itemData.purity || 'N/A'}</Text>
                </View>
              )}
              
              {labelSettings.includeWeight && (
                <View>
                  <Text style={styles.labelText}>Weight:</Text>
                  <Text style={styles.value}>{itemData.weight}g</Text>
                </View>
              )}
            </View>
            
            {labelSettings.includePrice && (
              <Text style={styles.price}>₹{itemData.price.toLocaleString()}</Text>
            )}
            
            {labelSettings.includeQrCode && qrDataUrl && (
              <View style={styles.qrCodeContainer}>
                <Image src={qrDataUrl} style={styles.qrCodeImage} />
              </View>
            )}
            
            {labelSettings.includeDate && (
              <Text style={styles.footer}>
                Date: {itemData.dateAdded.toLocaleDateString()}
              </Text>
            )}
          </View>
        </Page>
      ))}
    </Document>
  );
};

export default StockItemLabelPDF;
</file>

<file path="app/stock/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="components/ui/accordion.tsx">
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="components/ui/aspect-ratio.tsx">
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="components/ui/avatar.tsx">
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="components/ui/badge.tsx">
import type * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
)

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />
}

export { Badge, badgeVariants }
</file>

<file path="components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="components/ui/calendar.tsx">
"use client"

import type * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100",
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell: "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(buttonVariants({ variant: "ghost" }), "h-9 w-9 p-0 font-normal aria-selected:opacity-100"),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle: "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }
</file>

<file path="components/ui/carousel.tsx">
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="components/ui/chart.tsx">
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="components/ui/checkbox.tsx">
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="components/ui/collapsible.tsx">
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="components/ui/command.tsx">
"use client"

import * as React from "react"
import type { DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className,
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />)

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className,
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator ref={ref} className={cn("-mx-1 h-px bg-border", className)} {...props} />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)} {...props} />
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="components/ui/confirm-dialog.tsx">
"use client"

import { ReactNode } from "react"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import { Button } from "@/components/ui/button"

interface ConfirmDialogProps {
  trigger: ReactNode
  title: string
  description: string
  actionText: string
  cancelText?: string
  variant?: "default" | "destructive" | "outline" | "secondary" | "ghost" | "link"
  onConfirm: () => void
}

export function ConfirmDialog({
  trigger,
  title,
  description,
  actionText,
  cancelText = "Cancel",
  variant = "default",
  onConfirm,
}: ConfirmDialogProps) {
  return (
    <AlertDialog>
      <AlertDialogTrigger asChild>
        {trigger}
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>{title}</AlertDialogTitle>
          <AlertDialogDescription>
            {description}
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel>{cancelText}</AlertDialogCancel>
          <AlertDialogAction asChild>
            <Button 
              variant={variant} 
              onClick={(e) => {
                e.preventDefault()
                onConfirm()
              }}
            >
              {actionText}
            </Button>
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  )
}
</file>

<file path="components/ui/context-menu.tsx">
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="components/ui/dialog.tsx">
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="components/ui/drawer.tsx">
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="components/ui/dropdown-menu.tsx">
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="components/ui/form.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="components/ui/hover-card.tsx">
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="components/ui/input-otp.tsx">
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="components/ui/label.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="components/ui/menubar.tsx">
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="components/ui/navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="components/ui/notification-bell.tsx">
'use client'

import { Bell } from 'lucide-react'
import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { useNotifications } from '@/lib/providers/notification-provider'
import { cn } from '@/lib/utils'
import { formatDistanceToNow } from 'date-fns'
import Link from 'next/link'

export function NotificationBell() {
  const { notifications, unreadCount, markAsRead, markAllAsRead } = useNotifications()

  // Format the notification date
  const formatDate = (date: string) => {
    return formatDistanceToNow(new Date(date), { addSuffix: true })
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button size="icon" variant="ghost" className="relative">
          <Bell className="h-5 w-5" />
          {unreadCount > 0 && (
            <span className="absolute -top-1 -right-1 flex h-5 w-5 items-center justify-center rounded-full bg-red-500 text-[10px] font-medium text-white">
              {unreadCount > 9 ? '9+' : unreadCount}
            </span>
          )}
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-80">
        <div className="flex items-center justify-between p-2">
          <h3 className="font-semibold">Notifications</h3>
          {unreadCount > 0 && (
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => markAllAsRead()}
              className="text-xs"
            >
              Mark all as read
            </Button>
          )}
        </div>
        <div className="max-h-[300px] overflow-y-auto">
          {notifications.length === 0 ? (
            <div className="p-4 text-center text-sm text-muted-foreground">
              No notifications
            </div>
          ) : (
            notifications.map((notification) => (
              <DropdownMenuItem
                key={notification.id}
                className={cn(
                  "flex flex-col items-start gap-1 p-3",
                  !notification.read_at && "bg-muted/50"
                )}
                onClick={(e) => {
                  e.preventDefault()
                  if (!notification.read_at) {
                    markAsRead(notification.id)
                  }
                }}
              >
                {notification.action_url ? (
                  <Link 
                    href={notification.action_url} 
                    className="w-full"
                    onClick={() => {
                      if (!notification.read_at) {
                        markAsRead(notification.id)
                      }
                    }}
                  >
                    <div className="flex flex-col w-full">
                      <span className="font-medium">{notification.title}</span>
                      <span className="text-sm">{notification.message}</span>
                      <span className="mt-1 text-xs text-muted-foreground">
                        {formatDate(notification.created_at)}
                      </span>
                    </div>
                  </Link>
                ) : (
                  <div className="flex flex-col w-full">
                    <span className="font-medium">{notification.title}</span>
                    <span className="text-sm">{notification.message}</span>
                    <span className="mt-1 text-xs text-muted-foreground">
                      {formatDate(notification.created_at)}
                    </span>
                  </div>
                )}
              </DropdownMenuItem>
            ))
          )}
        </div>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
</file>

<file path="components/ui/pagination.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>

<file path="components/ui/popover.tsx">
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="components/ui/progress.tsx">
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="components/ui/radio-group.tsx">
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return <RadioGroupPrimitive.Root className={cn("grid gap-2", className)} {...props} ref={ref} />
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="components/ui/resizable.tsx">
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="components/ui/scroll-area.tsx">
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="components/ui/select.tsx">
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="components/ui/separator.tsx">
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="components/ui/sheet.tsx">
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="components/ui/sidebar.tsx">
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { type VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState(false)

  React.useEffect(() => {
    const checkIsMobile = () => {
      setIsMobile(window.innerWidth < 768)
    }
    checkIsMobile()
    window.addEventListener("resize", checkIsMobile)
    return () => {
      window.removeEventListener("resize", checkIsMobile)
    }
  }, [])

  return isMobile
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(({ defaultOpen = true, open: openProp, onOpenChange: setOpenProp, className, style, children, ...props }, ref) => {
  const isMobile = useIsMobile()
  const [openMobile, setOpenMobile] = React.useState(false)

  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen)
  const open = openProp ?? _open
  const setOpen = React.useCallback(
    (value: boolean | ((value: boolean) => boolean)) => {
      const openState = typeof value === "function" ? value(open) : value
      if (setOpenProp) {
        setOpenProp(openState)
      } else {
        _setOpen(openState)
      }

      // This sets the cookie to keep the sidebar state.
      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
    },
    [setOpenProp, open],
  )

  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)
  }, [isMobile, setOpen, setOpenMobile])

  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {
        event.preventDefault()
        toggleSidebar()
      }
    }

    window.addEventListener("keydown", handleKeyDown)
    return () => window.removeEventListener("keydown", handleKeyDown)
  }, [toggleSidebar])

  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? "expanded" : "collapsed"

  const contextValue = React.useMemo<SidebarContext>(
    () => ({
      state,
      open,
      setOpen,
      isMobile,
      openMobile,
      setOpenMobile,
      toggleSidebar,
    }),
    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],
  )

  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH,
              "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
              ...style,
            } as React.CSSProperties
          }
          className={cn("group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar", className)}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  )
})
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(({ side = "left", variant = "sidebar", collapsible = "offcanvas", className, children, ...props }, ref) => {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

  if (collapsible === "none") {
    return (
      <div
        className={cn("flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground", className)}
        ref={ref}
        {...props}
      >
        {children}
      </div>
    )
  }

  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-mobile="true"
          className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
            } as React.CSSProperties
          }
          side={side}
        >
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    )
  }

  return (
    <div
      ref={ref}
      className="group peer hidden md:block text-sidebar-foreground"
      data-state={state}
      data-collapsible={state === "collapsed" ? collapsible : ""}
      data-variant={variant}
      data-side={side}
    >
      {/* This is what handles the sidebar gap on desktop */}
      <div
        className={cn(
          "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
          "group-data-[collapsible=offcanvas]:w-0",
          "group-data-[side=right]:rotate-180",
          variant === "floating" || variant === "inset"
            ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
            : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]",
        )}
      />
      <div
        className={cn(
          "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
          side === "left"
            ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
            : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
          // Adjust the padding for floating and inset variants.
          variant === "floating" || variant === "inset"
            ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
            : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
          className,
        )}
        {...props}
      >
        <div
          data-sidebar="sidebar"
          className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
        >
          {children}
        </div>
      </div>
    </div>
  )
})
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<React.ElementRef<typeof Button>, React.ComponentProps<typeof Button>>(
  ({ className, onClick, ...props }, ref) => {
    const { toggleSidebar } = useSidebar()

    return (
      <Button
        ref={ref}
        data-sidebar="trigger"
        variant="ghost"
        size="icon"
        className={cn("h-7 w-7", className)}
        onClick={(event) => {
          onClick?.(event)
          toggleSidebar()
        }}
        {...props}
      >
        <PanelLeft />
        <span className="sr-only">Toggle Sidebar</span>
      </Button>
    )
  },
)
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<"button">>(
  ({ className, ...props }, ref) => {
    const { toggleSidebar } = useSidebar()

    return (
      <button
        ref={ref}
        data-sidebar="rail"
        aria-label="Toggle Sidebar"
        tabIndex={-1}
        onClick={toggleSidebar}
        title="Toggle Sidebar"
        className={cn(
          "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
          "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
          "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
          "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
          "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
          "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
          className,
        )}
        {...props}
      />
    )
  },
)
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<"main">>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className,
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<React.ElementRef<typeof Input>, React.ComponentProps<typeof Input>>(
  ({ className, ...props }, ref) => {
    return (
      <Input
        ref={ref}
        data-sidebar="input"
        className={cn(
          "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
          className,
        )}
        {...props}
      />
    )
  },
)
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return <div ref={ref} data-sidebar="header" className={cn("flex flex-col gap-2 p-2", className)} {...props} />
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return <div ref={ref} data-sidebar="footer" className={cn("flex flex-col gap-2 p-2", className)} {...props} />
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<React.ElementRef<typeof Separator>, React.ComponentProps<typeof Separator>>(
  ({ className, ...props }, ref) => {
    return (
      <Separator
        ref={ref}
        data-sidebar="separator"
        className={cn("mx-2 w-auto bg-sidebar-border", className)}
        {...props}
      />
    )
  },
)
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className,
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<HTMLDivElement, React.ComponentProps<"div"> & { asChild?: boolean }>(
  ({ className, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "div"

    return (
      <Comp
        ref={ref}
        data-sidebar="group-label"
        className={cn(
          "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
          "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
          className,
        )}
        {...props}
      />
    )
  },
)
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<HTMLButtonElement, React.ComponentProps<"button"> & { asChild?: boolean }>(
  ({ className, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"

    return (
      <Comp
        ref={ref}
        data-sidebar="group-action"
        className={cn(
          "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
          // Increases the hit area of the button on mobile.
          "after:absolute after:-inset-2 after:md:hidden",
          "group-data-[collapsible=icon]:hidden",
          className,
        )}
        {...props}
      />
    )
  },
)
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(
  ({ className, ...props }, ref) => (
    <div ref={ref} data-sidebar="group-content" className={cn("w-full text-sm", className)} {...props} />
  ),
)
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<"ul">>(({ className, ...props }, ref) => (
  <ul ref={ref} data-sidebar="menu" className={cn("flex w-full min-w-0 flex-col gap-1", className)} {...props} />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<"li">>(({ className, ...props }, ref) => (
  <li ref={ref} data-sidebar="menu-item" className={cn("group/menu-item relative", className)} {...props} />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(({ asChild = false, isActive = false, variant = "default", size = "default", tooltip, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  const { isMobile, state } = useSidebar()

  const button = (
    <Comp
      ref={ref}
      data-sidebar="menu-button"
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props}
    />
  )

  if (!tooltip) {
    return button
  }

  if (typeof tooltip === "string") {
    tooltip = {
      children: tooltip,
    }
  }

  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent side="right" align="center" hidden={state !== "collapsed" || isMobile} {...tooltip} />
    </Tooltip>
  )
})
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className,
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      data-sidebar="menu-badge"
      className={cn(
        "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
        "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  ),
)
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && <Skeleton className="size-4 rounded-md" data-sidebar="menu-skeleton-icon" />}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<"ul">>(
  ({ className, ...props }, ref) => (
    <ul
      ref={ref}
      data-sidebar="menu-sub"
      className={cn(
        "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  ),
)
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<"li">>(({ ...props }, ref) => (
  <li ref={ref} {...props} />
))
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="components/ui/slider.tsx">
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="components/ui/sonner.tsx">
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }
</file>

<file path="components/ui/switch.tsx">
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className,
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0",
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="components/ui/time-input.tsx">
'use client'

import * as React from 'react'
import { Input } from '@/components/ui/input'

interface TimeInputProps {
  id?: string
  value: string
  onChange: (value: string) => void
  disabled?: boolean
  className?: string
}

export function TimeInput({
  value,
  onChange,
  disabled,
  id,
  className,
  ...props
}: TimeInputProps & Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange' | 'value'>) {
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    onChange(e.target.value)
  }

  return (
    <Input
      id={id}
      type="time"
      value={value}
      onChange={handleChange}
      disabled={disabled}
      className={className}
      {...props}
    />
  )
}
</file>

<file path="components/ui/toast.tsx">
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className,
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive: "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return <ToastPrimitives.Root ref={ref} className={cn(toastVariants({ variant }), className)} {...props} />
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className,
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className,
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title ref={ref} className={cn("text-sm font-semibold", className)} {...props} />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description ref={ref} className={cn("text-sm opacity-90", className)} {...props} />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="components/ui/toaster.tsx">
"use client"

import { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport } from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(({ id, title, description, action, ...props }) => (
        <Toast key={id} {...props}>
          <div className="grid gap-1">
            {title && <ToastTitle>{title}</ToastTitle>}
            {description && <ToastDescription>{description}</ToastDescription>}
          </div>
          {action}
          <ToastClose />
        </Toast>
      ))}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="components/ui/toggle-group.tsx">
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="components/ui/toggle.tsx">
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="components/ui/tooltip.tsx">
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="components/ui/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="components/ui/use-toast.tsx">
"use client"

// Shadcn/ui toast component
import * as React from "react"

import type { ToastActionElement, ToastProps } from "@/components/ui/toast"

const TOAST_LIMIT = 5
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: string
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: string
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

function addToRemoveQueue(toastId: string) {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export { useToast, toast }
</file>

<file path="components/auth-provider.tsx">
"use client";

import { createContext, useContext, useEffect, useState } from 'react';
import { Session, User } from '@supabase/supabase-js';
import supabase from '@/lib/supabase';

type AuthContextType = {
  user: User | null;
  session: Session | null;
  isLoading: boolean;
};

const AuthContext = createContext<AuthContextType>({
  user: null,
  session: null,
  isLoading: true,
});

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Get the initial session
    const getInitialSession = async () => {
      setIsLoading(true);
      
      const { data, error } = await supabase.auth.getSession();
      
      if (!error && data.session) {
        setSession(data.session);
        setUser(data.session.user);
      }
      
      setIsLoading(false);
    };

    getInitialSession();

    // Set up the auth state listener
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (_event, session) => {
        setSession(session);
        setUser(session?.user ?? null);
        setIsLoading(false);
      }
    );

    // Clean up the subscription
    return () => {
      subscription.unsubscribe();
    };
  }, []);

  const value = {
    user,
    session,
    isLoading,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
</file>

<file path="components/header.tsx">
'use client'

import Link from 'next/link'
import { Diamond as DiamondIcon } from 'lucide-react'
import { ModeToggle } from '@/components/mode-toggle'
import { UserNav } from '@/components/user-nav'
import { SidebarToggle } from '@/components/sidebar-toggle'
import { NotificationBell } from '@/components/ui/notification-bell'

export function Header() {
  return (
    <header className="sticky top-0 z-50 flex h-16 w-full shrink-0 items-center justify-between border-b bg-background px-4 shadow-sm sm:px-6">
      <div className="flex items-center gap-4">
        <SidebarToggle />
        <Link href="/" passHref className="flex items-center gap-2">
          <DiamondIcon className="h-6 w-6 text-primary" />
          <span className="text-lg font-semibold tracking-tight">Jewelry Invoice</span>
        </Link>
      </div>
      <div className="flex items-center gap-4">
        <NotificationBell />
        <ModeToggle />
        <UserNav />
      </div>
    </header>
  )
}
</file>

<file path="components/mode-toggle.tsx">
'use client'

import * as React from 'react'
import { Moon, Sun } from 'lucide-react'
import { useTheme } from 'next-themes'

import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'

export function ModeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme('light')}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('dark')}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('system')}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
</file>

<file path="components/sidebar-toggle.tsx">
'use client'

import { Button } from '@/components/ui/button'
import { Menu } from 'lucide-react'
import { useEffect, useState } from 'react'

export function SidebarToggle() {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false)
  
  // Toggle sidebar visibility
  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen)
    // Dispatch custom event to communicate with sidebar component
    document.dispatchEvent(new CustomEvent('toggle-sidebar'))
  }
  
  return (
    <Button variant="ghost" size="icon" onClick={toggleSidebar} className="md:hidden">
      <Menu className="h-5 w-5" />
      <span className="sr-only">Toggle sidebar</span>
    </Button>
  )
}
</file>

<file path="components/theme-provider.tsx">
"use client"

import type * as React from "react"
import { createContext, useContext, useEffect } from "react"

type Theme = "slate"

type ThemeProviderProps = {
  children: React.ReactNode
}

type ThemeProviderState = {
  theme: Theme
}

const initialState: ThemeProviderState = {
  theme: "slate",
}

const ThemeProviderContext = createContext<ThemeProviderState>(initialState)

export function ThemeProvider({ children }: ThemeProviderProps) {
  useEffect(() => {
    // Remove any previously saved theme to ensure consistency
    localStorage.removeItem("ui-theme")
    
    // Apply slate theme directly
    const root = document.documentElement
    root.setAttribute("data-theme", "slate")
  }, [])

  return <ThemeProviderContext.Provider value={initialState}>{children}</ThemeProviderContext.Provider>
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext)

  if (context === undefined) {
    throw new Error("useTheme must be used within a ThemeProvider")
  }

  return context
}
</file>

<file path="components/user-nav.tsx">
'use client'

import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { User } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { useState, useEffect } from 'react'

export function UserNav() {
  const supabase = createClientComponentClient()
  const router = useRouter()
  const [userInitials, setUserInitials] = useState('U')
  const [userEmail, setUserEmail] = useState('')
  
  useEffect(() => {
    const getUserData = async () => {
      const { data: { user } } = await supabase.auth.getUser()
      if (user?.email) {
        setUserEmail(user.email)
        // Create initials from email (e.g., john.doe@example.com -> JD)
        const parts = user.email.split('@')[0].split(/[._-]/)
        const initials = parts.length > 1 
          ? (parts[0][0] + parts[1][0]).toUpperCase()
          : parts[0].substring(0, 2).toUpperCase()
        setUserInitials(initials)
      }
    }
    
    getUserData()
  }, [supabase])
  
  const handleSignOut = async () => {
    await supabase.auth.signOut()
    router.push('/login')
  }
  
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-8 w-8 rounded-full">
          <Avatar className="h-8 w-8">
            <AvatarImage src="" alt="Profile" />
            <AvatarFallback>{userInitials}</AvatarFallback>
          </Avatar>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">{userEmail}</p>
            <p className="text-xs leading-none text-muted-foreground">
              User Account
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuGroup>
          <DropdownMenuItem onClick={() => router.push('/settings')}>
            Settings
          </DropdownMenuItem>
        </DropdownMenuGroup>
        <DropdownMenuSeparator />
        <DropdownMenuItem onClick={handleSignOut}>
          Log out
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
</file>

<file path="hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="hooks/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="lib/hooks/useUserSettings.tsx">
'use client'

import { useEffect, useState } from 'react'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { Tables } from '@/lib/database.types'

type UserSettings = Tables<'user_settings'> | null

export default function useUserSettings() {
  const supabase = createClientComponentClient()
  const [settings, setSettings] = useState<UserSettings>(null)
  const [loading, setLoading] = useState(true)

  const fetchSettings = async () => {
    setLoading(true)
    try {
      const { data: user } = await supabase.auth.getUser()
      if (!user.user) {
        setSettings(null)
        return
      }

      const { data, error } = await supabase
        .from('user_settings')
        .select('*')
        .eq('user_id', user.user.id)
        .single()

      if (error && error.code !== 'PGRST116') {
        console.error('Error fetching user settings:', error)
      }

      setSettings(data || null)
    } catch (error) {
      console.error('Error in useUserSettings:', error)
    } finally {
      setLoading(false)
    }
  }

  const updateSettings = async (updates: Partial<Tables<'user_settings'>>) => {
    try {
      const { data: user } = await supabase.auth.getUser()
      if (!user.user) return null

      // If settings exist, update them
      if (settings) {
        const { data, error } = await supabase
          .from('user_settings')
          .update({
            ...updates,
            updated_at: new Date().toISOString()
          })
          .eq('user_id', user.user.id)
          .select()
          .single()

        if (error) {
          console.error('Error updating user settings:', error)
          return null
        }

        setSettings(data)
        return data
      } 
      // If settings don't exist, create them
      else {
        const { data, error } = await supabase
          .from('user_settings')
          .insert({
            user_id: user.user.id,
            ...updates,
            updated_at: new Date().toISOString()
          })
          .select()
          .single()

        if (error) {
          console.error('Error creating user settings:', error)
          return null
        }

        setSettings(data)
        return data
      }
    } catch (error) {
      console.error('Error in updateSettings:', error)
      return null
    }
  }

  useEffect(() => {
    fetchSettings()
  }, [])

  return { settings, loading, updateSettings, refreshSettings: fetchSettings }
}
</file>

<file path="lib/imageUtils.ts">
/**
 * Utility functions for image processing
 */

/**
 * Compresses an image based on the specified compression level
 * @param file The image file to compress
 * @param compressionLevel The level of compression to apply
 * @returns A promise that resolves to the compressed file
 */
export async function compressImage(
  file: File,
  compressionLevel: 'none' | 'low' | 'medium' | 'high'
): Promise<File> {
  // If no compression is requested, return the original file
  if (compressionLevel === 'none') {
    return file;
  }

  // Determine the quality factor based on compression level
  const qualityFactor = {
    low: 0.75,
    medium: 0.50,
    high: 0.30
  }[compressionLevel];

  return new Promise((resolve, reject) => {
    try {
      // Create an image object
      const img = new Image();
      img.src = URL.createObjectURL(file);

      img.onload = () => {
        // Clean up the object URL
        URL.revokeObjectURL(img.src);

        // Create a canvas element
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        
        if (!ctx) {
          reject(new Error('Could not get canvas context'));
          return;
        }

        // Set canvas dimensions to match the image
        canvas.width = img.width;
        canvas.height = img.height;

        // Draw the image onto the canvas
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

        // Convert canvas to Blob
        canvas.toBlob(
          (blob) => {
            if (!blob) {
              reject(new Error('Failed to create blob from canvas'));
              return;
            }

            // Create a new File from the Blob
            const compressedFile = new File(
              [blob],
              `compressed_${file.name}`,
              {
                type: 'image/jpeg',
                lastModified: new Date().getTime()
              }
            );

            resolve(compressedFile);
          },
          'image/jpeg',
          qualityFactor
        );
      };

      img.onerror = () => {
        URL.revokeObjectURL(img.src);
        reject(new Error('Failed to load image'));
      };
    } catch (error) {
      reject(error);
    }
  });
}
</file>

<file path="lib/invoice-text.ts">
export const TERMS_AND_CONDITIONS = [
  "Please note that, the net amount includes Metal Value, Cost of Stones (Precious, Non Precious and other material Charges), Product Making Charges/Wastage Charges, GST and other taxes (as applicable). Upon specific request detailed statement will be provided.",
  "Weight verified and Received product in good condition.",
  "I hereby confirm the purity, weight and value of the material & have read & accepted all terms and conditions & further acknowledge the amount stated is correct and accurate.",
  "If other (non-precious/semiprecious) materials are included in the product, the product gross weight is inclusive of other material weight."
];

export const AGREEMENT_TEXT = "Read / Understood and agreed to the terms and conditions overleaf";
</file>

<file path="lib/storage-utils.ts">
import supabase from './supabase';

/**
 * Get a signed URL for downloading a file from storage
 * @param bucket - Storage bucket name
 * @param path - File path in the bucket
 * @param expiresIn - URL expiration time in seconds (default: 3600)
 * @returns Signed URL or null if error
 */
export const getSignedUrl = async (
  bucket: string,
  path: string,
  expiresIn: number = 3600
): Promise<string | null> => {
  try {
    // Get the current session token
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      console.error('No active session');
      return null;
    }

    const response = await fetch('/api/storage/signed-url', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.access_token}`,
      },
      body: JSON.stringify({ bucket, path, expiresIn }),
    });

    if (!response.ok) {
      const error = await response.json();
      console.error('Error getting signed URL:', error);
      return null;
    }

    const data = await response.json();
    return data.signedUrl;
  } catch (error) {
    console.error('Error in getSignedUrl:', error);
    return null;
  }
};

/**
 * Upload a file to storage using the secure API endpoint
 * @param bucket - Storage bucket name
 * @param path - File path in the bucket (must start with user_id/)
 * @param file - File to upload
 * @returns Object with path and signedUrl, or null if error
 */
export const uploadFile = async (
  bucket: string,
  path: string,
  file: File
): Promise<{ path: string; signedUrl: string } | null> => {
  try {
    // Get the current session token
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      console.error('No active session');
      return null;
    }

    const formData = new FormData();
    formData.append('file', file);
    formData.append('bucket', bucket);
    formData.append('path', path);

    const response = await fetch('/api/storage/upload', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${session.access_token}`,
      },
      body: formData,
    });

    if (!response.ok) {
      const error = await response.json();
      console.error('Error uploading file:', error);
      return null;
    }

    const data = await response.json();
    return { path: data.path, signedUrl: data.signedUrl };
  } catch (error) {
    console.error('Error in uploadFile:', error);
    return null;
  }
};

/**
 * Extract storage path from a public or signed URL
 * @param url - The URL to parse
 * @param bucketName - The bucket name to look for
 * @returns Storage path or null if not found
 */
export const extractStoragePathFromUrl = (
  url: string,
  bucketName: string
): string | null => {
  try {
    const urlObj = new URL(url);
    const pathParts = urlObj.pathname.split('/');
    const bucketIndex = pathParts.indexOf(bucketName);
    
    if (bucketIndex !== -1 && bucketIndex < pathParts.length - 1) {
      return pathParts.slice(bucketIndex + 1).join('/');
    }
    return null;
  } catch (error) {
    console.error('Error parsing storage URL:', error);
    return null;
  }
};
</file>

<file path="lib/supabase-server.ts">
import { createClient } from '@supabase/supabase-js';
import type { Database } from './database.types';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceRole = process.env.SUPABASE_SERVICE_ROLE_KEY!;

// Server-side Supabase client with service role key
// This should ONLY be used in server-side code (API routes, server components)
// NEVER expose this client to the browser
export const supabaseServer = createClient<Database>(
  supabaseUrl,
  supabaseServiceRole,
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);
</file>

<file path="lib/types.ts">
import { Database } from '@/lib/database.types'
import { Session, User } from '@supabase/supabase-js'

// Export types for Supabase Auth
export type { Session, User }

// Define user profile type
export interface UserProfile {
  id: string
  email: string
  full_name?: string
  avatar_url?: string
  updated_at?: string
}

// Define a type for our Supabase database
export type Tables = Database['public']['Tables']

// For convenience, you can add specific table types here
export type InvoiceType = Tables['invoices']['Row']
export type CustomerType = Tables['customers']['Row']
export type ProductType = Tables['products']['Row']

// Helper type for form input
export type FormData<T> = {
  [K in keyof T]: T[K]
}
</file>

<file path="lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="migrations/add_is_sold_to_stock_items.sql">
-- Add is_sold and sold_at columns to stock_items table
ALTER TABLE stock_items
ADD COLUMN is_sold BOOLEAN DEFAULT false NOT NULL,
ADD COLUMN sold_at TIMESTAMPTZ NULL;

-- Create an index for faster querying of sold items
CREATE INDEX idx_stock_items_is_sold ON stock_items (is_sold);
</file>

<file path="migrations/add_qr_error_correction_to_user_settings.sql">
-- Create enum type for QR error correction level
CREATE TYPE qr_error_correction_level_enum AS ENUM ('L', 'M', 'Q', 'H');

-- Add label_qr_error_correction column to user_settings table
ALTER TABLE user_settings
ADD COLUMN label_qr_error_correction qr_error_correction_level_enum DEFAULT 'M';
</file>

<file path="migrations/create_notifications_table.sql">
-- Create notifications table
CREATE TABLE IF NOT EXISTS notifications (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  type TEXT NOT NULL,
  title TEXT NOT NULL,
  message TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  read_at TIMESTAMPTZ,
  action_url TEXT,
  
  -- Add indexes for better query performance
  CONSTRAINT valid_notification_type CHECK (type IN ('gold_rate_update', 'system_alert', 'reminder')),
  CONSTRAINT valid_action_url CHECK (action_url IS NULL OR action_url ~ '^/')
);

-- Create indexes
CREATE INDEX notifications_user_id_idx ON notifications(user_id);
CREATE INDEX notifications_type_idx ON notifications(type);
CREATE INDEX notifications_created_at_idx ON notifications(created_at);
CREATE INDEX notifications_read_at_idx ON notifications(read_at);

-- Row Level Security (RLS)
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- Allow users to view their own notifications
CREATE POLICY notifications_select_policy ON notifications
  FOR SELECT USING (auth.uid() = user_id);

-- Allow users to update read_at status of their own notifications
CREATE POLICY notifications_update_policy ON notifications
  FOR UPDATE USING (auth.uid() = user_id)
  WITH CHECK (
    -- Only allow updating the read_at column
    auth.uid() = user_id
  );
</file>

<file path="migrations/enable_rls_policies.sql">
-- Enable Row Level Security (RLS) on all tables
-- This migration implements strict security policies to ensure users can only access their own data

-- ============================================================
-- CUSTOMERS TABLE
-- ============================================================
ALTER TABLE public.customers ENABLE ROW LEVEL SECURITY;

-- Allow users to view only their own customers
CREATE POLICY "Users can view their own customers"
ON public.customers
FOR SELECT
USING (auth.uid() = user_id);

-- Allow users to insert only their own customers
CREATE POLICY "Users can insert their own customers"
ON public.customers
FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Allow users to update only their own customers
CREATE POLICY "Users can update their own customers"
ON public.customers
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Allow users to delete only their own customers
CREATE POLICY "Users can delete their own customers"
ON public.customers
FOR DELETE
USING (auth.uid() = user_id);

-- ============================================================
-- INVOICES TABLE
-- ============================================================
ALTER TABLE public.invoices ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own invoices"
ON public.invoices
FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own invoices"
ON public.invoices
FOR INSERT
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own invoices"
ON public.invoices
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own invoices"
ON public.invoices
FOR DELETE
USING (auth.uid() = user_id);

-- ============================================================
-- INVOICE ITEMS TABLE
-- ============================================================
ALTER TABLE public.invoice_items ENABLE ROW LEVEL SECURITY;

-- Invoice items should be accessible only if the parent invoice belongs to the user
CREATE POLICY "Users can view their own invoice items"
ON public.invoice_items
FOR SELECT
USING (
  EXISTS (
    SELECT 1 FROM public.invoices
    WHERE invoices.id = invoice_items.invoice_id
    AND invoices.user_id = auth.uid()
  )
);

CREATE POLICY "Users can insert their own invoice items"
ON public.invoice_items
FOR INSERT
WITH CHECK (
  EXISTS (
    SELECT 1 FROM public.invoices
    WHERE invoices.id = invoice_items.invoice_id
    AND invoices.user_id = auth.uid()
  )
);

CREATE POLICY "Users can update their own invoice items"
ON public.invoice_items
FOR UPDATE
USING (
  EXISTS (
    SELECT 1 FROM public.invoices
    WHERE invoices.id = invoice_items.invoice_id
    AND invoices.user_id = auth.uid()
  )
);

CREATE POLICY "Users can delete their own invoice items"
ON public.invoice_items
FOR DELETE
USING (
  EXISTS (
    SELECT 1 FROM public.invoices
    WHERE invoices.id = invoice_items.invoice_id
    AND invoices.user_id = auth.uid()
  )
);

-- ============================================================
-- STOCK ITEMS TABLE
-- ============================================================
ALTER TABLE public.stock_items ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own stock items"
ON public.stock_items
FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own stock items"
ON public.stock_items
FOR INSERT
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own stock items"
ON public.stock_items
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own stock items"
ON public.stock_items
FOR DELETE
USING (auth.uid() = user_id);

-- ============================================================
-- STOCK CATEGORIES TABLE
-- ============================================================
ALTER TABLE public.stock_categories ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own stock categories"
ON public.stock_categories
FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own stock categories"
ON public.stock_categories
FOR INSERT
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own stock categories"
ON public.stock_categories
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own stock categories"
ON public.stock_categories
FOR DELETE
USING (auth.uid() = user_id);

-- ============================================================
-- SUPPLIERS TABLE
-- ============================================================
ALTER TABLE public.suppliers ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own suppliers"
ON public.suppliers
FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own suppliers"
ON public.suppliers
FOR INSERT
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own suppliers"
ON public.suppliers
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own suppliers"
ON public.suppliers
FOR DELETE
USING (auth.uid() = user_id);

-- ============================================================
-- PURCHASE INVOICES TABLE
-- ============================================================
ALTER TABLE public.purchase_invoices ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own purchase invoices"
ON public.purchase_invoices
FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own purchase invoices"
ON public.purchase_invoices
FOR INSERT
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own purchase invoices"
ON public.purchase_invoices
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own purchase invoices"
ON public.purchase_invoices
FOR DELETE
USING (auth.uid() = user_id);

-- ============================================================
-- BOOKINGS TABLE
-- ============================================================
ALTER TABLE public.bookings ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own bookings"
ON public.bookings
FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own bookings"
ON public.bookings
FOR INSERT
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own bookings"
ON public.bookings
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own bookings"
ON public.bookings
FOR DELETE
USING (auth.uid() = user_id);

-- ============================================================
-- USER SETTINGS TABLE
-- ============================================================
ALTER TABLE public.user_settings ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own settings"
ON public.user_settings
FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own settings"
ON public.user_settings
FOR INSERT
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own settings"
ON public.user_settings
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own settings"
ON public.user_settings
FOR DELETE
USING (auth.uid() = user_id);

-- ============================================================
-- NOTIFICATIONS TABLE
-- ============================================================
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own notifications"
ON public.notifications
FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own notifications"
ON public.notifications
FOR INSERT
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own notifications"
ON public.notifications
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own notifications"
ON public.notifications
FOR DELETE
USING (auth.uid() = user_id);

-- ============================================================
-- PUSH SUBSCRIPTIONS TABLE (if exists)
-- ============================================================
DO $$
BEGIN
  IF EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'push_subscriptions') THEN
    ALTER TABLE public.push_subscriptions ENABLE ROW LEVEL SECURITY;
    
    CREATE POLICY "Users can view their own push subscriptions"
    ON public.push_subscriptions
    FOR SELECT
    USING (auth.uid() = user_id);
    
    CREATE POLICY "Users can insert their own push subscriptions"
    ON public.push_subscriptions
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);
    
    CREATE POLICY "Users can update their own push subscriptions"
    ON public.push_subscriptions
    FOR UPDATE
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);
    
    CREATE POLICY "Users can delete their own push subscriptions"
    ON public.push_subscriptions
    FOR DELETE
    USING (auth.uid() = user_id);
  END IF;
END $$;

-- ============================================================
-- STORAGE BUCKET POLICIES
-- ============================================================

-- Make storage buckets private (this must be done manually in Supabase Dashboard or via API)
-- Then create policies for the buckets

-- Policy for purchase-invoices bucket
INSERT INTO storage.buckets (id, name, public)
VALUES ('purchase-invoices', 'purchase-invoices', false)
ON CONFLICT (id) DO UPDATE SET public = false;

CREATE POLICY "Users can view their own purchase invoice files"
ON storage.objects
FOR SELECT
USING (
  bucket_id = 'purchase-invoices'
  AND auth.uid()::text = (storage.foldername(name))[1]
);

CREATE POLICY "Users can upload their own purchase invoice files"
ON storage.objects
FOR INSERT
WITH CHECK (
  bucket_id = 'purchase-invoices'
  AND auth.uid()::text = (storage.foldername(name))[1]
);

CREATE POLICY "Users can update their own purchase invoice files"
ON storage.objects
FOR UPDATE
USING (
  bucket_id = 'purchase-invoices'
  AND auth.uid()::text = (storage.foldername(name))[1]
);

CREATE POLICY "Users can delete their own purchase invoice files"
ON storage.objects
FOR DELETE
USING (
  bucket_id = 'purchase-invoices'
  AND auth.uid()::text = (storage.foldername(name))[1]
);

-- Policy for stock-item-images bucket
INSERT INTO storage.buckets (id, name, public)
VALUES ('stock_item_images', 'stock_item_images', false)
ON CONFLICT (id) DO UPDATE SET public = false;

CREATE POLICY "Users can view their own stock item images"
ON storage.objects
FOR SELECT
USING (
  bucket_id = 'stock_item_images'
  AND auth.uid()::text = (storage.foldername(name))[1]
);

CREATE POLICY "Users can upload their own stock item images"
ON storage.objects
FOR INSERT
WITH CHECK (
  bucket_id = 'stock_item_images'
  AND auth.uid()::text = (storage.foldername(name))[1]
);

CREATE POLICY "Users can update their own stock item images"
ON storage.objects
FOR UPDATE
USING (
  bucket_id = 'stock_item_images'
  AND auth.uid()::text = (storage.foldername(name))[1]
);

CREATE POLICY "Users can delete their own stock item images"
ON storage.objects
FOR DELETE
USING (
  bucket_id = 'stock_item_images'
  AND auth.uid()::text = (storage.foldername(name))[1]
);

-- ============================================================
-- NOTES
-- ============================================================
-- After running this migration:
-- 1. All tables will have RLS enabled
-- 2. Users can only access their own data
-- 3. Storage buckets are set to private
-- 4. Storage policies enforce user-level access control
-- 5. Test thoroughly by attempting to access another user's data
</file>

<file path="migrations/remove_making_charges.sql">
-- Migration: Remove Making Charges columns
-- Description: Removes the making_charges column from invoice_items and total_making_charges from invoices table

-- Drop making_charges column from invoice_items table
ALTER TABLE invoice_items DROP COLUMN IF EXISTS making_charges;

-- Drop total_making_charges column from invoices table
ALTER TABLE invoices DROP COLUMN IF EXISTS total_making_charges;
</file>

<file path="public/placeholder-logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="215" height="48" fill="none"><path fill="#000" d="M57.588 9.6h6L73.828 38h-5.2l-2.36-6.88h-11.36L52.548 38h-5.2l10.24-28.4Zm7.16 17.16-4.16-12.16-4.16 12.16h8.32Zm23.694-2.24c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.486-7.72.12 3.4c.534-1.227 1.307-2.173 2.32-2.84 1.04-.693 2.267-1.04 3.68-1.04 1.494 0 2.76.387 3.8 1.16 1.067.747 1.827 1.813 2.28 3.2.507-1.44 1.294-2.52 2.36-3.24 1.094-.747 2.414-1.12 3.96-1.12 1.414 0 2.64.307 3.68.92s1.84 1.52 2.4 2.72c.56 1.2.84 2.667.84 4.4V38h-4.96V25.92c0-1.813-.293-3.187-.88-4.12-.56-.96-1.413-1.44-2.56-1.44-.906 0-1.68.213-2.32.64-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.84-.48 3.04V38h-4.56V25.92c0-1.2-.133-2.213-.4-3.04-.24-.827-.626-1.453-1.16-1.88-.506-.427-1.133-.64-1.88-.64-.906 0-1.68.227-2.32.68-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.827-.48 3V38h-4.96V16.8h4.48Zm26.723 10.6c0-2.24.427-4.187 1.28-5.84.854-1.68 2.067-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.84 0 3.494.413 4.96 1.24 1.467.827 2.64 2.08 3.52 3.76.88 1.653 1.347 3.693 1.4 6.12v1.32h-15.08c.107 1.813.614 3.227 1.52 4.24.907.987 2.134 1.48 3.68 1.48.987 0 1.88-.253 2.68-.76a4.803 4.803 0 0 0 1.84-2.2l5.08.36c-.64 2.027-1.84 3.64-3.6 4.84-1.733 1.173-3.733 1.76-6 1.76-2.08 0-3.906-.453-5.48-1.36-1.573-.907-2.786-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84Zm15.16-2.04c-.213-1.733-.76-3.013-1.64-3.84-.853-.827-1.893-1.24-3.12-1.24-1.44 0-2.6.453-3.48 1.36-.88.88-1.44 2.12-1.68 3.72h9.92ZM163.139 9.6V38h-5.04V9.6h5.04Zm8.322 7.2.24 5.88-.64-.36c.32-2.053 1.094-3.56 2.32-4.52 1.254-.987 2.787-1.48 4.6-1.48 2.32 0 4.107.733 5.36 2.2 1.254 1.44 1.88 3.387 1.88 5.84V38h-4.96V25.92c0-1.253-.12-2.28-.36-3.08-.24-.8-.64-1.413-1.2-1.84-.533-.427-1.253-.64-2.16-.64-1.44 0-2.573.48-3.4 1.44-.8.933-1.2 2.307-1.2 4.12V38h-4.96V16.8h4.48Zm30.003 7.72c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.443 8.16V38h-5.6v-5.32h5.6Z"/><path fill="#171717" fill-rule="evenodd" d="m7.839 40.783 16.03-28.054L20 6 0 40.783h7.839Zm8.214 0H40L27.99 19.894l-4.02 7.032 3.976 6.914H20.02l-3.967 6.943Z" clip-rule="evenodd"/></svg>
</file>

<file path="public/placeholder.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
</file>

<file path="styles/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="app/bookings/create/page.tsx">
"use client"

import type React from "react"

import { useState } from "react"
import Link from "next/link"
import { ArrowLeft, FileText, Home, Save, Plus, Trash2 } from "lucide-react"
import { useRouter } from "next/navigation"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"
import { Textarea } from "@/components/ui/textarea"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { toast } from "@/components/ui/use-toast"
import { DatePicker } from "@/app/bookings/create/date-picker"

export default function CreateBookingPage() {
  const router = useRouter()
  const [formData, setFormData] = useState({
    customerName: "",
    customerPhone: "",
    customerEmail: "",
    bookingDate: new Date(),
    expectedDeliveryDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 days from now
    itemDescription: "",
    estimatedAmount: 0,
    advanceAmount: 0,
    paymentMethod: "cash",
    notes: "",
  })

  const [items, setItems] = useState([{ id: 1, name: "", description: "", estimatedPrice: 0 }])

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]: name === "estimatedAmount" || name === "advanceAmount" ? Number.parseFloat(value) || 0 : value,
    }))
  }

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }))
  }

  const handleDateChange = (name: string, date: Date) => {
    setFormData((prev) => ({
      ...prev,
      [name]: date,
    }))
  }

  const handleItemChange = (id: number, field: string, value: string) => {
    setItems((prevItems) => {
      const updatedItems = prevItems.map((item) => {
        if (item.id === id) {
          return {
            ...item,
            [field]: field === "estimatedPrice" ? Number.parseFloat(value) || 0 : value,
          }
        }
        return item
      })

      // Update total estimated amount using the updated items
      if (field === "estimatedPrice") {
        const totalEstimated = updatedItems.reduce((sum, item) => sum + item.estimatedPrice, 0)

        setFormData((prev) => ({
          ...prev,
          estimatedAmount: totalEstimated,
        }))
      }

      return updatedItems
    })
  }

  const addItem = () => {
    const newId = Math.max(0, ...items.map((item) => item.id)) + 1
    setItems([...items, { id: newId, name: "", description: "", estimatedPrice: 0 }])
  }

  const removeItem = (id: number) => {
    if (items.length > 1) {
      const updatedItems = items.filter((item) => item.id !== id)
      setItems(updatedItems)

      // Update total estimated amount
      const totalEstimated = updatedItems.reduce((sum, item) => sum + item.estimatedPrice, 0)
      setFormData((prev) => ({
        ...prev,
        estimatedAmount: totalEstimated,
      }))
    }
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    // Validate form - check all items, not just the first one
    const hasEmptyItemNames = items.some(item => !item.name.trim())
    if (!formData.customerName || !formData.customerPhone || hasEmptyItemNames) {
      toast({
        title: "Missing required fields",
        description: "Please fill in all required fields including all item names.",
        variant: "destructive",
      })
      return
    }

    if (formData.advanceAmount <= 0) {
      toast({
        title: "Invalid advance amount",
        description: "Advance amount must be greater than zero.",
        variant: "destructive",
      })
      return
    }

    if (formData.advanceAmount > formData.estimatedAmount) {
      toast({
        title: "Invalid advance amount",
        description: "Advance amount cannot be greater than the estimated amount.",
        variant: "destructive",
      })
      return
    }

    // In a real app, you would submit the form data to your API here
    toast({
      title: "Booking created",
      description: "The booking has been created successfully.",
    })

    // Redirect to bookings page
    router.push("/bookings")
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <div className="flex items-center gap-2 font-heading font-semibold">
          <FileText className="h-6 w-6 text-primary" />
          <span className="text-xl">Sethiya Gold</span>
        </div>
        <nav className="ml-auto flex items-center gap-4">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm">
              <Home className="mr-2 h-4 w-4" />
              Dashboard
            </Button>
          </Link>
        </nav>
      </header>
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <div className="flex items-center">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm" className="gap-1">
              <ArrowLeft className="h-4 w-4" />
              Back to Dashboard
            </Button>
          </Link>
          <h1 className="ml-4 text-xl font-semibold md:text-2xl">Create New Booking</h1>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
            {/* Customer Information */}
            <Card>
              <CardHeader>
                <CardTitle>Customer Information</CardTitle>
                <CardDescription>Enter the customer's details for this booking</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="customerName">
                    Customer Name <span className="text-destructive">*</span>
                  </Label>
                  <Input
                    id="customerName"
                    name="customerName"
                    placeholder="Enter customer's name"
                    value={formData.customerName}
                    onChange={handleChange}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="customerPhone">
                    Phone Number <span className="text-destructive">*</span>
                  </Label>
                  <Input
                    id="customerPhone"
                    name="customerPhone"
                    placeholder="Enter customer's phone number"
                    value={formData.customerPhone}
                    onChange={handleChange}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="customerEmail">Email Address</Label>
                  <Input
                    id="customerEmail"
                    name="customerEmail"
                    type="email"
                    placeholder="Enter customer's email address"
                    value={formData.customerEmail}
                    onChange={handleChange}
                  />
                </div>
              </CardContent>
            </Card>

            {/* Booking Details */}
            <Card>
              <CardHeader>
                <CardTitle>Booking Details</CardTitle>
                <CardDescription>Enter the booking dates and details</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <div className="space-y-2">
                    <Label htmlFor="bookingDate">Booking Date</Label>
                    <DatePicker date={formData.bookingDate} setDate={(date) => handleDateChange("bookingDate", date)} />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="expectedDeliveryDate">Expected Delivery Date</Label>
                    <DatePicker
                      date={formData.expectedDeliveryDate}
                      setDate={(date) => handleDateChange("expectedDeliveryDate", date)}
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="itemDescription">General Description</Label>
                  <Textarea
                    id="itemDescription"
                    name="itemDescription"
                    placeholder="Enter a general description of the items being booked"
                    value={formData.itemDescription}
                    onChange={handleChange}
                    rows={3}
                  />
                </div>
              </CardContent>
            </Card>

            {/* Item Details */}
            <Card className="md:col-span-2">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>Item Details</CardTitle>
                    <CardDescription>Enter the details of the items being booked</CardDescription>
                  </div>
                  <Button type="button" onClick={addItem} variant="outline" size="sm">
                    <Plus className="mr-2 h-4 w-4" />
                    Add Item
                  </Button>
                </div>
              </CardHeader>
              <CardContent className="space-y-6">
                {items.map((item, index) => (
                  <div key={item.id} className="space-y-4 rounded-md border p-4">
                    <div className="flex items-center justify-between">
                      <h3 className="text-sm font-medium">Item {index + 1}</h3>
                      {items.length > 1 && (
                        <Button
                          type="button"
                          onClick={() => removeItem(item.id)}
                          variant="ghost"
                          size="sm"
                          className="h-8 w-8 p-0 text-destructive"
                        >
                          <Trash2 className="h-4 w-4" />
                          <span className="sr-only">Remove item</span>
                        </Button>
                      )}
                    </div>
                    <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                      <div className="space-y-2">
                        <Label htmlFor={`item-name-${item.id}`}>
                          Item Name <span className="text-destructive">*</span>
                        </Label>
                        <Input
                          id={`item-name-${item.id}`}
                          placeholder="Enter item name"
                          value={item.name}
                          onChange={(e) => handleItemChange(item.id, "name", e.target.value)}
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor={`item-price-${item.id}`}>
                          Estimated Price (₹) <span className="text-destructive">*</span>
                        </Label>
                        <Input
                          id={`item-price-${item.id}`}
                          type="number"
                          placeholder="Enter estimated price"
                          value={item.estimatedPrice || ""}
                          onChange={(e) => handleItemChange(item.id, "estimatedPrice", e.target.value)}
                          required
                        />
                      </div>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor={`item-description-${item.id}`}>Description</Label>
                      <Textarea
                        id={`item-description-${item.id}`}
                        placeholder="Enter item description"
                        value={item.description}
                        onChange={(e) => handleItemChange(item.id, "description", e.target.value)}
                        rows={2}
                      />
                    </div>
                  </div>
                ))}

                <div className="rounded-lg bg-muted p-4">
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span>Total Estimated Amount:</span>
                      <span>₹{formData.estimatedAmount.toFixed(2)}</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Payment Details */}
            <Card className="md:col-span-2">
              <CardHeader>
                <CardTitle>Payment Details</CardTitle>
                <CardDescription>Enter the advance payment details</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                  <div className="space-y-2">
                    <Label htmlFor="advanceAmount">
                      Advance Amount (₹) <span className="text-destructive">*</span>
                    </Label>
                    <Input
                      id="advanceAmount"
                      name="advanceAmount"
                      type="number"
                      placeholder="Enter advance amount"
                      value={formData.advanceAmount || ""}
                      onChange={handleChange}
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>Payment Method</Label>
                    <RadioGroup
                      defaultValue="cash"
                      value={formData.paymentMethod}
                      onValueChange={(value) => handleSelectChange("paymentMethod", value)}
                      className="flex space-x-4"
                    >
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="cash" id="cash" />
                        <Label htmlFor="cash">Cash</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="card" id="card" />
                        <Label htmlFor="card">Card</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="upi" id="upi" />
                        <Label htmlFor="upi">UPI</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="bank" id="bank" />
                        <Label htmlFor="bank">Bank Transfer</Label>
                      </div>
                    </RadioGroup>
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="notes">Additional Notes</Label>
                  <Textarea
                    id="notes"
                    name="notes"
                    placeholder="Enter any additional notes or special requirements"
                    value={formData.notes}
                    onChange={handleChange}
                    rows={3}
                  />
                </div>

                <div className="rounded-lg bg-muted p-4">
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span>Total Estimated Amount:</span>
                      <span>₹{formData.estimatedAmount.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Advance Amount:</span>
                      <span>₹{formData.advanceAmount.toFixed(2)}</span>
                    </div>
                    <Separator className="my-2" />
                    <div className="flex justify-between font-bold">
                      <span>Balance Due:</span>
                      <span>₹{(formData.estimatedAmount - formData.advanceAmount).toFixed(2)}</span>
                    </div>
                  </div>
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <Link href="/dashboard">
                  <Button variant="outline">Cancel</Button>
                </Link>
                <Button type="submit" className="bg-primary hover:bg-primary/90">
                  <Save className="mr-2 h-4 w-4" />
                  Create Booking
                </Button>
              </CardFooter>
            </Card>
          </div>
        </form>
      </main>
    </div>
  )
}
</file>

<file path="app/bookings/page.tsx">
import Link from "next/link"
import { Calendar, FileText, Home, Plus, Search } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"

// Mock data for bookings
const bookings = [
  {
    id: "BK-2023-001",
    customerName: "Priya Sharma",
    customerPhone: "+91 98765 43210",
    bookingDate: new Date("2023-05-15"),
    expectedDeliveryDate: new Date("2023-05-30"),
    itemDescription: "Gold Necklace with Diamond Pendant",
    estimatedAmount: 75000,
    advanceAmount: 25000,
    status: "pending",
  },
  {
    id: "BK-2023-002",
    customerName: "Amit Singh",
    customerPhone: "+91 87654 32109",
    bookingDate: new Date("2023-05-18"),
    expectedDeliveryDate: new Date("2023-06-05"),
    itemDescription: "Custom Wedding Ring Set",
    estimatedAmount: 45000,
    advanceAmount: 15000,
    status: "in-progress",
  },
  {
    id: "BK-2023-003",
    customerName: "Neha Gupta",
    customerPhone: "+91 76543 21098",
    bookingDate: new Date("2023-05-20"),
    expectedDeliveryDate: new Date("2023-06-10"),
    itemDescription: "Silver Dinner Set with Gold Plating",
    estimatedAmount: 35000,
    advanceAmount: 10000,
    status: "completed",
  },
  {
    id: "BK-2023-004",
    customerName: "Rajesh Mehta",
    customerPhone: "+91 65432 10987",
    bookingDate: new Date("2023-05-22"),
    expectedDeliveryDate: new Date("2023-06-15"),
    itemDescription: "Diamond Earrings with Matching Pendant",
    estimatedAmount: 65000,
    advanceAmount: 20000,
    status: "pending",
  },
]

import { Footer } from "@/app/components/footer/footer"

export default function BookingsPage() {
  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <div className="flex items-center gap-2 font-heading font-semibold">
          <FileText className="h-6 w-6 text-primary" />
          <span className="text-xl">Sethiya Gold</span>
        </div>
        <nav className="ml-auto flex items-center gap-4">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm">
              <Home className="mr-2 h-4 w-4" />
              Dashboard
            </Button>
          </Link>
        </nav>
      </header>
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold tracking-tight">Bookings</h1>
            <p className="text-muted-foreground">Manage customer bookings and advance payments</p>
          </div>
          <Link href="/bookings/create">
            <Button className="bg-primary hover:bg-primary/90">
              <Plus className="mr-2 h-4 w-4" />
              New Booking
            </Button>
          </Link>
        </div>

        <div className="flex items-center gap-2">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input placeholder="Search bookings..." className="pl-10" />
          </div>
        </div>

        <Tabs defaultValue="all" className="w-full">
          <TabsList>
            <TabsTrigger value="all">All Bookings</TabsTrigger>
            <TabsTrigger value="pending">Pending</TabsTrigger>
            <TabsTrigger value="in-progress">In Progress</TabsTrigger>
            <TabsTrigger value="completed">Completed</TabsTrigger>
          </TabsList>
          <TabsContent value="all" className="space-y-4">
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {bookings.map((booking) => (
                <BookingCard key={booking.id} booking={booking} />
              ))}
            </div>
          </TabsContent>
          <TabsContent value="pending" className="space-y-4">
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {bookings
                .filter((booking) => booking.status === "pending")
                .map((booking) => (
                  <BookingCard key={booking.id} booking={booking} />
                ))}
            </div>
          </TabsContent>
          <TabsContent value="in-progress" className="space-y-4">
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {bookings
                .filter((booking) => booking.status === "in-progress")
                .map((booking) => (
                  <BookingCard key={booking.id} booking={booking} />
                ))}
            </div>
          </TabsContent>
          <TabsContent value="completed" className="space-y-4">
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {bookings
                .filter((booking) => booking.status === "completed")
                .map((booking) => (
                  <BookingCard key={booking.id} booking={booking} />
                ))}
            </div>
          </TabsContent>
        </Tabs>
      </main>
      <Footer />
    </div>
  )
}

interface BookingCardProps {
  booking: {
    id: string
    customerName: string
    customerPhone: string
    bookingDate: Date
    expectedDeliveryDate: Date
    itemDescription: string
    estimatedAmount: number
    advanceAmount: number
    status: string
  }
}

function BookingCard({ booking }: BookingCardProps) {
  const getStatusBadge = (status: string) => {
    switch (status) {
      case "pending":
        return (
          <Badge variant="outline" className="bg-yellow-50 text-yellow-700">
            Pending
          </Badge>
        )
      case "in-progress":
        return (
          <Badge variant="outline" className="bg-blue-50 text-blue-700">
            In Progress
          </Badge>
        )
      case "completed":
        return (
          <Badge variant="outline" className="bg-green-50 text-green-700">
            Completed
          </Badge>
        )
      default:
        return <Badge variant="outline">Unknown</Badge>
    }
  }

  return (
    <Card className="overflow-hidden transition-all hover:border-primary/30 hover:shadow-md">
      <CardHeader className="pb-2">
        <div className="flex items-start justify-between">
          <div>
            <CardTitle className="text-base">{booking.id}</CardTitle>
            <CardDescription>{booking.customerName}</CardDescription>
          </div>
          {getStatusBadge(booking.status)}
        </div>
      </CardHeader>
      <CardContent className="pb-2">
        <div className="space-y-2 text-sm">
          <div className="flex items-center gap-2">
            <Calendar className="h-4 w-4 text-primary" />
            <span>Booked: {booking.bookingDate.toLocaleDateString()}</span>
          </div>
          <div className="flex items-center gap-2">
            <Calendar className="h-4 w-4 text-primary" />
            <span>Expected: {booking.expectedDeliveryDate.toLocaleDateString()}</span>
          </div>
          <div className="mt-2 line-clamp-2 text-muted-foreground">{booking.itemDescription}</div>
          <div className="mt-2 grid grid-cols-2 gap-2 rounded-md bg-secondary p-2">
            <div>
              <p className="text-xs text-muted-foreground">Estimated</p>
              <p className="font-medium">₹{booking.estimatedAmount.toLocaleString()}</p>
            </div>
            <div>
              <p className="text-xs text-muted-foreground">Advance</p>
              <p className="font-medium">₹{booking.advanceAmount.toLocaleString()}</p>
            </div>
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex justify-between pt-2">
        <Link href={`/bookings/${booking.id}`}>
          <Button variant="outline" size="sm">
            View Details
          </Button>
        </Link>
        {booking.status !== "completed" && (
          <Link href={`/bookings/${booking.id}/edit`}>
            <Button variant="outline" size="sm">
              Update Status
            </Button>
          </Link>
        )}
      </CardFooter>
    </Card>
  )
}
</file>

<file path="app/components/recent-invoices.tsx">
import { Avatar, AvatarFallback } from "@/components/ui/avatar"

export function RecentInvoices() {
  const invoices = [
    {
      id: "1",
      customer: "Rahul Sharma",
      amount: "₹12,450",
      date: "15/05/2023",
      status: "Paid",
      initials: "RS",
    },
    {
      id: "2",
      customer: "Priya Patel",
      amount: "₹8,790",
      date: "12/05/2023",
      status: "Pending",
      initials: "PP",
    },
    {
      id: "3",
      customer: "Amit Singh",
      amount: "₹23,900",
      date: "10/05/2023",
      status: "Paid",
      initials: "AS",
    },
    {
      id: "4",
      customer: "Neha Gupta",
      amount: "₹5,670",
      date: "05/05/2023",
      status: "Paid",
      initials: "NG",
    },
    {
      id: "5",
      customer: "Vikram Mehta",
      amount: "₹18,340",
      date: "01/05/2023",
      status: "Pending",
      initials: "VM",
    },
  ]

  return (
    <div className="space-y-8">
      {invoices.map((invoice) => (
        <div className="flex items-center" key={invoice.id}>
          <Avatar className="h-9 w-9 border border-amber-200">
            <AvatarFallback className="bg-amber-50 text-amber-900">{invoice.initials}</AvatarFallback>
          </Avatar>
          <div className="ml-4 space-y-1">
            <p className="text-sm font-medium leading-none">{invoice.customer}</p>
            <p className="text-sm text-muted-foreground">{invoice.date}</p>
          </div>
          <div className="ml-auto font-medium">
            <span className={invoice.status === "Paid" ? "text-green-600" : "text-amber-600"}>{invoice.amount}</span>
          </div>
        </div>
      ))}
    </div>
  )
}
</file>

<file path="app/create-invoice/pdf-download-link-wrapper.tsx">
"use client"

import { useState, useEffect, useRef } from "react"
import { PDFDownloadLink } from "@react-pdf/renderer"
import { Save } from "lucide-react"

import { Button } from "@/components/ui/button"
import { InvoicePDF } from "@/app/create-invoice/invoice-pdf"
import { toast } from "@/components/ui/use-toast"
import type { InvoiceData } from "@/app/create-invoice/invoice-preview"

interface PDFDownloadLinkWrapperProps {
  invoiceData: InvoiceData
  onStartGeneration: () => void
  onFinishGeneration: () => void
}

// Separate component to handle the render function properly
const PDFButton = ({
  loading,
  error,
  onStartGeneration,
  onFinishGeneration,
}: {
  loading: boolean
  error: Error | null
  onStartGeneration: () => void
  onFinishGeneration: () => void
}) => {
  const prevLoadingRef = useRef(false)

  useEffect(() => {
    if (loading && !prevLoadingRef.current) {
      onStartGeneration()
    } else if (!loading && prevLoadingRef.current) {
      onFinishGeneration()
    }
    prevLoadingRef.current = loading
  }, [loading, onStartGeneration, onFinishGeneration])

  useEffect(() => {
    if (error) {
      console.error("Error generating PDF:", error)
      toast({
        title: "Error generating PDF",
        description: error.message || "Please try again.",
        variant: "destructive",
      })
    }
  }, [error])

  return (
    <Button variant="outline" disabled={loading}>
      <Save className="mr-2 h-4 w-4" />
      {loading ? "Generating PDF..." : "Download PDF"}
    </Button>
  )
}

export function PDFDownloadLinkWrapper({
  invoiceData,
  onStartGeneration,
  onFinishGeneration,
}: PDFDownloadLinkWrapperProps) {
  const [isClient, setIsClient] = useState(false)
  useEffect(() => {
    setIsClient(true)
  }, [])

  if (!isClient) {
    return (
      <Button variant="outline" disabled>
        <Save className="mr-2 h-4 w-4" />
        Loading PDF...
      </Button>
    )
  }

  // Validate invoice data before rendering PDF
  if (!invoiceData || !invoiceData.items || invoiceData.items.length === 0) {
    console.error('Invalid invoice data for PDF generation:', invoiceData);
    return (
      <Button variant="outline" disabled>
        <Save className="mr-2 h-4 w-4" />
        Invalid Data
      </Button>
    )
  }

  return (
    <PDFDownloadLink
      document={<InvoicePDF invoice={invoiceData} />}
      fileName={`Sethiya-Gold-Invoice-${invoiceData.invoiceNumber}.pdf`}
      className="inline-block"
    >
      {({ blob, url, loading, error }) => (
        <PDFButton
          loading={loading}
          error={error}
          onStartGeneration={onStartGeneration}
          onFinishGeneration={onFinishGeneration}
        />
      )}
    </PDFDownloadLink>
  )
}
</file>

<file path="app/customers/[id]/edit/page.tsx">
"use client"

import type React from "react"

import { useState, useEffect, useRef } from "react"
import Link from "next/link"
import { ArrowLeft, FileText, Home, Upload, X } from "lucide-react"
import { useRouter } from "next/navigation"
import { v4 as uuidv4 } from 'uuid'

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { toast } from "@/components/ui/use-toast"
import { useAuth } from "@/components/auth-provider"
import supabase from "@/lib/supabase"

// Mock data for a single customer
const customerData = {
  id: "1",
  name: "Priya Sharma",
  phone: "+91 98765 43210",
  email: "priya.sharma@example.com",
  address: "123 Park Street, Mumbai, Maharashtra, 400001",
  identityType: "PAN",
  identityNumber: "ABCPS1234D",
  identityDocument: "/placeholder.svg?height=300&width=400",
  referredBy: "Rajesh Mehta",
  referralNotes: "Regular customer at Rajesh's shop, interested in gold jewelry",
  notes: "Prefers gold jewelry with traditional designs. Birthday on 15th August.",
}

export default function EditCustomerPage({ params }: { params: { id: string } }) {
  const { user } = useAuth();
  const router = useRouter()
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    email: "",
    address: "",
    identityType: "pan_card" as "pan_card" | "aadhaar_card" | "others" | "none",
    identityReference: "",
    referredBy: "",
    referralNotes: "",
    notes: "",
  })
  const [documentFile, setDocumentFile] = useState<File | null>(null)
  const [documentPreview, setDocumentPreview] = useState<string | null>(null)
  const [existingDocPath, setExistingDocPath] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)

  // Fetch customer data
  useEffect(() => {
    const fetchCustomer = async () => {
      if (!user) return;

      try {
        const { data, error } = await supabase
          .from('customers')
          .select('*')
          .eq('id', params.id)
          .eq('user_id', user.id)
          .single();

        if (error) {
          throw error;
        }

        if (!data) {
          toast({
            title: "Customer not found",
            description: "The requested customer could not be found.",
            variant: "destructive",
          });
          router.push('/customers');
          return;
        }

        setFormData({
          name: data.name || "",
          phone: data.phone || "",
          email: data.email || "",
          address: data.address || "",
          identityType: data.identity_type,
          identityReference: data.identity_reference || "",
          referredBy: data.referred_by || "",
          referralNotes: data.referral_notes || "",
          notes: data.notes || "",
        });

        if (data.identity_doc) {
          setDocumentPreview(data.identity_doc);
          setExistingDocPath(data.identity_doc);
        }

        setIsLoading(false);
      } catch (error: any) {
        toast({
          title: "Error loading customer",
          description: error.message || "Could not load customer data.",
          variant: "destructive",
        });
        router.push('/customers');
      }
    };

    fetchCustomer();
  }, [params.id, user, router]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }))
  }

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }))
    
    // Reset file input when identity type is changed to "none"
    if (name === "identityType" && value === "none") {
      removeFile()
    }
  }

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0]
      
      // Validate file size (10MB max)
      if (file.size > 10 * 1024 * 1024) {
        toast({
          title: "File too large",
          description: "Please upload a file smaller than 10MB.",
          variant: "destructive",
        })
        return
      }
      
      // Validate file type
      const validTypes = ['image/jpeg', 'image/png', 'application/pdf']
      if (!validTypes.includes(file.type)) {
        toast({
          title: "Invalid file type",
          description: "Please upload a PNG, JPG, or PDF file.",
          variant: "destructive",
        })
        return
      }
      
      setDocumentFile(file)

      // Create preview URL
      const reader = new FileReader()
      reader.onload = () => {
        setDocumentPreview(reader.result as string)
      }
      reader.readAsDataURL(file)
    }
  }

  const removeFile = () => {
    setDocumentFile(null)
    setDocumentPreview(null)
    setExistingDocPath(null)
    if (fileInputRef.current) {
      fileInputRef.current.value = ""
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)

    try {
      if (!user) {
        throw new Error("You must be logged in to update a customer")
      }

      // Validate form
      if (!formData.name) {
        throw new Error("Customer name is required")
      }

      // Validate identity reference when "others" is selected
      if (formData.identityType === "others" && !formData.identityReference) {
        throw new Error("Identity reference is required when 'Others' is selected")
      }

      // Helper function to extract storage path from public URL
      const extractStoragePathFromUrl = (publicUrl: string, bucketName: string): string | null => {
        try {
          const url = new URL(publicUrl)
          const pathParts = url.pathname.split('/')
          const bucketIndex = pathParts.indexOf(bucketName)
          
          if (bucketIndex !== -1 && bucketIndex < pathParts.length - 1) {
            // Get everything after the bucket name
            return pathParts.slice(bucketIndex + 1).join('/')
          }
          return null
        } catch (error) {
          console.error('Error parsing storage URL:', error)
          return null
        }
      }

      // Upload file to Supabase Storage if a new file is provided
      let identityDocPath = existingDocPath
      if (documentFile && formData.identityType !== "none") {
        // Delete existing file if there is one
        if (existingDocPath) {
          const existingFilePath = extractStoragePathFromUrl(existingDocPath, 'identity_docs')
          
          if (existingFilePath) {
            await supabase.storage
              .from('identity_docs')
              .remove([existingFilePath]);
          }
        }
        
        // Upload new file using secure API
        const fileExt = documentFile.name.split('.').pop()
        const fileName = `${uuidv4()}.${fileExt}`
        const filePath = `${user.id}/${fileName}`
        
        const { data: { session } } = await supabase.auth.getSession()
        if (!session) {
          throw new Error('No active session')
        }

        const formDataUpload = new FormData()
        formDataUpload.append('file', documentFile)
        formDataUpload.append('bucket', 'identity_docs')
        formDataUpload.append('path', filePath)

        const response = await fetch('/api/storage/upload', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${session.access_token}`,
          },
          body: formDataUpload,
        })

        if (!response.ok) {
          const error = await response.json()
          throw new Error(error.error || 'Upload failed')
        }

        const uploadResult = await response.json()
        // Store the path in a URL format for backward compatibility
        identityDocPath = `identity_docs/${uploadResult.path}`
      }
      
      // If identity type is "none", set document path to null
      if (formData.identityType === "none") {
        identityDocPath = null;
        
        // Delete existing file if there is one
        if (existingDocPath) {
          const existingFilePath = extractStoragePathFromUrl(existingDocPath, 'identity_docs')
          
          if (existingFilePath) {
            await supabase.storage
              .from('identity_docs')
              .remove([existingFilePath]);
          }
        }
      }

      // Update customer data in Supabase
      const { data, error } = await supabase
        .from('customers')
        .update({
          name: formData.name,
          email: formData.email || null,
          phone: formData.phone || null,
          address: formData.address || null,
          notes: formData.notes || null,
          identity_type: formData.identityType,
          identity_reference: formData.identityReference || null,
          identity_doc: identityDocPath,
          referred_by: formData.referredBy || null,
          referral_notes: formData.referralNotes || null
        })
        .eq('id', params.id)
        .eq('user_id', user.id)
        .select()

      if (error) {
        throw new Error(`Error updating customer: ${error.message}`)
      }

      toast({
        title: "Customer updated",
        description: "The customer information has been updated successfully.",
      })

      // Redirect to customer detail page
      router.push(`/customers/${params.id}`)
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to update customer. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  if (isLoading) {
    return (
      <div className="flex min-h-screen w-full flex-col">
        <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
          <div className="flex items-center gap-2 font-heading font-semibold">
            <FileText className="h-6 w-6 text-primary" />
            <span className="text-xl">Sethiya Gold</span>
          </div>
        </header>
        <main className="flex flex-1 items-center justify-center">
          <div className="text-center">
            <div className="mb-4 h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent"></div>
            <p>Loading customer information...</p>
          </div>
        </main>
      </div>
    )
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <Link href="/" className="flex items-center gap-2 font-semibold">
          <FileText className="h-6 w-6 text-primary" />
          <span className="text-xl">Ratna Invoicing</span>
        </Link>
        <nav className="ml-auto flex items-center gap-4">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm">
              <Home className="mr-2 h-4 w-4" />
              Dashboard
            </Button>
          </Link>
        </nav>
      </header>
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <div className="flex items-center">
          <Link href={`/customers/${params.id}`}>
            <Button variant="ghost" size="sm" className="gap-1">
              <ArrowLeft className="h-4 w-4" />
              Back to Customer
            </Button>
          </Link>
          <h1 className="ml-4 text-xl font-semibold md:text-2xl">Edit Customer</h1>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
            {/* Basic Information */}
            <Card>
              <CardHeader>
                <CardTitle>Basic Information</CardTitle>
                <CardDescription>Update the customer's personal details</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="name">
                    Full Name <span className="text-destructive">*</span>
                  </Label>
                  <Input
                    id="name"
                    name="name"
                    placeholder="Enter customer's full name"
                    value={formData.name}
                    onChange={handleChange}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="phone">
                    Phone Number
                  </Label>
                  <Input
                    id="phone"
                    name="phone"
                    placeholder="Enter phone number"
                    value={formData.phone}
                    onChange={handleChange}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="email">
                    Email Address
                  </Label>
                  <Input
                    id="email"
                    name="email"
                    type="email"
                    placeholder="Enter email address"
                    value={formData.email}
                    onChange={handleChange}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="address">Address</Label>
                  <Textarea
                    id="address"
                    name="address"
                    placeholder="Enter full address"
                    value={formData.address}
                    onChange={handleChange}
                    rows={3}
                  />
                </div>
              </CardContent>
            </Card>

            {/* Identity Information */}
            <Card>
              <CardHeader>
                <CardTitle>Identity Information</CardTitle>
                <CardDescription>Update the customer's identity details</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label>Identity Type</Label>
                  <RadioGroup
                    value={formData.identityType}
                    onValueChange={(value) => handleSelectChange("identityType", value as "pan_card" | "aadhaar_card" | "others" | "none")}
                    className="flex flex-wrap gap-4"
                  >
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="pan_card" id="pan_card" />
                      <Label htmlFor="pan_card">PAN Card</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="aadhaar_card" id="aadhaar_card" />
                      <Label htmlFor="aadhaar_card">Aadhaar Card</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="others" id="others" />
                      <Label htmlFor="others">Others</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="none" id="none" />
                      <Label htmlFor="none">None</Label>
                    </div>
                  </RadioGroup>
                </div>

                {formData.identityType !== "none" && (
                  <>
                    {formData.identityType === "others" && (
                      <div className="space-y-2">
                        <Label htmlFor="identityReference">
                          Identity Reference Number {formData.identityType === "others" && <span className="text-destructive">*</span>}
                        </Label>
                        <Input
                          id="identityReference"
                          name="identityReference"
                          placeholder="Enter reference number"
                          value={formData.identityReference}
                          onChange={handleChange}
                          required={formData.identityType === "others"}
                        />
                      </div>
                    )}

                    <div className="space-y-2">
                      <Label>Identity Document {formData.identityType !== "none" && <span className="text-destructive">*</span>}</Label>
                      <div className="mt-1 flex items-center justify-center rounded-md border-2 border-dashed border-muted p-6">
                        {documentPreview ? (
                          <div className="relative">
                            {documentFile?.type === 'application/pdf' || (documentPreview.toLowerCase().endsWith('.pdf')) ? (
                              <div className="flex h-40 w-60 items-center justify-center rounded-md bg-muted">
                                <FileText className="h-16 w-16 text-muted-foreground" />
                                <p className="mt-2 text-sm text-muted-foreground">
                                  {documentFile ? documentFile.name : 'PDF Document'}
                                </p>
                              </div>
                            ) : (
                              <img
                                src={documentPreview}
                                alt="Document Preview"
                                className="h-40 rounded-md object-cover"
                              />
                            )}
                            <Button
                              type="button"
                              variant="destructive"
                              size="icon"
                              className="absolute -right-2 -top-2 h-6 w-6 rounded-full"
                              onClick={removeFile}
                            >
                              <X className="h-4 w-4" />
                            </Button>
                          </div>
                        ) : (
                          <div className="text-center">
                            <Upload className="mx-auto h-12 w-12 text-muted-foreground" />
                            <div className="mt-2 flex text-sm text-muted-foreground">
                              <label
                                htmlFor="file-upload"
                                className="relative cursor-pointer rounded-md font-medium text-primary hover:text-primary/80 focus-within:outline-none"
                              >
                                <span>Upload a file</span>
                                <input
                                  id="file-upload"
                                  name="file-upload"
                                  type="file"
                                  className="sr-only"
                                  accept="image/png,image/jpeg,application/pdf"
                                  onChange={handleFileChange}
                                  ref={fileInputRef}
                                  required={formData.identityType !== "none" && !documentPreview}
                                />
                              </label>
                              <p className="pl-1">or drag and drop</p>
                            </div>
                            <p className="text-xs text-muted-foreground">PNG, JPG, PDF up to 10MB</p>
                          </div>
                        )}
                      </div>
                    </div>
                  </>
                )}
              </CardContent>
            </Card>

            {/* Referral Information */}
            <Card>
              <CardHeader>
                <CardTitle>Referral Information</CardTitle>
                <CardDescription>Update referral details if applicable</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="referredBy">Referred By</Label>
                  <Select
                    value={formData.referredBy}
                    onValueChange={(value) => handleSelectChange("referredBy", value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select a referrer (if any)" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="none">None</SelectItem>
                      <SelectItem value="Rajesh Mehta">Rajesh Mehta</SelectItem>
                      <SelectItem value="Amit Singh">Amit Singh</SelectItem>
                      <SelectItem value="Neha Gupta">Neha Gupta</SelectItem>
                      <SelectItem value="Ananya Patel">Ananya Patel</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="referralNotes">Referral Notes</Label>
                  <Textarea
                    id="referralNotes"
                    name="referralNotes"
                    placeholder="Enter any notes about the referral"
                    value={formData.referralNotes}
                    onChange={handleChange}
                    rows={3}
                  />
                </div>
              </CardContent>
            </Card>

            {/* Additional Information */}
            <Card>
              <CardHeader>
                <CardTitle>Additional Information</CardTitle>
                <CardDescription>Update any additional notes or preferences</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="notes">Notes</Label>
                  <Textarea
                    id="notes"
                    name="notes"
                    placeholder="Enter any additional notes about the customer"
                    value={formData.notes}
                    onChange={handleChange}
                    rows={5}
                  />
                </div>
              </CardContent>
            </Card>
          </div>

          <div className="mt-6 flex justify-end gap-4">
            <Link href={`/customers/${params.id}`}>
              <Button variant="outline">Cancel</Button>
            </Link>
            <Button 
              type="submit" 
              className="bg-primary hover:bg-primary/90"
              disabled={isSubmitting}
            >
              {isSubmitting ? "Saving..." : "Save Changes"}
            </Button>
          </div>
        </form>
      </main>
    </div>
  )
}
</file>

<file path="app/customers/[id]/page.tsx">
"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import {
  ArrowLeft,
  Edit,
  FileText,
  Home,
  Phone,
  Mail,
  MapPin,
  CreditCard,
  User,
  Calendar,
  Download,
  Trash2,
} from "lucide-react"
import { useRouter } from "next/navigation"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { 
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import { toast } from "@/components/ui/use-toast"
import { useAuth } from "@/components/auth-provider"
import supabase from "@/lib/supabase"

// Example placeholder transactions data
const exampleTransactions = [
  {
    id: "INV-2023-001",
    date: new Date("2023-04-20"),
    amount: 45600,
    type: "Purchase",
    description: "Gold Necklace Set",
    items: [
      { name: "Gold Necklace", weight: "15g", price: 35000 },
      { name: "Matching Earrings", weight: "5g", price: 10600 },
    ],
    paymentMethod: "Card",
  },
  {
    id: "INV-2023-012",
    date: new Date("2023-02-15"),
    amount: 28500,
    type: "Purchase",
    description: "Diamond Ring",
    items: [{ name: "Diamond Ring", weight: "3g", price: 28500 }],
    paymentMethod: "Cash",
  },
  {
    id: "INV-2023-025",
    date: new Date("2023-01-20"),
    amount: 12800,
    type: "Purchase",
    description: "Silver Anklets",
    items: [{ name: "Silver Anklets", weight: "25g", price: 12800 }],
    paymentMethod: "UPI",
  }
]

interface Customer {
  id: string
  created_at: string
  name: string
  email: string | null
  phone: string | null
  address: string | null
  notes: string | null
  user_id: string
  identity_type: 'pan_card' | 'aadhaar_card' | 'others' | 'none'
  identity_reference: string | null
  identity_doc: string | null
  referred_by?: string | null
  referral_notes?: string | null
}

export default function CustomerDetailPage({ params }: { params: { id: string } }) {
  const { user } = useAuth();
  const router = useRouter();
  const [customer, setCustomer] = useState<Customer | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isDeleting, setIsDeleting] = useState(false);

  // Get initials for avatar
  const getInitials = (name: string) => {
    return name
      .split(" ")
      .map((n) => n[0])
      .join("")
      .toUpperCase()
  }

  // Fetch customer data
  useEffect(() => {
    const fetchCustomer = async () => {
      if (!user) return;

      try {
        const { data, error } = await supabase
          .from('customers')
          .select('*')
          .eq('id', params.id)
          .eq('user_id', user.id)
          .single();

        if (error) {
          throw error;
        }

        if (!data) {
          toast({
            title: "Customer not found",
            description: "The requested customer could not be found.",
            variant: "destructive",
          });
          router.push('/customers');
          return;
        }

        setCustomer(data);
        setIsLoading(false);
      } catch (error: any) {
        toast({
          title: "Error loading customer",
          description: error.message || "Could not load customer data.",
          variant: "destructive",
        });
        router.push('/customers');
      }
    };

    fetchCustomer();
  }, [params.id, user, router]);

  const handleDeleteCustomer = async () => {
    if (!user || !customer) return;
    
    setIsDeleting(true);
    
    try {
      // Delete identity document from storage if it exists
      if (customer.identity_doc) {
        const urlParts = customer.identity_doc.split('/');
        const filePathParts = urlParts.slice(urlParts.indexOf('identity_docs') + 1);
        const existingFilePath = filePathParts.join('/');
        
        if (existingFilePath) {
          await supabase.storage
            .from('identity_docs')
            .remove([existingFilePath]);
        }
      }
      
      // Delete customer from database
      const { error } = await supabase
        .from('customers')
        .delete()
        .eq('id', customer.id)
        .eq('user_id', user.id);
        
      if (error) {
        throw error;
      }
      
      toast({
        title: "Customer deleted",
        description: "The customer has been successfully deleted.",
      });
      
      router.push('/customers');
    } catch (error: any) {
      toast({
        title: "Error deleting customer",
        description: error.message || "Failed to delete customer. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsDeleting(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex min-h-screen w-full flex-col">
        <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
          <div className="flex items-center gap-2 font-heading font-semibold">
            <FileText className="h-6 w-6 text-primary" />
            <span className="text-xl">Sethiya Gold</span>
          </div>
        </header>
        <main className="flex flex-1 items-center justify-center">
          <div className="text-center">
            <div className="mb-4 h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent"></div>
            <p>Loading customer information...</p>
          </div>
        </main>
      </div>
    );
  }
  
  if (!customer) {
    return null;
  }

  const createdAt = new Date(customer.created_at);
  
  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <Link href="/" className="flex items-center gap-2 font-semibold">
          <FileText className="h-6 w-6 text-primary" />
          <span className="text-xl">Ratna Invoicing</span>
        </Link>
        <nav className="ml-auto flex items-center gap-4">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm">
              <Home className="mr-2 h-4 w-4" />
              Dashboard
            </Button>
          </Link>
        </nav>
      </header>
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <div className="flex items-center">
          <Link href="/customers">
            <Button variant="ghost" size="sm" className="gap-1">
              <ArrowLeft className="h-4 w-4" />
              Back to Customers
            </Button>
          </Link>
          <h1 className="ml-4 text-xl font-semibold md:text-2xl">Customer Details</h1>
        </div>

        <div className="grid grid-cols-1 gap-6 md:grid-cols-3">
          {/* Customer Profile Card */}
          <Card className="md:col-span-1">
            <CardHeader className="flex flex-row items-center gap-4 pb-2">
              <Avatar className="h-16 w-16 border border-muted">
                <AvatarFallback className="bg-secondary text-secondary-foreground text-xl">
                  {getInitials(customer.name)}
                </AvatarFallback>
              </Avatar>
              <div>
                <CardTitle>{customer.name}</CardTitle>
                <CardDescription>
                  Customer since {createdAt.toLocaleDateString("en-IN", { dateStyle: "medium" })}
                </CardDescription>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="space-y-2">
                  {customer.phone && (
                    <div className="flex items-center gap-2">
                      <Phone className="h-4 w-4 text-primary" />
                      <span>{customer.phone}</span>
                    </div>
                  )}
                  {customer.email && (
                    <div className="flex items-center gap-2">
                      <Mail className="h-4 w-4 text-primary" />
                      <span>{customer.email}</span>
                    </div>
                  )}
                  {customer.address && (
                    <div className="flex items-start gap-2">
                      <MapPin className="h-4 w-4 text-primary" />
                      <span>{customer.address}</span>
                    </div>
                  )}
                </div>

                <Separator />

                <div className="space-y-2">
                  <h3 className="text-sm font-medium">Identity Information</h3>
                  <div className="flex items-center gap-2">
                    <CreditCard className="h-4 w-4 text-primary" />
                    <span>
                      {customer.identity_type === 'pan_card' ? 'PAN Card' : 
                       customer.identity_type === 'aadhaar_card' ? 'Aadhaar Card' : 
                       customer.identity_type === 'others' ? 'Other ID' : 'None'}
                      {customer.identity_reference && `: ${customer.identity_reference}`}
                    </span>
                  </div>
                  {customer.identity_doc && (
                    <div className="mt-2">
                      <div className="relative aspect-[4/3] w-full overflow-hidden rounded-md border">
                        {customer.identity_doc.toLowerCase().endsWith('.pdf') ? (
                          <div className="flex h-full w-full items-center justify-center bg-muted">
                            <FileText className="h-16 w-16 text-muted-foreground" />
                            <p className="mt-2 text-sm text-muted-foreground">PDF Document</p>
                          </div>
                        ) : (
                          <img
                            src={customer.identity_doc}
                            alt="Identity Document"
                            className="h-full w-full object-cover"
                          />
                        )}
                      </div>
                      <a href={customer.identity_doc} target="_blank" rel="noopener noreferrer">
                        <Button variant="outline" size="sm" className="mt-2 w-full">
                          <Download className="mr-2 h-3 w-3" />
                          Download Document
                        </Button>
                      </a>
                    </div>
                  )}
                </div>

                {customer.referred_by && (
                  <>
                    <Separator />
                    <div className="space-y-2">
                      <h3 className="text-sm font-medium">Referral Information</h3>
                      <div className="flex items-center gap-2">
                        <User className="h-4 w-4 text-primary" />
                        <span>Referred by: {customer.referred_by}</span>
                      </div>
                      {customer.referral_notes && (
                        <p className="text-sm text-muted-foreground">{customer.referral_notes}</p>
                      )}
                    </div>
                  </>
                )}

                <Separator />

                {customer.notes && (
                  <div className="space-y-2">
                    <h3 className="text-sm font-medium">Notes</h3>
                    <p className="text-sm text-muted-foreground">{customer.notes}</p>
                  </div>
                )}

                <div className="flex flex-col gap-2 pt-4">
                  <Link href={`/customers/${customer.id}/edit`}>
                    <Button className="w-full bg-primary hover:bg-primary/90">
                      <Edit className="mr-2 h-4 w-4" />
                      Edit Customer
                    </Button>
                  </Link>
                  
                  <AlertDialog>
                    <AlertDialogTrigger asChild>
                      <Button variant="destructive" className="w-full">
                        <Trash2 className="mr-2 h-4 w-4" />
                        Delete Customer
                      </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent>
                      <AlertDialogHeader>
                        <AlertDialogTitle>Delete Customer</AlertDialogTitle>
                        <AlertDialogDescription>
                          Are you sure you want to delete this customer? This action cannot be undone and all associated data will be permanently removed.
                        </AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel>Cancel</AlertDialogCancel>
                        <AlertDialogAction 
                          onClick={handleDeleteCustomer}
                          disabled={isDeleting}
                          className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                        >
                          {isDeleting ? "Deleting..." : "Delete"}
                        </AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Customer Transactions and Details */}
          <div className="space-y-6 md:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle>Customer Overview</CardTitle>
                <CardDescription>Transaction history and customer activity</CardDescription>
              </CardHeader>
              <CardContent>
                <Tabs defaultValue="transactions">
                  <TabsList className="mb-4">
                    <TabsTrigger value="transactions">Transactions</TabsTrigger>
                    <TabsTrigger value="activity">Activity</TabsTrigger>
                    <TabsTrigger value="analytics">Analytics</TabsTrigger>
                  </TabsList>

                  <TabsContent value="transactions" className="space-y-4">
                    <div className="rounded-md border">
                      <table className="w-full">
                        <thead>
                          <tr className="border-b bg-muted/50">
                            <th className="py-3 pl-4 pr-3 text-left text-sm font-medium">Invoice</th>
                            <th className="px-3 py-3 text-left text-sm font-medium">Date</th>
                            <th className="px-3 py-3 text-left text-sm font-medium">Description</th>
                            <th className="px-3 py-3 text-right text-sm font-medium">Amount</th>
                            <th className="px-3 py-3 text-center text-sm font-medium">Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          {exampleTransactions.length > 0 ? (
                            exampleTransactions.map((transaction) => (
                              <tr key={transaction.id} className="border-b">
                                <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium">{transaction.id}</td>
                                <td className="whitespace-nowrap px-3 py-4 text-sm">
                                  {transaction.date.toLocaleDateString("en-IN", { dateStyle: "medium" })}
                                </td>
                                <td className="px-3 py-4 text-sm">{transaction.description}</td>
                                <td className="whitespace-nowrap px-3 py-4 text-right text-sm font-medium">
                                  ₹{transaction.amount.toLocaleString("en-IN")}
                                </td>
                                <td className="whitespace-nowrap px-3 py-4 text-center text-sm">
                                  <Link href={`/invoices/${transaction.id}`}>
                                    <Button variant="outline" size="sm">
                                      View
                                    </Button>
                                  </Link>
                                </td>
                              </tr>
                            ))
                          ) : (
                            <tr>
                              <td colSpan={5} className="py-6 text-center text-sm text-muted-foreground">
                                No transactions found for this customer.
                              </td>
                            </tr>
                          )}
                        </tbody>
                      </table>
                    </div>

                    <div className="flex justify-between">
                      <div>
                        <p className="text-sm text-muted-foreground">
                          Showing {exampleTransactions.length} transactions
                        </p>
                      </div>
                      <div className="flex items-center gap-2">
                        <Button variant="outline" size="sm" disabled>
                          Previous
                        </Button>
                        <Button variant="outline" size="sm" disabled>
                          Next
                        </Button>
                      </div>
                    </div>
                  </TabsContent>

                  <TabsContent value="activity">
                    <div className="space-y-4">
                      {exampleTransactions.length > 0 ? (
                        exampleTransactions.map((transaction) => (
                          <div key={transaction.id} className="flex items-start gap-4">
                            <div className="flex h-10 w-10 shrink-0 items-center justify-center rounded-full bg-secondary">
                              <Calendar className="h-5 w-5 text-primary" />
                            </div>
                            <div className="flex-1 space-y-1">
                              <div className="flex items-center justify-between">
                                <p className="font-medium">
                                  Purchased {transaction.description} - ₹{transaction.amount.toLocaleString("en-IN")}
                                </p>
                                <span className="text-sm text-muted-foreground">
                                  {transaction.date.toLocaleDateString("en-IN", { dateStyle: "medium" })}
                                </span>
                              </div>
                              <p className="text-sm text-muted-foreground">
                                Invoice {transaction.id} - Paid via {transaction.paymentMethod}
                              </p>
                              <div className="mt-2">
                                <h4 className="text-xs font-medium text-muted-foreground">Items purchased:</h4>
                                <ul className="mt-1 space-y-1 text-sm">
                                  {transaction.items.map((item, index) => (
                                    <li key={index}>
                                      {item.name} ({item.weight}) - ₹{item.price.toLocaleString("en-IN")}
                                    </li>
                                  ))}
                                </ul>
                              </div>
                            </div>
                          </div>
                        ))
                      ) : (
                        <div className="py-10 text-center text-sm text-muted-foreground">
                          No activity found for this customer.
                        </div>
                      )}
                    </div>
                  </TabsContent>

                  <TabsContent value="analytics">
                    <div className="space-y-4">
                      <div className="grid grid-cols-1 gap-4 sm:grid-cols-3">
                        <Card>
                          <CardHeader className="pb-2">
                            <CardTitle className="text-sm font-medium">Total Spent</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <div className="text-2xl font-bold">
                              ₹{exampleTransactions.reduce((sum, t) => sum + t.amount, 0).toLocaleString("en-IN")}
                            </div>
                            <p className="text-xs text-muted-foreground">
                              Across {exampleTransactions.length} transactions
                            </p>
                          </CardContent>
                        </Card>
                        <Card>
                          <CardHeader className="pb-2">
                            <CardTitle className="text-sm font-medium">Average Purchase</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <div className="text-2xl font-bold">
                              ₹
                              {exampleTransactions.length > 0
                                ? Math.round(
                                    exampleTransactions.reduce((sum, t) => sum + t.amount, 0) /
                                      exampleTransactions.length,
                                  ).toLocaleString("en-IN")
                                : 0}
                            </div>
                            <p className="text-xs text-muted-foreground">Per transaction</p>
                          </CardContent>
                        </Card>
                        <Card>
                          <CardHeader className="pb-2">
                            <CardTitle className="text-sm font-medium">Last Purchase</CardTitle>
                          </CardHeader>
                          <CardContent>
                            {exampleTransactions.length > 0 ? (
                              <>
                                <div className="text-2xl font-bold">
                                  {exampleTransactions[0].date.toLocaleDateString("en-IN", {
                                    day: "numeric",
                                    month: "short",
                                  })}
                                </div>
                                <p className="text-xs text-muted-foreground">{exampleTransactions[0].description}</p>
                              </>
                            ) : (
                              <>
                                <div className="text-2xl font-bold">-</div>
                                <p className="text-xs text-muted-foreground">No purchases yet</p>
                              </>
                            )}
                          </CardContent>
                        </Card>
                      </div>

                      <Card>
                        <CardHeader>
                          <CardTitle className="text-sm font-medium">Purchase History</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="h-[200px] w-full rounded-md bg-muted p-4 text-center">
                            <p className="pt-16 text-muted-foreground">Purchase history chart would appear here</p>
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Quick Actions</CardTitle>
                <CardDescription>Common actions for this customer</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 gap-4 sm:grid-cols-3">
                  <Link href="/create-invoice" className="w-full">
                    <Button className="w-full bg-primary hover:bg-primary/90">Create New Invoice</Button>
                  </Link>
                  <Button variant="outline" className="w-full">
                    Send Message
                  </Button>
                  <Button variant="outline" className="w-full">
                    Schedule Appointment
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>
    </div>
  )
}
</file>

<file path="app/customers/add/page.tsx">
"use client"

import type React from "react"

import { useState, useRef } from "react"
import Link from "next/link"
import { ArrowLeft, FileText, Home, Upload, X } from "lucide-react"
import { useRouter } from "next/navigation"
import { v4 as uuidv4 } from 'uuid'

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { toast } from "@/components/ui/use-toast"
import { useAuth } from "@/components/auth-provider"
import supabase from "@/lib/supabase"

export default function AddCustomerPage() {
  const { user } = useAuth();
  const router = useRouter()
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    email: "",
    address: "",
    identityType: "pan_card",
    identityReference: "",
    referredBy: "",
    referralNotes: "",
    notes: "",
  })
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [documentFile, setDocumentFile] = useState<File | null>(null)
  const [documentPreview, setDocumentPreview] = useState<string | null>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }))
  }

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }))
    
    // Reset file input when identity type is changed to "none"
    if (name === "identityType" && value === "none") {
      removeFile()
    }
  }

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0]
      
      // Validate file size (10MB max)
      if (file.size > 10 * 1024 * 1024) {
        toast({
          title: "File too large",
          description: "Please upload a file smaller than 10MB.",
          variant: "destructive",
        })
        return
      }
      
      // Validate file type
      const validTypes = ['image/jpeg', 'image/png', 'application/pdf']
      if (!validTypes.includes(file.type)) {
        toast({
          title: "Invalid file type",
          description: "Please upload a PNG, JPG, or PDF file.",
          variant: "destructive",
        })
        return
      }
      
      setDocumentFile(file)

      // Create preview URL
      const reader = new FileReader()
      reader.onload = () => {
        setDocumentPreview(reader.result as string)
      }
      reader.readAsDataURL(file)
    }
  }

  const removeFile = () => {
    setDocumentFile(null)
    setDocumentPreview(null)
    if (fileInputRef.current) {
      fileInputRef.current.value = ""
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)

    try {
      if (!user) {
        throw new Error("You must be logged in to add a customer")
      }

      // Validate form
      if (!formData.name) {
        throw new Error("Customer name is required")
      }

      // Validate identity reference when "others" is selected
      if (formData.identityType === "others" && !formData.identityReference) {
        throw new Error("Identity reference is required when 'Others' is selected")
      }

      // Upload file to Supabase Storage if provided and identity type is not "none"
      let identityDocPath = null
      if (documentFile && formData.identityType !== "none") {
        const fileExt = documentFile.name.split('.').pop()
        const fileName = `${uuidv4()}.${fileExt}`
        const filePath = `${user.id}/${fileName}`
        
        // Use secure upload API
        const { data: { session } } = await supabase.auth.getSession()
        if (!session) {
          throw new Error('No active session')
        }

        const formDataUpload = new FormData()
        formDataUpload.append('file', documentFile)
        formDataUpload.append('bucket', 'identity_docs')
        formDataUpload.append('path', filePath)

        const response = await fetch('/api/storage/upload', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${session.access_token}`,
          },
          body: formDataUpload,
        })

        if (!response.ok) {
          const error = await response.json()
          throw new Error(error.error || 'Upload failed')
        }

        const uploadResult = await response.json()
        // Store the path in a URL format for backward compatibility
        identityDocPath = `identity_docs/${uploadResult.path}`
      }

      // Insert customer data into Supabase
      const { data, error } = await supabase
        .from('customers')
        .insert({
          name: formData.name,
          email: formData.email || null,
          phone: formData.phone || null,
          address: formData.address || null,
          notes: formData.notes || null,
          user_id: user.id,
          identity_type: formData.identityType,
          identity_reference: formData.identityReference || null,
          identity_doc: identityDocPath
        })
        .select()

      if (error) {
        throw new Error(`Error adding customer: ${error.message}`)
      }

      toast({
        title: "Customer added",
        description: "The customer has been added successfully.",
      })

      // Redirect to customers page
      router.push("/customers")
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to add customer. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <div className="flex items-center gap-2 font-heading font-semibold">
          <FileText className="h-6 w-6 text-primary" />
          <span className="text-xl">Sethiya Gold</span>
        </div>
        <nav className="ml-auto flex items-center gap-4">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm">
              <Home className="mr-2 h-4 w-4" />
              Dashboard
            </Button>
          </Link>
        </nav>
      </header>
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <div className="flex items-center">
          <Link href="/customers">
            <Button variant="ghost" size="sm" className="gap-1">
              <ArrowLeft className="h-4 w-4" />
              Back to Customers
            </Button>
          </Link>
          <h1 className="ml-4 text-xl font-semibold md:text-2xl">Add New Customer</h1>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
            {/* Basic Information */}
            <Card>
              <CardHeader>
                <CardTitle>Basic Information</CardTitle>
                <CardDescription>Enter the customer's personal details</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="name">
                    Full Name <span className="text-destructive">*</span>
                  </Label>
                  <Input
                    id="name"
                    name="name"
                    placeholder="Enter customer's full name"
                    value={formData.name}
                    onChange={handleChange}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="phone">
                    Phone Number
                  </Label>
                  <Input
                    id="phone"
                    name="phone"
                    placeholder="Enter phone number"
                    value={formData.phone}
                    onChange={handleChange}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="email">
                    Email Address
                  </Label>
                  <Input
                    id="email"
                    name="email"
                    type="email"
                    placeholder="Enter email address"
                    value={formData.email}
                    onChange={handleChange}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="address">Address</Label>
                  <Textarea
                    id="address"
                    name="address"
                    placeholder="Enter full address"
                    value={formData.address}
                    onChange={handleChange}
                    rows={3}
                  />
                </div>
              </CardContent>
            </Card>

            {/* Identity Information */}
            <Card>
              <CardHeader>
                <CardTitle>Identity Information</CardTitle>
                <CardDescription>Enter the customer's identity details</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label>Identity Type</Label>
                  <RadioGroup
                    value={formData.identityType}
                    onValueChange={(value) => handleSelectChange("identityType", value)}
                    className="flex flex-wrap gap-4"
                  >
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="pan_card" id="pan_card" />
                      <Label htmlFor="pan_card">PAN Card</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="aadhaar_card" id="aadhaar_card" />
                      <Label htmlFor="aadhaar_card">Aadhaar Card</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="others" id="others" />
                      <Label htmlFor="others">Others</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="none" id="none" />
                      <Label htmlFor="none">None</Label>
                    </div>
                  </RadioGroup>
                </div>

                {formData.identityType !== "none" && (
                  <>
                    {formData.identityType === "others" && (
                      <div className="space-y-2">
                        <Label htmlFor="identityReference">
                          Identity Reference Number {formData.identityType === "others" && <span className="text-destructive">*</span>}
                        </Label>
                        <Input
                          id="identityReference"
                          name="identityReference"
                          placeholder="Enter reference number"
                          value={formData.identityReference}
                          onChange={handleChange}
                          required={formData.identityType === "others"}
                        />
                      </div>
                    )}

                    <div className="space-y-2">
                      <Label>Identity Document {formData.identityType !== "none" && <span className="text-destructive">*</span>}</Label>
                      <div className="mt-1 flex items-center justify-center rounded-md border-2 border-dashed border-muted p-6">
                        {documentPreview ? (
                          <div className="relative">
                            {documentFile?.type === 'application/pdf' ? (
                              <div className="flex h-40 w-60 items-center justify-center rounded-md bg-muted">
                                <FileText className="h-16 w-16 text-muted-foreground" />
                                <p className="mt-2 text-sm text-muted-foreground">{documentFile.name}</p>
                              </div>
                            ) : (
                              <img
                                src={documentPreview}
                                alt="Document Preview"
                                className="h-40 rounded-md object-cover"
                              />
                            )}
                            <Button
                              type="button"
                              variant="destructive"
                              size="icon"
                              className="absolute -right-2 -top-2 h-6 w-6 rounded-full"
                              onClick={removeFile}
                            >
                              <X className="h-4 w-4" />
                            </Button>
                          </div>
                        ) : (
                          <div className="text-center">
                            <Upload className="mx-auto h-12 w-12 text-muted-foreground" />
                            <div className="mt-2 flex text-sm text-muted-foreground">
                              <label
                                htmlFor="file-upload"
                                className="relative cursor-pointer rounded-md font-medium text-primary hover:text-primary/80 focus-within:outline-none"
                              >
                                <span>Upload a file</span>
                                <input
                                  id="file-upload"
                                  name="file-upload"
                                  type="file"
                                  className="sr-only"
                                  accept="image/png,image/jpeg,application/pdf"
                                  onChange={handleFileChange}
                                  ref={fileInputRef}
                                  required={formData.identityType !== "none"}
                                />
                              </label>
                              <p className="pl-1">or drag and drop</p>
                            </div>
                            <p className="text-xs text-muted-foreground">PNG, JPG, PDF up to 10MB</p>
                          </div>
                        )}
                      </div>
                    </div>
                  </>
                )}
              </CardContent>
            </Card>

            {/* Referral Information */}
            <Card>
              <CardHeader>
                <CardTitle>Referral Information</CardTitle>
                <CardDescription>Enter referral details if applicable</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="referredBy">Referred By</Label>
                  <Select
                    value={formData.referredBy}
                    onValueChange={(value) => handleSelectChange("referredBy", value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select a referrer (if any)" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="none">None</SelectItem>
                      <SelectItem value="Rajesh Mehta">Rajesh Mehta</SelectItem>
                      <SelectItem value="Amit Singh">Amit Singh</SelectItem>
                      <SelectItem value="Neha Gupta">Neha Gupta</SelectItem>
                      <SelectItem value="Ananya Patel">Ananya Patel</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="referralNotes">Referral Notes</Label>
                  <Textarea
                    id="referralNotes"
                    name="referralNotes"
                    placeholder="Enter any notes about the referral"
                    value={formData.referralNotes}
                    onChange={handleChange}
                    rows={3}
                  />
                </div>
              </CardContent>
            </Card>

            {/* Additional Information */}
            <Card>
              <CardHeader>
                <CardTitle>Additional Information</CardTitle>
                <CardDescription>Enter any additional notes or preferences</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="notes">Notes</Label>
                  <Textarea
                    id="notes"
                    name="notes"
                    placeholder="Enter any additional notes about the customer"
                    value={formData.notes}
                    onChange={handleChange}
                    rows={5}
                  />
                </div>
              </CardContent>
            </Card>
          </div>

          <div className="mt-6 flex justify-end gap-4">
            <Link href="/customers">
              <Button variant="outline">Cancel</Button>
            </Link>
            <Button 
              type="submit" 
              className="bg-primary hover:bg-primary/90"
              disabled={isSubmitting}
            >
              {isSubmitting ? "Adding..." : "Add Customer"}
            </Button>
          </div>
        </form>
      </main>
    </div>
  )
}
</file>

<file path="app/invoices/[id]/edit/page.tsx">
"use client"

import { useState, useEffect, useRef } from "react"
import Link from "next/link"
import { useRouter, useParams } from "next/navigation"
import { ArrowLeft, Save, Trash2 } from "lucide-react"
import { v4 as uuidv4 } from "uuid"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"
import { Textarea } from "@/components/ui/textarea"
import { toast } from "@/components/ui/use-toast"
import { useAuth } from "@/components/auth-provider"
import supabase from "@/lib/supabase"

interface InvoiceItem {
  id: string
  name: string
  quantity: number
  weight: number
  pricePerGram: number
  total: number
  // For tracking database items
  isExisting: boolean
  isDeleted?: boolean
}

export default function EditInvoicePage() {
  const router = useRouter()
  const params = useParams()
  const { user, isLoading: authLoading } = useAuth()
  
  const [invoiceData, setInvoiceData] = useState<any>(null)
  const [invoiceItemsData, setInvoiceItemsData] = useState<InvoiceItem[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [isSaving, setIsSaving] = useState(false)
  
  const [formData, setFormData] = useState({
    date: new Date().toISOString().split("T")[0],
    items: [] as InvoiceItem[],
    gst: 3,
    notes: "",
  })

  // Fetch invoice data when component mounts
  useEffect(() => {
    if (user && params.id) {
      fetchInvoiceData()
    }
  }, [user, params.id])

  // Check if user is authenticated
  useEffect(() => {
    if (!authLoading && !user) {
      router.push("/")
      toast({
        title: "Authentication required",
        description: "Please log in to edit this invoice",
        variant: "destructive",
      })
    }
  }, [user, authLoading, router])

  // Fetch invoice and its items
  const fetchInvoiceData = async () => {
    if (!user) return
    
    try {
      setIsLoading(true)
      
      // Fetch invoice
      const { data: invoiceData, error: invoiceError } = await supabase
        .from('invoices')
        .select('*')
        .eq('id', params.id)
        .eq('user_id', user.id)
        .single()
      
      if (invoiceError) throw invoiceError
      
      if (!invoiceData) {
        toast({
          title: "Invoice not found",
          description: "The requested invoice could not be found",
          variant: "destructive",
        })
        router.push("/invoices")
        return
      }
      
      setInvoiceData(invoiceData)
      
      // Fetch invoice items
      const { data: itemsData, error: itemsError } = await supabase
        .from('invoice_items')
        .select('*')
        .eq('invoice_id', params.id)
        .order('created_at', { ascending: true })
      
      if (itemsError) throw itemsError
      
      // Convert database items to form items
      const convertedItems = (itemsData || []).map(item => ({
        id: item.id,
        name: item.name,
        quantity: item.quantity,
        weight: item.weight,
        pricePerGram: item.price_per_gram,
        total: item.total,
        isExisting: true
      }))
      
      setInvoiceItemsData(convertedItems)
      
      // Set form data
      setFormData({
        date: invoiceData.invoice_date,
        items: convertedItems,
        gst: invoiceData.gst_percentage,
        notes: invoiceData.notes || "",
      })
    } catch (error: any) {
      console.error("Error fetching invoice:", error)
      toast({
        title: "Error loading invoice",
        description: error.message || "Could not load invoice details",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  // Handle input changes for non-item fields
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }))
  }
  
  // Handle item field changes
  const handleItemChange = (itemId: string, field: string, value: string | number) => {
    setFormData((prev) => {
      const newItems = prev.items.map((item) => {
        if (item.id === itemId) {
          const updatedItem = {
            ...item,
            [field]: field === "name" ? value : Number(value),
          }
          
          // Recalculate total for this item
          updatedItem.total = calculateItemBaseTotal(
            updatedItem.quantity,
            updatedItem.weight,
            updatedItem.pricePerGram
          )
          
          return updatedItem
        }
        return item
      })
      
      return { ...prev, items: newItems }
    })
  }
  
  // Add a new item to the list
  const addItem = () => {
    setFormData((prev) => ({
      ...prev,
      items: [
        ...prev.items,
        {
          id: uuidv4(),
          name: "",
          quantity: 1,
          weight: 0,
          pricePerGram: prev.items.length > 0 ? prev.items[0].pricePerGram : 6450,
          total: 0,
          isExisting: false
        },
      ],
    }))
  }
  
  // Remove an item from the list
  const removeItem = (itemId: string) => {
    // Don't remove if it's the last item
    if (formData.items.length <= 1) {
      return
    }
    
    setFormData((prev) => {
      const itemToRemove = prev.items.find(item => item.id === itemId)
      
      if (itemToRemove?.isExisting) {
        // For existing items, mark as deleted but keep in the array for tracking
        return {
          ...prev,
          items: prev.items.map(item => 
            item.id === itemId 
              ? { ...item, isDeleted: true } 
              : item
          )
        }
      } else {
        // For new items, just remove from the array
        return {
          ...prev,
          items: prev.items.filter((item) => item.id !== itemId),
        }
      }
    })
  }

  // Calculate base total for a single item
  const calculateItemBaseTotal = (quantity: number, weight: number, pricePerGram: number) => {
    return (quantity * weight * pricePerGram) / 10 // Price per 10 grams
  }

  // Calculate overall totals
  const calculateTotal = () => {
    const { items, gst } = formData
    
    // Only include non-deleted items in calculations
    const activeItems = items.filter(item => !item.isDeleted)
    
    // Calculate base value (gold value) for all items
    const itemsBaseTotal = activeItems.reduce((sum, item) => 
      sum + calculateItemBaseTotal(item.quantity, item.weight, item.pricePerGram), 0
    )
    
    // Subtotal is the base value of all items
    const subtotal = itemsBaseTotal
    
    // Grand total before GST
    const grandTotalBeforeGst = subtotal
    
    // Calculate GST on the grand total
    const gstAmount = grandTotalBeforeGst * (gst / 100)
    
    // Total including GST
    const total = grandTotalBeforeGst + gstAmount
    
    return {
      itemsBaseTotal: itemsBaseTotal.toFixed(2),
      subtotal: subtotal.toFixed(2),
      grandTotalBeforeGst: grandTotalBeforeGst.toFixed(2),
      gstAmount: gstAmount.toFixed(2),
      total: total.toFixed(2),
    }
  }

  // Handle form submission for updating invoice
  const handleUpdateInvoice = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!user || !invoiceData) {
      toast({
        title: "Error",
        description: "User not authenticated or invoice data missing",
        variant: "destructive",
      })
      return
    }
    
    // Validate that we have at least one valid item
    const activeItems = formData.items.filter(item => !item.isDeleted)
    
    if (activeItems.length === 0 || activeItems.some(item => !item.name.trim() || item.quantity <= 0 || item.weight <= 0)) {
      toast({
        title: "Required fields missing",
        description: "Please fill in all required item fields with valid values",
        variant: "destructive",
      })
      return
    }
    
    try {
      setIsSaving(true)
      
      // Calculate totals
      const calculatedTotals = calculateTotal()
      
      // 1. Update the main invoice record
      const { error: invoiceError } = await supabase
        .from('invoices')
        .update({
          invoice_date: formData.date,
          notes: formData.notes,
          subtotal: Number(calculatedTotals.subtotal),
          gst_percentage: formData.gst,
          gst_amount: Number(calculatedTotals.gstAmount),
          grand_total: Number(calculatedTotals.total),
          updated_at: new Date().toISOString()
        })
        .eq('id', invoiceData.id)
        .eq('user_id', user.id)
      
      if (invoiceError) throw invoiceError
      
      // 2. Handle invoice items
      
      // 2.1 Update existing items that were modified
      const itemsToUpdate = formData.items.filter(item => 
        item.isExisting && !item.isDeleted
      )
      
      for (const item of itemsToUpdate) {
        const { error: updateError } = await supabase
          .from('invoice_items')
          .update({
            name: item.name,
            quantity: item.quantity,
            weight: item.weight,
            price_per_gram: item.pricePerGram,
            total: item.total
          })
          .eq('id', item.id)
          .eq('user_id', user.id)
        
        if (updateError) throw updateError
      }
      
      // 2.2 Delete items that were removed
      const itemsToDelete = formData.items.filter(item => 
        item.isExisting && item.isDeleted
      )
      
      for (const item of itemsToDelete) {
        const { error: deleteError } = await supabase
          .from('invoice_items')
          .delete()
          .eq('id', item.id)
          .eq('user_id', user.id)
        
        if (deleteError) throw deleteError
      }
      
      // 2.3 Insert new items
      const itemsToInsert = formData.items
        .filter(item => !item.isExisting && !item.isDeleted)
        .map(item => ({
          invoice_id: invoiceData.id,
          user_id: user.id,
          name: item.name,
          quantity: item.quantity,
          weight: item.weight,
          price_per_gram: item.pricePerGram,
          total: item.total
        }))
      
      if (itemsToInsert.length > 0) {
        const { error: insertError } = await supabase
          .from('invoice_items')
          .insert(itemsToInsert)
        
        if (insertError) throw insertError
      }
      
      // Success message and redirect
      toast({
        title: "Invoice updated",
        description: "The invoice has been successfully updated.",
        variant: "default",
      })
      
      // Navigate to invoice detail page
      router.push(`/invoices/${invoiceData.id}`)
    } catch (error: any) {
      console.error("Error updating invoice:", error)
      toast({
        title: "Error updating invoice",
        description: error.message || "An error occurred while updating the invoice.",
        variant: "destructive",
      })
    } finally {
      setIsSaving(false)
    }
  }

  // Show loading state or nothing while checking authentication
  if (authLoading || !user) {
    return <div className="flex min-h-screen items-center justify-center">Loading...</div>
  }
  
  // Show loading state while fetching data
  if (isLoading) {
    return (
      <div className="flex items-center">
        <Link href={`/invoices/${params.id}`}>
          <Button variant="ghost" size="sm" className="gap-1">
            <ArrowLeft className="h-4 w-4" />
            Back to Invoice
          </Button>
        </Link>
        <h1 className="ml-4 text-xl font-semibold md:text-2xl">Loading Invoice...</h1>
      </div>
    )
  }

  return (
    <div className="flex items-center flex-col gap-4">
      <div className="flex items-center self-start w-full">
        <Link href={`/invoices/${params.id}`}>
          <Button variant="ghost" size="sm" className="gap-1">
            <ArrowLeft className="h-4 w-4" />
            Back to Invoice
          </Button>
        </Link>
        <h1 className="ml-4 text-xl font-semibold md:text-2xl">Edit Invoice #{invoiceData?.invoice_number}</h1>
      </div>

      <Card className="w-full">
        <CardHeader>
          <CardTitle>Invoice Details</CardTitle>
          <CardDescription>Edit the invoice information below</CardDescription>
        </CardHeader>
        <form onSubmit={handleUpdateInvoice}>
          <CardContent className="space-y-6">
            {/* Customer Info - Read Only */}
            <div className="rounded-md border p-3 text-sm">
              <p className="font-medium">{invoiceData?.customer_name_snapshot}</p>
              {invoiceData?.customer_address_snapshot && (
                <p className="text-muted-foreground">{invoiceData?.customer_address_snapshot}</p>
              )}
              <p className="text-muted-foreground">
                {invoiceData?.customer_phone_snapshot && `Phone: ${invoiceData?.customer_phone_snapshot}`}
                {invoiceData?.customer_phone_snapshot && invoiceData?.customer_email_snapshot && " | "}
                {invoiceData?.customer_email_snapshot && `Email: ${invoiceData?.customer_email_snapshot}`}
              </p>
            </div>

            {/* Date Field */}
            <div className="space-y-2">
              <Label htmlFor="date">Invoice Date</Label>
              <Input 
                id="date" 
                name="date" 
                type="date" 
                value={formData.date} 
                onChange={handleChange} 
                required 
              />
            </div>

            <Separator />

            {/* Items Section */}
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-medium">Jewelry Items</h3>
                <Button 
                  type="button" 
                  variant="outline" 
                  size="sm" 
                  onClick={addItem}
                  className="gap-1"
                >
                  Add Item
                </Button>
              </div>

              {formData.items
                .filter(item => !item.isDeleted)
                .map((item, index) => (
                <div key={item.id} className="rounded-md border p-4">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-medium">Item {index + 1}</h4>
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      onClick={() => removeItem(item.id)}
                      disabled={formData.items.filter(i => !i.isDeleted).length <= 1}
                      className="h-8 w-8 rounded-full p-0"
                    >
                      <Trash2 className="h-4 w-4 text-destructive" />
                      <span className="sr-only">Remove</span>
                    </Button>
                  </div>

                  <div className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor={`item-name-${item.id}`}>Jewelry Item Name</Label>
                      <Input
                        id={`item-name-${item.id}`}
                        value={item.name}
                        onChange={(e) => handleItemChange(item.id, "name", e.target.value)}
                        placeholder="Enter jewelry item name"
                        required
                      />
                    </div>

                    <div className="grid grid-cols-1 gap-4 md:grid-cols-3">
                      <div className="space-y-2">
                        <Label htmlFor={`item-quantity-${item.id}`}>Quantity</Label>
                        <Input
                          id={`item-quantity-${item.id}`}
                          type="number"
                          min="1"
                          value={item.quantity}
                          onChange={(e) => handleItemChange(item.id, "quantity", e.target.value)}
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor={`item-weight-${item.id}`}>Weight (in grams)</Label>
                        <Input
                          id={`item-weight-${item.id}`}
                          type="number"
                          step="0.01"
                          min="0"
                          placeholder="Enter weight in grams"
                          value={item.weight || ""}
                          onChange={(e) => handleItemChange(item.id, "weight", e.target.value)}
                          required
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor={`item-price-${item.id}`}>Price per 10 grams (₹)</Label>
                        <Input
                          id={`item-price-${item.id}`}
                          type="number"
                          step="0.01"
                          min="0"
                          placeholder="Enter price per 10 grams"
                          value={item.pricePerGram}
                          onChange={(e) => handleItemChange(item.id, "pricePerGram", e.target.value)}
                          required
                        />
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                      <div className="space-y-2 flex flex-col justify-end">
                        <div className="text-right">
                          <div className="text-sm text-muted-foreground">Base Value: ₹{calculateItemBaseTotal(item.quantity, item.weight, item.pricePerGram).toFixed(2)}</div>
                          <div className="font-medium">Item Total: ₹{item.total.toFixed(2)}</div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {/* Notes Field */}
            <div className="space-y-2">
              <Label htmlFor="notes">Notes</Label>
              <Textarea
                id="notes"
                name="notes"
                placeholder="Add any additional notes or instructions"
                value={formData.notes}
                onChange={handleChange}
                rows={3}
              />
            </div>

            {/* GST Field - Read Only */}
            <div className="space-y-2">
              <Label htmlFor="gst">GST (%)</Label>
              <Input
                id="gst"
                name="gst"
                type="number"
                step="0.01"
                min="0"
                value={formData.gst}
                disabled
              />
              <p className="text-sm text-muted-foreground">GST for jewelry is fixed at 3%</p>
            </div>

            {/* Totals Display */}
            <div className="rounded-lg bg-muted p-4">
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span>Items Base Total:</span>
                  <span>₹{calculateTotal().itemsBaseTotal}</span>
                </div>
                <div className="flex justify-between">
                  <span>Subtotal (Before GST):</span>
                  <span>₹{calculateTotal().grandTotalBeforeGst}</span>
                </div>
                <div className="flex justify-between">
                  <span>GST ({formData.gst}%):</span>
                  <span>₹{calculateTotal().gstAmount}</span>
                </div>
                <Separator />
                <div className="flex justify-between font-bold">
                  <span>Total Amount:</span>
                  <span>₹{calculateTotal().total}</span>
                </div>
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button variant="outline" type="button" onClick={() => router.push(`/invoices/${params.id}`)} disabled={isSaving}>
              Cancel
            </Button>
            <Button type="submit" className="bg-amber-600 hover:bg-amber-700" disabled={isSaving}>
              {isSaving ? (
                <>
                  <svg className="mr-2 h-4 w-4 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Saving Changes...
                </>
              ) : (
                <>
                  <Save className="mr-2 h-4 w-4" />
                  Save Changes
                </>
              )}
            </Button>
          </CardFooter>
        </form>
      </Card>
    </div>
  )
}
</file>

<file path="app/invoices/layout.tsx">
import Link from "next/link"
import { FileText } from "lucide-react"
import { AuthProvider } from "@/components/auth-provider"

export default function InvoicesLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <AuthProvider>
      <div className="flex min-h-screen w-full flex-col">
        <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
          <Link href="/dashboard" className="flex items-center gap-2 font-heading font-semibold">
            <FileText className="h-6 w-6 text-primary" />
            <span className="text-xl">Sethiya Gold</span>
          </Link>
        </header>
        <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
          {children}
        </main>
      </div>
    </AuthProvider>
  )
}
</file>

<file path="app/invoices/page.tsx">
"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { useRouter } from "next/navigation"
import { Calendar, FileText, Printer, Search, PlusCircle, ChevronLeft, ChevronRight, ArrowDownUp } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Skeleton } from "@/components/ui/skeleton"
import { useToast } from "@/components/ui/use-toast"
import { useAuth } from "@/components/auth-provider"
import supabase from "@/lib/supabase"

interface Invoice {
  id: string
  invoice_number: string
  customer_name_snapshot: string
  invoice_date: string
  grand_total: number
  status: string
}

export default function InvoicesPage() {
  const router = useRouter()
  const { user, isLoading: authLoading } = useAuth()
  const { toast } = useToast()

  const [invoices, setInvoices] = useState<Invoice[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [searchQuery, setSearchQuery] = useState("")
  const [startDate, setStartDate] = useState("")
  const [endDate, setEndDate] = useState("")
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc")
  
  // Pagination
  const [currentPage, setCurrentPage] = useState(1)
  const [totalCount, setTotalCount] = useState(0)
  const [pageSize] = useState(10)

  // Check if user is authenticated
  useEffect(() => {
    if (!authLoading && !user) {
      router.push("/")
      toast({
        title: "Authentication required",
        description: "Please log in to view invoices",
        variant: "destructive",
      })
    }
  }, [user, authLoading, router, toast])

  // Fetch invoices when dependencies change
  useEffect(() => {
    if (user) {
      fetchInvoices()
    }
  }, [user, currentPage, searchQuery, startDate, endDate, sortDirection])

  // Function to fetch invoices
  const fetchInvoices = async () => {
    if (!user) return

    try {
      setIsLoading(true)

      // Calculate pagination range
      const from = (currentPage - 1) * pageSize
      const to = from + pageSize - 1

      // Start building the query
      let query = supabase
        .from('invoices')
        .select('id, invoice_number, customer_name_snapshot, invoice_date, grand_total, status', { count: 'exact' })
        .eq('user_id', user.id)
        .order('invoice_date', { ascending: sortDirection === 'asc' })
        .range(from, to)

      // Apply search filter if provided
      if (searchQuery) {
        query = query.ilike('customer_name_snapshot', `%${searchQuery}%`)
      }

      // Apply date filters if provided
      if (startDate) {
        query = query.gte('invoice_date', startDate)
      }
      if (endDate) {
        query = query.lte('invoice_date', endDate)
      }

      // Execute the query
      const { data, error, count } = await query

      if (error) throw error

      setInvoices(data || [])
      setTotalCount(count || 0)
    } catch (error: any) {
      console.error("Error fetching invoices:", error)
      toast({
        title: "Failed to load invoices",
        description: error.message || "An error occurred while loading invoices",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  // Format date for display
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-IN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    })
  }

  // Format currency for display
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      maximumFractionDigits: 2,
    }).format(amount)
  }

  // Toggle sort direction
  const toggleSortDirection = () => {
    setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')
  }

  // Calculate total pages
  const totalPages = Math.ceil(totalCount / pageSize)

  // Go to previous page
  const goToPreviousPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1)
    }
  }

  // Go to next page
  const goToNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1)
    }
  }

  // Status badge component
  const StatusBadge = ({ status }: { status: string }) => {
    let bgColor = "bg-gray-100"
    let textColor = "text-gray-800"

    switch (status.toLowerCase()) {
      case 'paid':
        bgColor = "bg-green-100"
        textColor = "text-green-800"
        break
      case 'pending':
        bgColor = "bg-yellow-100"
        textColor = "text-yellow-800"
        break
      case 'cancelled':
        bgColor = "bg-red-100"
        textColor = "text-red-800"
        break
      case 'finalized':
        bgColor = "bg-blue-100"
        textColor = "text-blue-800"
        break
    }

    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${bgColor} ${textColor}`}>
        {status}
      </span>
    )
  }

  // Loading skeleton
  if (isLoading) {
    return (
      <>
        <div className="flex items-center justify-between">
          <h1 className="text-xl font-semibold md:text-2xl">Invoices</h1>
          <Skeleton className="h-10 w-32" />
        </div>
        <div className="flex flex-col gap-4 md:flex-row md:items-center">
          <Skeleton className="h-10 flex-1" />
          <Skeleton className="h-10 w-40" />
          <Skeleton className="h-10 w-40" />
          <Skeleton className="h-10 w-20" />
        </div>
        <Card>
          <CardHeader className="pb-2">
            <Skeleton className="h-6 w-36" />
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {Array(5).fill(0).map((_, i) => (
                <div key={i} className="flex items-center gap-4">
                  <Skeleton className="h-14 flex-1" />
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </>
    )
  }

  // Show loading state or nothing while checking authentication
  if (authLoading || !user) {
    return <div className="flex min-h-screen items-center justify-center">Loading...</div>
  }

  return (
    <>
      <div className="flex items-center justify-between">
        <h1 className="text-xl font-semibold md:text-2xl">Invoices</h1>
        <Link href="/create-invoice">
          <Button className="bg-amber-600 hover:bg-amber-700">
            <PlusCircle className="mr-2 h-4 w-4" />
            Create New Invoice
          </Button>
        </Link>
      </div>

      {/* Search and Filter Controls */}
      <div className="flex flex-col gap-4 md:flex-row md:items-center">
        <div className="relative flex-1">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            type="search"
            placeholder="Search by customer name..."
            className="pl-8"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
        <div className="flex items-center gap-2">
          <Input
            type="date"
            className="w-40"
            placeholder="Start Date"
            value={startDate}
            onChange={(e) => setStartDate(e.target.value)}
          />
          <span>to</span>
          <Input
            type="date"
            className="w-40"
            placeholder="End Date"
            value={endDate}
            onChange={(e) => setEndDate(e.target.value)}
          />
        </div>
        <Button
          variant="outline"
          size="icon"
          onClick={toggleSortDirection}
          title={`Sort by date ${sortDirection === 'asc' ? 'oldest first' : 'newest first'}`}
        >
          <ArrowDownUp className="h-4 w-4" />
        </Button>
      </div>

      {/* Invoices Table */}
      <Card>
        <CardHeader className="pb-2">
          <CardTitle>Invoice List</CardTitle>
          <CardDescription>
            Showing {invoices.length} of {totalCount} invoices
          </CardDescription>
        </CardHeader>
        <CardContent>
          {invoices.length === 0 ? (
            <div className="flex h-24 items-center justify-center rounded-md border border-dashed">
              <p className="text-muted-foreground">No invoices found</p>
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Invoice Number</TableHead>
                  <TableHead>Customer</TableHead>
                  <TableHead>Date</TableHead>
                  <TableHead>Amount</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {invoices.map((invoice) => (
                  <TableRow key={invoice.id}>
                    <TableCell className="font-medium">{invoice.invoice_number}</TableCell>
                    <TableCell>{invoice.customer_name_snapshot}</TableCell>
                    <TableCell>{formatDate(invoice.invoice_date)}</TableCell>
                    <TableCell>{formatCurrency(invoice.grand_total)}</TableCell>
                    <TableCell>
                      <StatusBadge status={invoice.status} />
                    </TableCell>
                    <TableCell className="text-right">
                      <Link href={`/invoices/${invoice.id}`}>
                        <Button variant="outline" size="sm">
                          View
                        </Button>
                      </Link>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}

          {/* Pagination */}
          {totalPages > 1 && (
            <div className="flex items-center justify-center space-x-2 py-4">
              <Button
                variant="outline"
                size="sm"
                onClick={goToPreviousPage}
                disabled={currentPage === 1}
              >
                <ChevronLeft className="h-4 w-4" />
                <span className="sr-only">Previous Page</span>
              </Button>
              <span className="text-sm text-muted-foreground">
                Page {currentPage} of {totalPages}
              </span>
              <Button
                variant="outline"
                size="sm"
                onClick={goToNextPage}
                disabled={currentPage === totalPages}
              >
                <ChevronRight className="h-4 w-4" />
                <span className="sr-only">Next Page</span>
              </Button>
            </div>
          )}
        </CardContent>
      </Card>
    </>
  )
}
</file>

<file path="app/purchases/invoices/[id]/edit/page.tsx">
"use client"

import { useState, useEffect } from "react"
import { useRouter, useSearchParams } from "next/navigation"
import Link from "next/link"
import { format } from "date-fns"
import { useAuth } from "@/components/auth-provider"
import { useToast } from "@/components/ui/use-toast"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Calendar } from "@/components/ui/calendar"
import { cn } from "@/lib/utils"
import { ArrowLeft, CalendarIcon, FileText, FileUp, PlusCircle, Trash2 } from "lucide-react"
import { Skeleton } from "@/components/ui/skeleton"
import supabase from "@/lib/supabase"
import { Tables } from "@/lib/database.types"

type Supplier = Tables<"suppliers">
type PurchaseInvoice = Tables<"purchase_invoices">

export default function EditPurchaseInvoicePage({ params }: { params: { id: string } }) {
  const { user, isLoading: authLoading } = useAuth()
  const router = useRouter()
  const { toast } = useToast()
  const [suppliers, setSuppliers] = useState<Supplier[]>([])
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [isLoadingSuppliers, setIsLoadingSuppliers] = useState(true)
  const [selectedFile, setSelectedFile] = useState<File | null>(null)
  const [currentInvoiceFile, setCurrentInvoiceFile] = useState<string | null>(null)
  const [removeCurrentFile, setRemoveCurrentFile] = useState(false)
  const [formData, setFormData] = useState({
    purchase_number: "",
    invoice_number: "",
    invoice_date: new Date(),
    supplier_id: "_none",
    amount: "",
    status: "Received",
    payment_status: "Unpaid",
    number_of_items: "",
    notes: "",
  })

  useEffect(() => {
    if (!authLoading && !user) {
      router.push("/")
      toast({
        title: "Authentication required",
        description: "Please log in to edit a purchase invoice",
        variant: "destructive",
      })
      return
    }

    if (user) {
      fetchSuppliers()
      fetchInvoice()
    }
  }, [user, authLoading, params.id])

  const fetchSuppliers = async () => {
    if (!user) return
    
    try {
      const { data, error } = await supabase
        .from("suppliers")
        .select("*")
        .eq("user_id", user.id)
        .order("name")

      if (error) throw error
      setSuppliers(data || [])
    } catch (error: any) {
      console.error("Error fetching suppliers:", error)
      toast({
        title: "Error fetching suppliers",
        description: error.message || "An error occurred",
        variant: "destructive",
      })
    } finally {
      setIsLoadingSuppliers(false)
    }
  }

  const fetchInvoice = async () => {
    setIsLoading(true)
    try {
      const { data, error } = await supabase
        .from("purchase_invoices")
        .select("*")
        .eq("id", params.id)
        .eq("user_id", user!.id)
        .single()

      if (error) throw error

      if (!data) {
        toast({
          title: "Purchase invoice not found",
          description: "The requested invoice does not exist or you don't have access to it",
          variant: "destructive",
        })
        router.push("/purchases?tab=invoices")
        return
      }

      // Set current invoice file
      if (data.invoice_file_url) {
        setCurrentInvoiceFile(data.invoice_file_url)
      }

      // Set form data
      setFormData({
        purchase_number: data.purchase_number || "",
        invoice_number: data.invoice_number || "",
        invoice_date: data.invoice_date ? new Date(data.invoice_date) : new Date(),
        supplier_id: data.supplier_id || "_none",
        amount: data.amount ? data.amount.toString() : "",
        status: data.status || "Received",
        payment_status: data.payment_status || "Unpaid",
        number_of_items: data.number_of_items ? data.number_of_items.toString() : "",
        notes: data.notes || "",
      })
    } catch (error: any) {
      console.error("Error fetching purchase invoice:", error)
      toast({
        title: "Error loading purchase invoice",
        description: error.message || "An error occurred while loading invoice details",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleDateSelect = (date: Date | undefined) => {
    if (date) {
      setFormData((prev) => ({ ...prev, invoice_date: date }))
    }
  }

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      setSelectedFile(e.target.files[0])
      setRemoveCurrentFile(true) // When a new file is selected, we'll remove the old one
    }
  }

  const handleRemoveCurrentFile = () => {
    setRemoveCurrentFile(true)
    setCurrentInvoiceFile(null)
  }

  const handleCancelRemoveFile = () => {
    setRemoveCurrentFile(false)
    setSelectedFile(null)
    // If we had a file URL before, restore it
    if (currentInvoiceFile) {
      setCurrentInvoiceFile(currentInvoiceFile)
    }
  }

  const getFileNameFromUrl = (url: string) => {
    try {
      const urlObj = new URL(url)
      const pathParts = urlObj.pathname.split('/')
      return pathParts[pathParts.length - 1]
    } catch (error) {
      return url.split('/').pop() || 'Invoice File'
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!user) {
      toast({
        title: "Authentication required",
        description: "Please log in to update a purchase invoice",
        variant: "destructive",
      })
      return
    }

    // Validate required fields
    if (!formData.invoice_number.trim() || !formData.amount.trim()) {
      toast({
        title: "Required fields missing",
        description: "Please fill in all required fields",
        variant: "destructive",
      })
      return
    }

    setIsSubmitting(true)

    try {
      // Helper function to extract storage path from public URL
      const extractStoragePathFromUrl = (publicUrl: string, bucketName: string): string | null => {
        try {
          const url = new URL(publicUrl)
          const pathParts = url.pathname.split('/')
          const bucketIndex = pathParts.indexOf(bucketName)
          
          if (bucketIndex !== -1 && bucketIndex < pathParts.length - 1) {
            // Get everything after the bucket name
            return pathParts.slice(bucketIndex + 1).join('/')
          }
          return null
        } catch (error) {
          console.error('Error parsing storage URL:', error)
          return null
        }
      }

      // Handle file changes
      let invoice_file_url = currentInvoiceFile
      
      // If we're removing the current file
      if (removeCurrentFile && currentInvoiceFile) {
        try {
          const filePath = extractStoragePathFromUrl(currentInvoiceFile, 'purchase-invoices')
          
          if (filePath) {
            const { error: removeError } = await supabase.storage
              .from('purchase-invoices')
              .remove([filePath])
            
            if (removeError) {
              console.error("Error removing file:", removeError)
              // Continue even if remove fails
            }
          }
          
          invoice_file_url = null // Reset file URL
        } catch (fileError) {
          console.error("Error processing file removal:", fileError)
        }
      }
      
             // If we have a new file to upload
      if (selectedFile) {
        try {
          const fileExt = selectedFile.name.split('.').pop()
          const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 15)}.${fileExt}`
          const filePath = `${user.id}/${fileName}`
          
          // Use secure upload API
          const { data: { session } } = await supabase.auth.getSession()
          if (!session) {
            throw new Error('No active session')
          }

          const formData = new FormData()
          formData.append('file', selectedFile)
          formData.append('bucket', 'purchase-invoices')
          formData.append('path', filePath)

          const response = await fetch('/api/storage/upload', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${session.access_token}`,
            },
            body: formData,
          })

          if (!response.ok) {
            const error = await response.json()
            throw new Error(error.error || 'Upload failed')
          }

          const uploadResult = await response.json()
          // Store the path in a URL format for backward compatibility
          invoice_file_url = `purchase-invoices/${uploadResult.path}`
        } catch (fileError: any) {
          console.error("File upload error:", fileError)
          throw new Error(`File upload failed: ${fileError.message || 'Unknown error'}`)
        }
      }

      // Update purchase invoice
      const { data, error } = await supabase
        .from("purchase_invoices")
        .update({
          purchase_number: formData.purchase_number,
          invoice_number: formData.invoice_number,
          invoice_date: formData.invoice_date.toISOString().split('T')[0],
          supplier_id: formData.supplier_id === "_none" ? null : formData.supplier_id,
          amount: parseFloat(formData.amount),
          status: formData.status,
          payment_status: formData.payment_status,
          number_of_items: formData.number_of_items ? parseInt(formData.number_of_items) : null,
          notes: formData.notes,
          invoice_file_url,
          updated_at: new Date().toISOString(),
        })
        .eq("id", params.id)
        .eq("user_id", user.id)

      if (error) throw error

      toast({
        title: "Purchase invoice updated successfully",
        description: `Invoice #${formData.invoice_number} has been updated`,
      })
      
      router.push(`/purchases/invoices/${params.id}`)
    } catch (error: any) {
      console.error("Error updating purchase invoice:", error)
      toast({
        title: "Error updating purchase invoice",
        description: error.message || "An error occurred while updating the purchase invoice",
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  if (authLoading) {
    return <div className="flex min-h-screen items-center justify-center">Loading...</div>
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <main className="flex flex-1 flex-col gap-6 p-6 md:gap-8 md:p-8">
        <div className="flex items-center gap-4">
          <Button variant="ghost" size="icon" onClick={() => router.back()} className="h-8 w-8">
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h1 className="text-2xl font-bold tracking-tight md:text-3xl">Edit Purchase Invoice</h1>
        </div>

        {isLoading ? (
          <div className="grid gap-6">
            <Card>
              <CardHeader>
                <Skeleton className="h-8 w-48" />
                <Skeleton className="h-4 w-32" />
              </CardHeader>
              <CardContent className="grid gap-4">
                <Skeleton className="h-10 w-full" />
                <Skeleton className="h-10 w-full" />
                <Skeleton className="h-10 w-full" />
                <Skeleton className="h-20 w-full" />
              </CardContent>
            </Card>
          </div>
        ) : (
          <form onSubmit={handleSubmit}>
            <div className="grid gap-6">
              {/* Invoice Details Card */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-xl">Invoice Details</CardTitle>
                  <CardDescription>Edit details from the supplier's invoice</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid gap-4 md:grid-cols-2">
                    <div className="grid gap-2">
                      <Label htmlFor="invoice_number">
                        Invoice Number <span className="text-red-500">*</span>
                      </Label>
                      <Input
                        id="invoice_number"
                        name="invoice_number"
                        placeholder="Enter supplier's invoice number"
                        value={formData.invoice_number}
                        onChange={handleChange}
                        required
                      />
                    </div>
                    <div className="grid gap-2">
                      <Label htmlFor="invoice_date">
                        Invoice Date <span className="text-red-500">*</span>
                      </Label>
                      <Popover>
                        <PopoverTrigger asChild>
                          <Button
                            id="invoice_date"
                            variant={"outline"}
                            className={cn(
                              "w-full justify-start text-left font-normal",
                              !formData.invoice_date && "text-muted-foreground"
                            )}
                          >
                            <CalendarIcon className="mr-2 h-4 w-4" />
                            {formData.invoice_date ? format(formData.invoice_date, "PPP") : <span>Pick a date</span>}
                          </Button>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0">
                          <Calendar
                            mode="single"
                            selected={formData.invoice_date}
                            onSelect={handleDateSelect}
                            initialFocus
                          />
                        </PopoverContent>
                      </Popover>
                    </div>
                    <div className="grid gap-2">
                      <Label htmlFor="supplier_id">Supplier</Label>
                      <Select 
                        value={formData.supplier_id} 
                        onValueChange={(value) => handleSelectChange("supplier_id", value)}
                      >
                        <SelectTrigger id="supplier_id">
                          <SelectValue placeholder="Select a supplier" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="_none">None</SelectItem>
                          {isLoadingSuppliers ? (
                            <SelectItem value="_loading" disabled>
                              Loading suppliers...
                            </SelectItem>
                          ) : suppliers.length > 0 ? (
                            suppliers.map((supplier) => (
                              <SelectItem key={supplier.id} value={supplier.id}>
                                {supplier.name}
                              </SelectItem>
                            ))
                          ) : (
                            <SelectItem value="_no_suppliers" disabled>
                              No suppliers found
                            </SelectItem>
                          )}
                          <Button
                            variant="ghost"
                            className="mt-2 w-full justify-start"
                            onClick={() => router.push("/purchases/suppliers/add")}
                            type="button"
                          >
                            <PlusCircle className="mr-2 h-4 w-4" />
                            Add New Supplier
                          </Button>
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="grid gap-2">
                      <Label htmlFor="amount">
                        Amount (₹) <span className="text-red-500">*</span>
                      </Label>
                      <Input
                        id="amount"
                        name="amount"
                        type="number"
                        step="0.01"
                        min="0"
                        placeholder="Enter total amount"
                        value={formData.amount}
                        onChange={handleChange}
                        required
                      />
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Additional Information Card */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-xl">Additional Information</CardTitle>
                  <CardDescription>Edit more details about this purchase</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid gap-4 md:grid-cols-2">
                    <div className="grid gap-2">
                      <Label htmlFor="purchase_number">Purchase #</Label>
                      <Input
                        id="purchase_number"
                        name="purchase_number"
                        placeholder="Enter purchase number"
                        value={formData.purchase_number}
                        onChange={handleChange}
                      />
                    </div>
                    <div className="grid gap-2">
                      <Label htmlFor="number_of_items">Number of Items</Label>
                      <Input
                        id="number_of_items"
                        name="number_of_items"
                        type="number"
                        min="0"
                        placeholder="Enter number of items"
                        value={formData.number_of_items}
                        onChange={handleChange}
                      />
                    </div>
                    <div className="grid gap-2">
                      <Label htmlFor="status">Status</Label>
                      <Select value={formData.status} onValueChange={(value) => handleSelectChange("status", value)}>
                        <SelectTrigger id="status">
                          <SelectValue placeholder="Select status" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Received">Received</SelectItem>
                          <SelectItem value="Pending">Pending</SelectItem>
                          <SelectItem value="Cancelled">Cancelled</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="grid gap-2">
                      <Label htmlFor="payment_status">Payment Status</Label>
                      <Select
                        value={formData.payment_status}
                        onValueChange={(value) => handleSelectChange("payment_status", value)}
                      >
                        <SelectTrigger id="payment_status">
                          <SelectValue placeholder="Select payment status" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Paid">Paid</SelectItem>
                          <SelectItem value="Unpaid">Unpaid</SelectItem>
                          <SelectItem value="Partially Paid">Partially Paid</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="grid gap-2 md:col-span-2">
                      <Label htmlFor="notes">Notes</Label>
                      <Textarea
                        id="notes"
                        name="notes"
                        placeholder="Add any notes about this purchase"
                        value={formData.notes}
                        onChange={handleChange}
                        rows={3}
                      />
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Invoice File Card */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-xl">Invoice File</CardTitle>
                  <CardDescription>
                    Update or remove the invoice file attachment
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid gap-4">
                    {/* Current file display */}
                    {currentInvoiceFile && !removeCurrentFile && (
                      <div className="rounded-md border p-4">
                        <div className="flex items-start justify-between gap-4">
                          <div className="flex items-start gap-3">
                            <FileText className="mt-0.5 h-5 w-5 text-primary" />
                            <div>
                              <p className="font-medium">Current file</p>
                              <a 
                                href={currentInvoiceFile} 
                                target="_blank" 
                                rel="noopener noreferrer"
                                className="text-sm text-primary hover:underline"
                              >
                                {getFileNameFromUrl(currentInvoiceFile)}
                              </a>
                            </div>
                          </div>
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={handleRemoveCurrentFile}
                            className="h-8 text-destructive hover:bg-destructive/10"
                          >
                            <Trash2 className="mr-1 h-4 w-4" />
                            Remove
                          </Button>
                        </div>
                      </div>
                    )}

                    {/* File removal confirmation */}
                    {removeCurrentFile && currentInvoiceFile && !selectedFile && (
                      <div className="rounded-md border border-destructive p-4 bg-destructive/5">
                        <div className="flex flex-col gap-3">
                          <p className="text-sm">
                            The current file will be permanently deleted. You can upload a new file below or cancel.
                          </p>
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={handleCancelRemoveFile}
                            className="w-fit"
                          >
                            Cancel Removal
                          </Button>
                        </div>
                      </div>
                    )}

                    {/* File upload */}
                    <div className="grid gap-2">
                      <Label htmlFor="invoice_file">
                        {selectedFile 
                          ? "Replace with new file" 
                          : currentInvoiceFile && !removeCurrentFile 
                            ? "Replace file" 
                            : "Upload file"
                        }
                      </Label>
                      <div className="flex items-center gap-2">
                        <Input
                          id="invoice_file"
                          type="file"
                          accept=".pdf,.jpg,.jpeg,.png"
                          onChange={handleFileChange}
                          className="flex-1"
                        />
                      </div>
                      {selectedFile && (
                        <p className="text-xs text-muted-foreground">
                          Selected file: {selectedFile.name} ({(selectedFile.size / 1024).toFixed(2)} KB)
                        </p>
                      )}
                    </div>

                    {/* File upload zone */}
                    <div className="rounded-md border border-dashed p-6 text-center">
                      <div className="mx-auto flex max-w-[420px] flex-col items-center justify-center">
                        <FileUp className="h-10 w-10 text-muted-foreground" />
                        <p className="mt-2 text-sm font-medium">
                          Drag and drop your invoice file here, or click the button above to browse
                        </p>
                        <p className="mt-1 text-xs text-muted-foreground">
                          Supported formats: PDF, JPG, PNG
                        </p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Action Buttons */}
              <div className="flex justify-end gap-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => router.push(`/purchases/invoices/${params.id}`)}
                  disabled={isSubmitting}
                >
                  Cancel
                </Button>
                <Button type="submit" disabled={isSubmitting}>
                  {isSubmitting ? "Saving..." : "Save Changes"}
                </Button>
              </div>
            </div>
          </form>
        )}
      </main>
    </div>
  )
}
</file>

<file path="app/purchases/invoices/[id]/page.tsx">
"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { 
  ArrowLeft, 
  Calendar, 
  Download, 
  Edit, 
  FileText, 
  Package, 
  ShoppingCart, 
  Trash2,
  Tag,
  DollarSign,
  ClipboardList,
  User,
  Mail
} from "lucide-react"
import { useAuth } from "@/components/auth-provider"
import { useToast } from "@/components/ui/use-toast"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { Badge } from "@/components/ui/badge"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import { Skeleton } from "@/components/ui/skeleton"
import supabase from "@/lib/supabase"
import { Tables } from "@/lib/database.types"

type PurchaseInvoice = Tables<"purchase_invoices"> & {
  suppliers?: Tables<"suppliers"> | null
}

export default function PurchaseInvoiceDetailPage({ params }: { params: { id: string } }) {
  const { user, isLoading: authLoading } = useAuth()
  const router = useRouter()
  const { toast } = useToast()
  const [invoice, setInvoice] = useState<PurchaseInvoice | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [isDeleting, setIsDeleting] = useState(false)

  useEffect(() => {
    if (!authLoading && !user) {
      router.push("/")
      toast({
        title: "Authentication required",
        description: "Please log in to view purchase invoice details",
        variant: "destructive",
      })
      return
    }

    if (user) {
      fetchInvoice()
    }
  }, [user, authLoading, params.id])

  const fetchInvoice = async () => {
    setIsLoading(true)
    try {
      // Fetch invoice data with supplier details
      const { data, error } = await supabase
        .from("purchase_invoices")
        .select(`
          *,
          suppliers:supplier_id (
            id,
            name,
            contact_person,
            phone,
            email
          )
        `)
        .eq("id", params.id)
        .eq("user_id", user!.id)
        .single()

      if (error) {
        throw error
      }

      if (!data) {
        toast({
          title: "Invoice not found",
          description: "The requested purchase invoice does not exist or you don't have access to it",
          variant: "destructive",
        })
        router.push("/purchases?tab=invoices")
        return
      }

      setInvoice(data)
    } catch (error: any) {
      console.error("Error fetching purchase invoice:", error)
      toast({
        title: "Error loading purchase invoice",
        description: error.message || "An error occurred while loading purchase invoice details",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "Received":
        return "bg-green-100 text-green-800 hover:bg-green-100/80"
      case "Pending":
        return "bg-yellow-100 text-yellow-800 hover:bg-yellow-100/80"
      case "Cancelled":
        return "bg-red-100 text-red-800 hover:bg-red-100/80"
      default:
        return "bg-gray-100 text-gray-800 hover:bg-gray-100/80"
    }
  }

  const getPaymentStatusColor = (status: string) => {
    switch (status) {
      case "Paid":
        return "bg-green-100 text-green-800 hover:bg-green-100/80"
      case "Partially Paid":
        return "bg-blue-100 text-blue-800 hover:bg-blue-100/80"
      case "Unpaid":
        return "bg-gray-100 text-gray-800 hover:bg-gray-100/80"
      default:
        return "bg-gray-100 text-gray-800 hover:bg-gray-100/80"
    }
  }

  // Helper function to extract storage path from public URL
  const extractStoragePathFromUrl = (publicUrl: string, bucketName: string): string | null => {
    try {
      const url = new URL(publicUrl)
      const pathParts = url.pathname.split('/')
      const bucketIndex = pathParts.indexOf(bucketName)
      
      if (bucketIndex !== -1 && bucketIndex < pathParts.length - 1) {
        // Get everything after the bucket name
        return pathParts.slice(bucketIndex + 1).join('/')
      }
      return null
    } catch (error) {
      console.error('Error parsing storage URL:', error)
      return null
    }
  }

  const handleDeleteInvoice = async () => {
    if (!user || !invoice) return

    setIsDeleting(true)
    try {
      // First, delete file from storage if exists
      if (invoice.invoice_file_url) {
        try {
          const filePath = extractStoragePathFromUrl(invoice.invoice_file_url, 'purchase-invoices')
          
          if (filePath) {
            const { error: storageError } = await supabase.storage
              .from('purchase-invoices')
              .remove([filePath])
            
            if (storageError) {
              console.error("Error deleting file:", storageError)
              // Continue with invoice deletion even if file deletion fails
            }
          }
        } catch (fileError) {
          console.error("Error processing file deletion:", fileError)
          // Continue with invoice deletion even if file deletion fails
        }
      }

      // Delete invoice
      const { error } = await supabase
        .from("purchase_invoices")
        .delete()
        .eq("id", params.id)
        .eq("user_id", user.id)

      if (error) throw error

      toast({
        title: "Purchase invoice deleted",
        description: "The purchase invoice has been successfully deleted",
      })
      router.push("/purchases?tab=invoices")
    } catch (error: any) {
      console.error("Error deleting purchase invoice:", error)
      toast({
        title: "Error deleting purchase invoice",
        description: error.message || "An error occurred while deleting the purchase invoice",
        variant: "destructive",
      })
    } finally {
      setIsDeleting(false)
    }
  }

  if (authLoading) {
    return <div className="flex min-h-screen items-center justify-center">Loading...</div>
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <main className="flex flex-1 flex-col gap-6 p-6 md:gap-8 md:p-8">
        <div className="flex items-center gap-4">
          <Button variant="ghost" size="icon" onClick={() => router.back()} className="h-8 w-8">
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h1 className="text-2xl font-bold tracking-tight md:text-3xl">Purchase Invoice Details</h1>
        </div>

        {isLoading ? (
          <div className="grid gap-6">
            <Card>
              <CardHeader>
                <Skeleton className="h-8 w-48" />
                <Skeleton className="h-4 w-32" />
              </CardHeader>
              <CardContent className="grid gap-4">
                <Skeleton className="h-5 w-full" />
                <Skeleton className="h-5 w-full" />
                <Skeleton className="h-5 w-full" />
                <Skeleton className="h-20 w-full" />
              </CardContent>
            </Card>
          </div>
        ) : invoice ? (
          <div className="grid gap-6">
            <Card>
              <CardHeader className="pb-3">
                <div className="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-4">
                  <div>
                    <CardTitle className="text-2xl flex items-center gap-2">
                      Purchase #{invoice.purchase_number}
                      <Badge variant="outline" className={getStatusColor(invoice.status)}>
                        {invoice.status}
                      </Badge>
                    </CardTitle>
                    <CardDescription className="mt-1.5">
                      Invoice #{invoice.invoice_number}
                    </CardDescription>
                  </div>
                  <div className="flex gap-2">
                    <Button variant="outline" asChild>
                      <Link href={`/purchases/invoices/${params.id}/edit`}>
                        <Edit className="mr-2 h-4 w-4" />
                        Edit
                      </Link>
                    </Button>
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button variant="destructive" disabled={isDeleting}>
                          <Trash2 className="mr-2 h-4 w-4" />
                          Delete
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                          <AlertDialogDescription>
                            This will permanently delete purchase invoice #{invoice.purchase_number} and any associated files.
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>Cancel</AlertDialogCancel>
                          <AlertDialogAction
                            onClick={handleDeleteInvoice}
                            disabled={isDeleting}
                            className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                          >
                            {isDeleting ? "Deleting..." : "Delete"}
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                  </div>
                </div>
              </CardHeader>
              <Separator />
              <CardContent className="pt-6">
                <div className="grid gap-6 md:grid-cols-2">
                  {/* Invoice Details */}
                  <div className="space-y-4">
                    <h3 className="font-semibold text-lg">Invoice Details</h3>

                    <div className="flex items-start gap-3">
                      <Calendar className="mt-0.5 h-5 w-5 text-muted-foreground" />
                      <div>
                        <p className="font-medium">Invoice Date</p>
                        <p className="text-muted-foreground">
                          {new Date(invoice.invoice_date).toLocaleDateString()}
                        </p>
                      </div>
                    </div>

                    <div className="flex items-start gap-3">
                      <DollarSign className="mt-0.5 h-5 w-5 text-muted-foreground" />
                      <div>
                        <p className="font-medium">Amount</p>
                        <p className="text-muted-foreground">₹{invoice.amount.toFixed(2)}</p>
                      </div>
                    </div>

                    <div className="flex items-start gap-3">
                      <Tag className="mt-0.5 h-5 w-5 text-muted-foreground" />
                      <div>
                        <p className="font-medium">Payment Status</p>
                        <Badge variant="outline" className={getPaymentStatusColor(invoice.payment_status)}>
                          {invoice.payment_status}
                        </Badge>
                      </div>
                    </div>

                    {invoice.number_of_items && (
                      <div className="flex items-start gap-3">
                        <Package className="mt-0.5 h-5 w-5 text-muted-foreground" />
                        <div>
                          <p className="font-medium">Number of Items</p>
                          <p className="text-muted-foreground">{invoice.number_of_items}</p>
                        </div>
                      </div>
                    )}

                    {invoice.invoice_file_url && (
                      <div className="flex items-start gap-3">
                        <FileText className="mt-0.5 h-5 w-5 text-muted-foreground" />
                        <div>
                          <p className="font-medium">Invoice File</p>
                          <a 
                            href={invoice.invoice_file_url} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="flex items-center gap-1 text-primary hover:underline"
                          >
                            <Download className="h-4 w-4" />
                            View/Download Invoice
                          </a>
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Supplier Details */}
                  <div className="space-y-4">
                    <h3 className="font-semibold text-lg">Supplier Details</h3>

                    {invoice.suppliers ? (
                      <>
                        <div className="flex items-start gap-3">
                          <ShoppingCart className="mt-0.5 h-5 w-5 text-muted-foreground" />
                          <div>
                            <p className="font-medium">Supplier Name</p>
                            <Link href={`/purchases/suppliers/${invoice.supplier_id}`} className="text-primary hover:underline">
                              {invoice.suppliers.name}
                            </Link>
                          </div>
                        </div>

                        {invoice.suppliers.contact_person && (
                          <div className="flex items-start gap-3">
                            <User className="mt-0.5 h-5 w-5 text-muted-foreground" />
                            <div>
                              <p className="font-medium">Contact Person</p>
                              <p className="text-muted-foreground">{invoice.suppliers.contact_person}</p>
                            </div>
                          </div>
                        )}

                        {(invoice.suppliers.phone || invoice.suppliers.email) && (
                          <div className="flex items-start gap-3">
                            <Mail className="mt-0.5 h-5 w-5 text-muted-foreground" />
                            <div>
                              <p className="font-medium">Contact Info</p>
                              {invoice.suppliers.phone && (
                                <p className="text-muted-foreground">{invoice.suppliers.phone}</p>
                              )}
                              {invoice.suppliers.email && (
                                <p className="text-muted-foreground">{invoice.suppliers.email}</p>
                              )}
                            </div>
                          </div>
                        )}
                      </>
                    ) : (
                      <div className="rounded-md border border-dashed p-4 text-center">
                        <p className="text-sm text-muted-foreground">No supplier associated with this invoice.</p>
                      </div>
                    )}

                    {/* Notes */}
                    {invoice.notes && (
                      <div className="flex items-start gap-3 mt-6">
                        <ClipboardList className="mt-0.5 h-5 w-5 text-muted-foreground" />
                        <div>
                          <p className="font-medium">Notes</p>
                          <p className="text-muted-foreground whitespace-pre-line">{invoice.notes}</p>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </CardContent>
              <CardFooter className="border-t bg-muted/50 p-4">
                <div className="flex w-full items-center justify-between text-sm">
                  <div className="text-muted-foreground">
                    Added on {new Date(invoice.created_at || "").toLocaleDateString()}
                  </div>
                  {invoice.updated_at && invoice.updated_at !== invoice.created_at && (
                    <div className="text-muted-foreground">
                      Last updated on {new Date(invoice.updated_at).toLocaleDateString()}
                    </div>
                  )}
                </div>
              </CardFooter>
            </Card>

            <div className="mt-4 flex justify-between">
              <Button variant="outline" onClick={() => router.push("/purchases?tab=invoices")}>
                Back to Invoices
              </Button>
              {invoice.suppliers && (
                <Button variant="outline" asChild>
                  <Link href={`/purchases/suppliers/${invoice.supplier_id}`}>
                    View Supplier
                  </Link>
                </Button>
              )}
            </div>
          </div>
        ) : (
          <div className="flex flex-col items-center justify-center py-12">
            <h3 className="mb-2 text-lg font-medium">Purchase Invoice Not Found</h3>
            <p className="mb-6 text-center text-sm text-gray-500">
              The requested purchase invoice does not exist or you don't have access to it.
            </p>
            <Button asChild>
              <Link href="/purchases?tab=invoices">
                Back to Invoices
              </Link>
            </Button>
          </div>
        )}
      </main>
    </div>
  )
}
</file>

<file path="app/purchases/layout.tsx">
"use client"

import { useEffect } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { ChevronDown, FileText, Home, LogOut, Lock, User } from "lucide-react"
import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { useAuth } from "@/components/auth-provider"
import { useToast } from "@/components/ui/use-toast"
import supabase from "@/lib/supabase"

export default function PurchasesLayout({ children }: { children: React.ReactNode }) {
  const { user, isLoading } = useAuth()
  const router = useRouter()
  const { toast } = useToast()

  useEffect(() => {
    if (!isLoading && !user) {
      router.push("/")
      toast({
        title: "Authentication required",
        description: "Please log in to access the purchases",
        variant: "destructive",
      })
    }
  }, [user, isLoading, router, toast])

  const handleLogout = async () => {
    await supabase.auth.signOut()
    router.push("/")
    toast({
      title: "Logged out",
      description: "You have been successfully logged out",
    })
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <div className="flex items-center gap-2 font-heading font-semibold">
          <FileText className="h-6 w-6 text-primary" />
          <span className="text-xl">Sethiya Gold</span>
        </div>
        <nav className="ml-auto flex items-center gap-4">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm">
              <Home className="mr-2 h-4 w-4" />
              Dashboard
            </Button>
          </Link>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="sm" className="flex items-center gap-1">
                <User className="h-4 w-4" />
                <span>{user?.user_metadata?.full_name || user?.email}</span>
                <ChevronDown className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem asChild>
                <Link href="/profile">
                  <User className="mr-2 h-4 w-4" />
                  <span>View Profile</span>
                </Link>
              </DropdownMenuItem>
              <DropdownMenuItem>
                <Lock className="mr-2 h-4 w-4" />
                <span>Change Password</span>
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={handleLogout}>
                <LogOut className="mr-2 h-4 w-4" />
                <span>Logout</span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </nav>
      </header>
      {children}
      <footer className="mt-auto border-t py-4 text-center text-sm text-muted-foreground">
        <p>© {new Date().getFullYear()} Sethiya Gold. All rights reserved.</p>
      </footer>
    </div>
  )
}
</file>

<file path="app/purchases/page.tsx">
"use client"

import { useState } from "react"
import Link from "next/link"
import { useAuth } from "@/components/auth-provider"
import { useToast } from "@/components/ui/use-toast"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Building, Plus, Search, ArrowDownUp, FileText, ShoppingCart, Edit } from "lucide-react"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { useEffect } from "react"
import { useRouter } from "next/navigation"
import supabase from "@/lib/supabase"
import { Tables } from "@/lib/database.types"
import SupplierCard from "./components/supplier-card"

type PurchaseInvoice = Tables<"purchase_invoices"> & {
  suppliers?: {
    name: string
  } | null
}

type Supplier = Tables<"suppliers">

export default function PurchasesPage() {
  const { user, isLoading } = useAuth()
  const router = useRouter()
  const { toast } = useToast()
  const [activeTab, setActiveTab] = useState("invoices")
  const [invoiceSearch, setInvoiceSearch] = useState("")
  const [statusFilter, setStatusFilter] = useState("all")
  const [paymentStatusFilter, setPaymentStatusFilter] = useState("all")
  const [purchaseInvoices, setPurchaseInvoices] = useState<PurchaseInvoice[]>([])
  const [suppliers, setSuppliers] = useState<Supplier[]>([])
  const [supplierSearch, setSupplierSearch] = useState("")
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (!isLoading && !user) {
      router.push("/")
      toast({
        title: "Authentication required",
        description: "Please log in to access the purchases page",
        variant: "destructive",
      })
      return
    }

    if (user) {
      fetchData()
    }
  }, [user, isLoading, router, toast, activeTab])

  const fetchData = async () => {
    if (!user) return
    
    setLoading(true)
    try {
      if (activeTab === "invoices") {
        const { data: invoices, error: invoicesError } = await supabase
          .from("purchase_invoices")
          .select("*, suppliers(name)")
          .eq("user_id", user.id)

        if (invoicesError) throw invoicesError
        setPurchaseInvoices(invoices as PurchaseInvoice[] || [])
      } else if (activeTab === "suppliers") {
        const { data: suppliersData, error: suppliersError } = await supabase
          .from("suppliers")
          .select("*")
          .eq("user_id", user.id)

        if (suppliersError) throw suppliersError
        setSuppliers(suppliersData as Supplier[] || [])
      }
    } catch (error: any) {
      console.error("Error fetching data:", error)
      toast({
        title: "Error fetching data",
        description: error.message || "An error occurred",
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  // Filter purchase invoices based on search term and filters
  const filteredInvoices = purchaseInvoices.filter((invoice) => {
    const matchesSearch =
      invoice.purchase_number.toLowerCase().includes(invoiceSearch.toLowerCase()) ||
      invoice.invoice_number.toLowerCase().includes(invoiceSearch.toLowerCase()) ||
      (invoice.suppliers?.name || "").toLowerCase().includes(invoiceSearch.toLowerCase())

    const matchesStatus = statusFilter === "all" || invoice.status === statusFilter
    const matchesPaymentStatus = paymentStatusFilter === "all" || invoice.payment_status === paymentStatusFilter

    return matchesSearch && matchesStatus && matchesPaymentStatus
  })

  // Filter suppliers based on search term
  const filteredSuppliers = suppliers.filter((supplier) =>
    supplier.name.toLowerCase().includes(supplierSearch.toLowerCase())
  )

  // Show loading state
  if (isLoading || !user) {
    return <div className="flex min-h-screen items-center justify-center">Loading...</div>
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <main className="flex flex-1 flex-col gap-6 p-6 md:gap-8 md:p-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold tracking-tight">Purchases</h1>
          </div>
          <div className="flex items-center gap-2">
            <Button asChild variant="default">
              <Link href="/purchases/invoices/add">
                <FileText className="mr-2 h-4 w-4" />
                New Invoice
              </Link>
            </Button>
            <Button asChild variant="outline">
              <Link href="/purchases/suppliers/add">
                <Building className="mr-2 h-4 w-4" />
                Add Supplier
              </Link>
            </Button>
          </div>
        </div>

        <Tabs defaultValue="invoices" onValueChange={setActiveTab} value={activeTab}>
          <TabsList className="grid w-full max-w-md grid-cols-2">
            <TabsTrigger value="invoices">Invoices</TabsTrigger>
            <TabsTrigger value="suppliers">Suppliers</TabsTrigger>
          </TabsList>

          <TabsContent value="invoices" className="mt-6">
            {/* Search and filters for Invoices */}
            <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
              <div className="relative flex-1 md:max-w-sm">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
                <Input
                  placeholder="Search purchases..."
                  className="pl-8"
                  value={invoiceSearch}
                  onChange={(e) => setInvoiceSearch(e.target.value)}
                />
              </div>
              <div className="flex flex-wrap gap-2">
                <Select value={statusFilter} onValueChange={setStatusFilter}>
                  <SelectTrigger className="w-[140px]">
                    <SelectValue placeholder="All Statuses" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Statuses</SelectItem>
                    <SelectItem value="Received">Received</SelectItem>
                    <SelectItem value="Pending">Pending</SelectItem>
                    <SelectItem value="Cancelled">Cancelled</SelectItem>
                  </SelectContent>
                </Select>
                <Select value={paymentStatusFilter} onValueChange={setPaymentStatusFilter}>
                  <SelectTrigger className="w-[180px]">
                    <SelectValue placeholder="All Payment Statuses" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Payment Statuses</SelectItem>
                    <SelectItem value="Paid">Paid</SelectItem>
                    <SelectItem value="Unpaid">Unpaid</SelectItem>
                    <SelectItem value="Partially Paid">Partially Paid</SelectItem>
                  </SelectContent>
                </Select>
                <Button variant="outline" size="icon" onClick={fetchData}>
                  <ArrowDownUp className="h-4 w-4" />
                </Button>
              </div>
            </div>

            {/* Invoices Table */}
            <div className="mt-6 rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Purchase #</TableHead>
                    <TableHead>Date</TableHead>
                    <TableHead>Supplier</TableHead>
                    <TableHead>Invoice #</TableHead>
                    <TableHead>Amount (₹)</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Payment Status</TableHead>
                    <TableHead>Items</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {loading ? (
                    <TableRow>
                      <TableCell colSpan={9} className="h-24 text-center">
                        Loading...
                      </TableCell>
                    </TableRow>
                  ) : filteredInvoices.length > 0 ? (
                    filteredInvoices.map((invoice) => (
                      <TableRow key={invoice.id}>
                        <TableCell className="font-medium">{invoice.purchase_number}</TableCell>
                        <TableCell>{new Date(invoice.invoice_date).toLocaleDateString()}</TableCell>
                        <TableCell>{invoice.suppliers?.name || "-"}</TableCell>
                        <TableCell>{invoice.invoice_number}</TableCell>
                        <TableCell>₹{invoice.amount.toFixed(2)}</TableCell>
                        <TableCell>
                          <span
                            className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${
                              invoice.status === "Received"
                                ? "bg-green-100 text-green-800"
                                : invoice.status === "Pending"
                                ? "bg-yellow-100 text-yellow-800"
                                : "bg-red-100 text-red-800"
                            }`}
                          >
                            {invoice.status}
                          </span>
                        </TableCell>
                        <TableCell>
                          <span
                            className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${
                              invoice.payment_status === "Paid"
                                ? "bg-green-100 text-green-800"
                                : invoice.payment_status === "Partially Paid"
                                ? "bg-blue-100 text-blue-800"
                                : "bg-gray-100 text-gray-800"
                            }`}
                          >
                            {invoice.payment_status}
                          </span>
                        </TableCell>
                        <TableCell>{invoice.number_of_items || "-"}</TableCell>
                        <TableCell className="text-right">
                          <div className="flex justify-end gap-2">
                            <Button
                              variant="ghost"
                              size="icon"
                              onClick={() => router.push(`/purchases/invoices/${invoice.id}`)}
                              title="View"
                            >
                              <FileText className="h-4 w-4" />
                              <span className="sr-only">View</span>
                            </Button>
                            <Button
                              variant="ghost"
                              size="icon"
                              onClick={() => router.push(`/purchases/invoices/${invoice.id}/edit`)}
                              title="Edit"
                            >
                              <Edit className="h-4 w-4" />
                              <span className="sr-only">Edit</span>
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={9} className="h-24 text-center">
                        No purchase invoices found.
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </div>
          </TabsContent>

          <TabsContent value="suppliers" className="mt-6">
            {/* Search for Suppliers */}
            <div className="relative mb-6 md:max-w-sm">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
              <Input
                placeholder="Search suppliers..."
                className="pl-8"
                value={supplierSearch}
                onChange={(e) => setSupplierSearch(e.target.value)}
              />
            </div>

            {/* Suppliers List */}
            {loading ? (
              <div className="flex h-24 items-center justify-center">Loading...</div>
            ) : filteredSuppliers.length > 0 ? (
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {filteredSuppliers.map((supplier) => (
                  <SupplierCard key={supplier.id} supplier={supplier} />
                ))}
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center py-12">
                <Building className="mb-4 h-12 w-12 text-gray-400" />
                <h3 className="mb-2 text-lg font-medium">No Suppliers Found</h3>
                <p className="mb-6 text-center text-sm text-gray-500">
                  Add your first supplier to get started with managing your supply chain.
                </p>
                <Button asChild>
                  <Link href="/purchases/suppliers/add">
                    <Plus className="mr-2 h-4 w-4" />
                    Add Supplier
                  </Link>
                </Button>
              </div>
            )}
          </TabsContent>
        </Tabs>
      </main>
    </div>
  )
}
</file>

<file path="app/resources/layout.tsx">
"use client"

import type React from "react"
import Link from "next/link"
import { usePathname } from "next/navigation"
import { FileText, Home } from "lucide-react"

import { Footer } from "@/app/components/footer/footer"

import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarProvider,
  SidebarTrigger,
} from "@/components/ui/sidebar"
import { Button } from "@/components/ui/button"

export default function ResourcesLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  const pathname = usePathname()

  // Navigation items for the resources section
  const resourceLinks = [
    {
      title: "Overview",
      href: "/resources",
      exact: true,
    },
    {
      title: "Documentation",
      href: "/resources/documentation",
    },
    {
      title: "Tutorials",
      href: "/resources/tutorials",
    },
    {
      title: "Blog",
      href: "/resources/blog",
    },
    {
      title: "Contact Us",
      href: "/resources/contact-us",
    },
    {
      title: "FAQ",
      href: "/resources/faq",
    },
    {
      title: "Terms & Conditions",
      href: "/resources/terms-and-conditions",
    },
  ]

  return (
    <SidebarProvider>
      <div className="flex min-h-screen w-full flex-col">
        <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
          <Link href="/" className="flex items-center gap-2 font-heading font-semibold">
            <FileText className="h-6 w-6 text-primary" />
            <span className="text-xl">Sethiya Gold</span>
          </Link>
          <nav className="ml-auto flex items-center gap-4">
            <Link href="/dashboard">
              <Button variant="ghost" size="sm">
                <Home className="mr-2 h-4 w-4" />
                Dashboard
              </Button>
            </Link>
            <SidebarTrigger className="md:hidden" />
          </nav>
        </header>

        <div className="flex flex-1">
          <Sidebar className="border-r">
            <SidebarHeader className="flex items-center px-4 py-2">
              <h2 className="text-lg font-semibold text-amber-800">Resources</h2>
            </SidebarHeader>
            <SidebarContent>
              <SidebarMenu>
                {resourceLinks.map((link) => (
                  <SidebarMenuItem key={link.href}>
                    <SidebarMenuButton
                      asChild
                      isActive={
                        link.exact
                          ? pathname === link.href
                          : pathname === link.href || pathname.startsWith(`${link.href}/`)
                      }
                    >
                      <Link href={link.href}>
                        <span>{link.title}</span>
                      </Link>
                    </SidebarMenuButton>
                  </SidebarMenuItem>
                ))}
              </SidebarMenu>
            </SidebarContent>
            <SidebarFooter>
              <div className="p-4">
                <div className="rounded-md bg-amber-50 p-3 text-sm">
                  <p className="font-medium text-amber-800">Need Help?</p>
                  <p className="mt-1 text-amber-600">Contact our support team for personalized assistance</p>
                  <Button className="mt-2 w-full bg-amber-600 hover:bg-amber-700" size="sm" asChild>
                    <Link href="/resources/contact-us">Contact Support</Link>
                  </Button>
                </div>
              </div>
            </SidebarFooter>
          </Sidebar>

          <div className="flex flex-1 flex-col">
            <main className="flex-1 p-6 md:p-8">{children}</main>
            <Footer />
          </div>
        </div>
      </div>
    </SidebarProvider>
  )
}
</file>

<file path="app/stock/stock-category-card.tsx">
import Link from "next/link"
import Image from "next/image"

import { Card, CardContent, CardFooter } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"

interface StockCategoryCardProps {
  category: {
    name: string
    count: number
    totalValue: number
    images: string[]
  }
}

export function StockCategoryCard({ category }: StockCategoryCardProps) {
  // Create a small image gallery for the category
  const imagesToShow = category.images.slice(0, 4);
  const defaultImage = "/placeholder.svg?height=40&width=40";
  
  return (
    <Link href={`/stock?category=${category.name}`}>
      <Card className="overflow-hidden transition-all hover:border-primary/30 hover:shadow-md">
        <CardContent className="p-6">
          <div className="flex items-start justify-between">
            <div>
              <h3 className="font-medium">{category.name}</h3>
              <p className="text-sm text-muted-foreground">
                {category.count} {category.count === 1 ? "item" : "items"}
              </p>
              <p className="text-sm font-medium mt-1">
                ₹{category.totalValue.toLocaleString()}
              </p>
            </div>
            <div className="grid grid-cols-2 gap-1 w-20">
              {imagesToShow.map((image, index) => (
                <div key={index} className="relative h-10 w-10 rounded-md overflow-hidden bg-muted">
                  <Image
                    src={image || defaultImage}
                    alt={`${category.name} item ${index + 1}`}
                    fill
                    className="object-cover"
                  />
                </div>
              ))}
              {imagesToShow.length === 0 && (
                <div className="relative h-10 w-10 rounded-md overflow-hidden bg-muted">
                  <Image
                    src={defaultImage}
                    alt={category.name}
                    fill
                    className="object-cover"
                  />
                </div>
              )}
            </div>
          </div>
        </CardContent>
        <CardFooter className="border-t bg-muted/50 p-3">
          <Badge variant="outline" className="w-full justify-center">
            View {category.name} Items
          </Badge>
        </CardFooter>
      </Card>
    </Link>
  )
}
</file>

<file path="app/stock/stock-item-card.tsx">
import Link from "next/link"
import Image from "next/image"
import { Eye, Edit } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"

interface StockItemCardProps {
  item: {
    id: string
    name: string
    category: string
    material: string
    purity: string
    weight: number
    makingCharges: number
    price: number
    stock: number
    images: string[]
    description: string
    dateAdded: Date
    is_sold?: boolean
    sold_at?: string | null
  }
}

export function StockItemCard({ item }: StockItemCardProps) {
  return (
    <Card className="overflow-hidden transition-all hover:border-primary/30 hover:shadow-md">
      <CardHeader className="p-0">
        <div className="relative aspect-square w-full overflow-hidden">
          <Image
            src={item.images[0] || "/placeholder.svg"}
            alt={item.name}
            fill
            className="object-cover transition-transform hover:scale-105"
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
          />
          <div className="absolute right-2 top-2">
            <Badge variant="secondary" className="bg-background/80 backdrop-blur-sm">
              {item.category}
            </Badge>
          </div>
          <div className="absolute bottom-2 left-2">
            <Badge 
              variant={item.is_sold ? "destructive" : "outline"} 
              className="bg-background/80 backdrop-blur-sm"
            >
              {item.is_sold ? "Sold" : "In Stock"}
            </Badge>
          </div>
        </div>
      </CardHeader>
      <CardContent className="p-4">
        <div className="mb-2 flex items-center justify-between">
          <h3 className="font-medium line-clamp-1">{item.name}</h3>
        </div>
        <div className="mb-2 text-sm text-muted-foreground line-clamp-2">{item.description}</div>
        <div className="grid grid-cols-2 gap-2 text-sm">
          <div>
            <p className="text-xs text-muted-foreground">ID</p>
            <p className="font-medium">{item.id}</p>
          </div>
          <div>
            <p className="text-xs text-muted-foreground">Material</p>
            <p className="font-medium">
              {item.material} {item.purity}
            </p>
          </div>
          <div>
            <p className="text-xs text-muted-foreground">Weight</p>
            <p className="font-medium">{item.weight}g</p>
          </div>
          <div>
            <p className="text-xs text-muted-foreground">Price</p>
            <p className="font-medium">₹{item.price.toLocaleString()}</p>
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex justify-between border-t bg-muted/50 p-2">
        <Link href={`/stock/${item.id}`}>
          <Button variant="ghost" size="sm" className="h-8 gap-1">
            <Eye className="h-3.5 w-3.5" />
            <span>View</span>
          </Button>
        </Link>
        <Link href={`/stock/${item.id}/edit`}>
          <Button variant="ghost" size="sm" className="h-8 gap-1">
            <Edit className="h-3.5 w-3.5" />
            <span>Edit</span>
          </Button>
        </Link>
      </CardFooter>
    </Card>
  )
}
</file>

<file path="app/stock/stock-item-table.tsx">
"use client"

import { useState } from "react"
import Link from "next/link"
import { ChevronDown, Eye, Plus } from "lucide-react"
import { useRouter } from "next/navigation"

import { Button } from "@/components/ui/button"
import { Checkbox } from "@/components/ui/checkbox"
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Input } from "@/components/ui/input"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"

interface StockItem {
  id: string
  name: string
  category: string
  material: string
  weight: number
  purchasePrice: number
  supplier?: string
  is_sold?: boolean
  sold_at?: string | null
}

interface StockItemTableProps {
  items: StockItem[]
}

export function StockItemTable({ items }: StockItemTableProps) {
  const router = useRouter()
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState<"all" | "in-stock" | "sold">("all")
  
  // Filter items based on search term and status filter
  const filteredItems = items.filter(item => {
    // Apply text search filter
    const matchesSearch = searchTerm === "" || 
      item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.category.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.material.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.id.toLowerCase().includes(searchTerm.toLowerCase());
    
    // Apply status filter
    const matchesStatus = 
      statusFilter === "all" || 
      (statusFilter === "in-stock" && !item.is_sold) ||
      (statusFilter === "sold" && item.is_sold);
    
    return matchesSearch && matchesStatus;
  });

  // Calculate totals
  const totalItems = filteredItems.length;
  const totalValue = filteredItems.reduce((sum, item) => sum + item.purchasePrice, 0);
  const totalWeight = filteredItems.reduce((sum, item) => sum + item.weight, 0);

  return (
    <div className="w-full">
      <div className="flex items-center justify-between py-4">
        <div className="flex items-center gap-2">
          <Input
            placeholder="Search items..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="max-w-sm"
          />
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" className="ml-auto">
                Filter
                <ChevronDown className="ml-2 h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Filter by</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuLabel>Status</DropdownMenuLabel>
              <DropdownMenuCheckboxItem
                checked={statusFilter === "all"}
                onCheckedChange={() => setStatusFilter("all")}
              >
                All Items
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={statusFilter === "in-stock"}
                onCheckedChange={() => setStatusFilter("in-stock")}
              >
                In Stock
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={statusFilter === "sold"}
                onCheckedChange={() => setStatusFilter("sold")}
              >
                Sold
              </DropdownMenuCheckboxItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
        <div className="flex items-center gap-2">
          <Link href="/stock/add">
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              Add Item
            </Button>
          </Link>
        </div>
      </div>
      
      <div className="flex justify-between py-2 text-sm text-muted-foreground">
        <div>Showing {filteredItems.length} items</div>
        <div className="space-x-4">
          <span>Total Value: ₹{totalValue.toLocaleString()}</span>
          <span>Total Weight: {totalWeight.toFixed(2)}g</span>
        </div>
      </div>
      
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Item</TableHead>
              <TableHead>Category</TableHead>
              <TableHead>Material</TableHead>
              <TableHead>Weight</TableHead>
              <TableHead>Price</TableHead>
              <TableHead>Status</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredItems.length === 0 ? (
              <TableRow>
                <TableCell colSpan={7} className="h-24 text-center">
                  No items found.
                </TableCell>
              </TableRow>
            ) : (
              filteredItems.map((item) => (
                <TableRow key={item.id}>
                  <TableCell className="font-medium">{item.name}</TableCell>
                  <TableCell>{item.category}</TableCell>
                  <TableCell>{item.material}</TableCell>
                  <TableCell>{item.weight}g</TableCell>
                  <TableCell>₹{item.purchasePrice.toLocaleString()}</TableCell>
                  <TableCell>
                    <Badge variant={item.is_sold ? "destructive" : "outline"}>
                      {item.is_sold ? "Sold" : "In Stock"}
                    </Badge>
                  </TableCell>
                  <TableCell className="text-right">
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => router.push(`/stock/${item.id}`)}
                    >
                      <Eye className="h-4 w-4" />
                      <span className="sr-only">View</span>
                    </Button>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  )
}
</file>

<file path="app/layout.tsx">
import type { Metadata } from "next"
import { Inter } from "next/font/google"
import "./globals.css"
import { ThemeProvider } from "@/components/theme-provider"
import { AuthProvider } from "@/components/auth-provider"
import { NotificationProvider } from '@/lib/providers/notification-provider'
import { Toaster } from "@/components/ui/toaster"
import { cn } from "@/lib/utils"

const inter = Inter({ subsets: ["latin"] })

export const metadata: Metadata = {
  title: "Sethiya Gold - Premium Jewelry Management",
  description: "A premium invoicing system for Indian jewelry shops",
  generator: 'v0.dev'
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="en" suppressHydrationWarning className={inter.className}>
      <body className={cn('min-h-screen bg-background antialiased')}>
        <ThemeProvider>
          <AuthProvider>
            <NotificationProvider>
              {children}
              <Toaster />
            </NotificationProvider>
          </AuthProvider>
        </ThemeProvider>
      </body>
    </html>
  )
}
</file>

<file path="components/ui/alert-dialog.tsx">
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="components/ui/button.tsx">
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { motion } from "framer-motion"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90 shadow-sm hover:shadow",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-sm hover:shadow",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground hover:border-accent",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
  noAnimation?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, noAnimation = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    
    if (noAnimation || asChild) {
      return (
        <Comp
          className={cn(buttonVariants({ variant, size, className }))}
          ref={ref}
          {...props}
        />
      )
    }

    return (
      <motion.button
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
        transition={{ duration: 0.12 }}
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-2xl border bg-card text-card-foreground shadow-sm hover:shadow-md transition-all duration-300",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

const Skeleton = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => {
  return (
    <div
      className={cn(
        "relative overflow-hidden rounded-md bg-muted/50",
        "before:absolute before:inset-0",
        "before:bg-gradient-to-r before:from-transparent before:via-white/20 before:to-transparent",
        "animate-shimmer",
        className
      )}
      style={{
        backgroundSize: "200% 100%",
        backgroundImage: "linear-gradient(90deg, hsl(var(--muted)/0.5) 0%, hsl(var(--muted)) 20%, hsl(var(--muted)/0.5) 40%, hsl(var(--muted)/0.5) 100%)",
      }}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="lib/providers/notification-provider.tsx">
'use client'

import React, { createContext, useContext, useEffect, useState } from 'react'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { Tables } from '@/lib/database.types'
import { toast } from 'sonner'
import useUserSettings from '@/lib/hooks/useUserSettings'

export type Notification = Tables<'notifications'>

type NotificationContextType = {
  notifications: Notification[]
  unreadCount: number
  markAsRead: (id: string) => Promise<void>
  markAllAsRead: () => Promise<void>
  refreshNotifications: () => Promise<void>
}

const NotificationContext = createContext<NotificationContextType | undefined>(undefined)

export function NotificationProvider({ children }: { children: React.ReactNode }) {
  const supabase = createClientComponentClient()
  const [notifications, setNotifications] = useState<Notification[]>([])
  const [unreadCount, setUnreadCount] = useState(0)
  const { settings } = useUserSettings()
  
  const fetchNotifications = async () => {
    const { data: user } = await supabase.auth.getUser()
    if (!user.user) return
    
    const { data, error } = await supabase
      .from('notifications')
      .select('*')
      .eq('user_id', user.user.id)
      .order('created_at', { ascending: false })
    
    if (error) {
      console.error('Error fetching notifications:', error)
      return
    }
    
    setNotifications(data || [])
    setUnreadCount(data?.filter(n => !n.read_at).length || 0)
  }
  
  const markAsRead = async (id: string) => {
    const { data: user } = await supabase.auth.getUser()
    if (!user.user) return
    
    const { error } = await supabase
      .from('notifications')
      .update({ read_at: new Date().toISOString() })
      .eq('id', id)
      .eq('user_id', user.user.id)
    
    if (error) {
      console.error('Error marking notification as read:', error)
      return
    }
    
    await fetchNotifications()
  }
  
  const markAllAsRead = async () => {
    const { data: user } = await supabase.auth.getUser()
    if (!user.user) return
    
    const unreadIds = notifications.filter(n => !n.read_at).map(n => n.id)
    if (unreadIds.length === 0) return
    
    const { error } = await supabase
      .from('notifications')
      .update({ read_at: new Date().toISOString() })
      .in('id', unreadIds)
      .eq('user_id', user.user.id)
    
    if (error) {
      console.error('Error marking all notifications as read:', error)
      return
    }
    
    await fetchNotifications()
  }
  
  // Setup real-time subscription for new notifications
  useEffect(() => {
    let channel: any = null
    
    const setupSubscription = async () => {
      await fetchNotifications()
      
      const { data: user } = await supabase.auth.getUser()
      if (!user.user) return
      
      // Subscribe only to notifications for the current user
      channel = supabase
        .channel(`notifications-channel-${user.user.id}`)
        .on(
          'postgres_changes',
          {
            event: 'INSERT',
            schema: 'public',
            table: 'notifications',
            filter: `user_id=eq.${user.user.id}`
          },
          async (payload) => {
            const newNotification = payload.new as Notification
            
            // Show toast notification
            toast(newNotification.title, {
              description: newNotification.message,
              action: newNotification.action_url ? {
                label: 'View',
                onClick: () => {
                  window.location.href = newNotification.action_url as string
                }
              } : undefined,
            })
            
            // Refresh notifications list
            await fetchNotifications()
          }
        )
        .subscribe()
    }
    
    setupSubscription()
    
    return () => {
      if (channel) {
        supabase.removeChannel(channel)
      }
    }
  }, [])
  
  // Request push notification permission if enabled in settings
  useEffect(() => {
    const requestPushPermission = async () => {
      if (settings?.notifications_push_enabled && 'Notification' in window) {
        try {
          const permission = await Notification.requestPermission()
          if (permission !== 'granted') {
            console.log('Push notification permission not granted')
          }
        } catch (error) {
          console.error('Error requesting notification permission:', error)
        }
      }
    }
    
    if (settings) {
      requestPushPermission()
    }
  }, [settings])
  
  return (
    <NotificationContext.Provider
      value={{
        notifications,
        unreadCount,
        markAsRead,
        markAllAsRead,
        refreshNotifications: fetchNotifications
      }}
    >
      {children}
    </NotificationContext.Provider>
  )
}

export function useNotifications() {
  const context = useContext(NotificationContext)
  if (context === undefined) {
    throw new Error('useNotifications must be used within a NotificationProvider')
  }
  return context
}
</file>

<file path="lib/supabase.ts">
import { createClient as createSupabaseClient } from '@supabase/supabase-js';
import type { Database } from './database.types';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

// Create Supabase client with proper configuration for Next.js
// This ensures cookies and localStorage are properly handled
const supabase = createSupabaseClient<Database>(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: typeof window !== 'undefined' ? window.localStorage : undefined,
  },
});

export default supabase;
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules

# next.js
/.next/
/out/

# production
/build

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# cursor
.cursor/
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    unoptimized: true,
  },
  async headers() {
    return [
      {
        source: '/:path*',
        headers: [
          {
            key: 'X-DNS-Prefetch-Control',
            value: 'on'
          },
          {
            key: 'Strict-Transport-Security',
            value: 'max-age=63072000; includeSubDomains; preload'
          },
          {
            key: 'X-Frame-Options',
            value: 'SAMEORIGIN'
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff'
          },
          {
            key: 'X-XSS-Protection',
            value: '1; mode=block'
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin'
          },
          {
            key: 'Permissions-Policy',
            value: 'camera=(), microphone=(), geolocation=()'
          }
        ],
      },
    ]
  },
}

export default nextConfig
</file>

<file path="README.md">
# Sethiya Gold - Jewelry Shop Management System

## Overview

Sethiya Gold is a comprehensive management system designed specifically for Indian jewelry shops. This Next.js application helps jewelry store owners streamline their business operations with robust invoicing, inventory management, customer relationship management, and reporting capabilities.

## Features

### 📋 Customer Management
- Store and manage detailed customer profiles with contact information
- Track purchase history and customer preferences
- Support for customer-specific pricing and discounts

### 💍 Inventory Tracking
- Real-time inventory updates
- Categorize items by type (rings, necklaces, etc.), material (gold, silver), and price range
- Detailed product information including images, weight, material, and gemstone details

### 📝 Advanced Invoicing
- Generate professional invoices with customizable templates
- Include GST calculations and tax compliance features
- Support for item-specific pricing and discounts
- Print and digital invoice options

### 📦 Order Management
- Track customer orders from placement to delivery
- Handle custom orders with specific requirements (engraving, resizing)
- Provide status updates to customers

### 📊 Analytics & Reporting
- Generate detailed sales reports (daily, monthly, yearly)
- Inventory turnover analysis
- Customer buying pattern insights
- Business performance dashboards

### 💾 Data Backup & Sync
- Cloud sync option with Supabase
- Local storage option for offline functionality
- Secure data export for backup purposes

## Tech Stack

- **Frontend**: Next.js 15, React 19, TypeScript
- **Styling**: Tailwind CSS, Shadcn UI components
- **State Management**: React Context, React Hook Form
- **Authentication**: Supabase Auth
- **Database**: Supabase
- **PDF Generation**: @react-pdf/renderer
- **Icons**: Lucide React
- **Date Handling**: date-fns, React Day Picker
- **Form Validation**: Zod, @hookform/resolvers

## Getting Started

### Prerequisites

- Node.js 18 or higher
- PNPM package manager (v10.10.0+)

### Installation

1. Clone the repository:
   ```
   git clone https://github.com/MechanicalMaster/Invoicing.git
   cd Invoicing
   ```

2. Install dependencies:
   ```
   pnpm install
   ```

3. Create a `.env` file in the root directory with your Supabase credentials:
   ```
   NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
   NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
   ```

4. Start the development server:
   ```
   pnpm dev
   ```

5. Open your browser and navigate to `http://localhost:3000`

### Building for Production

```
pnpm build
pnpm start
```

## Key Workflows

### Creating an Invoice
1. Navigate to "Create Invoice" from the dashboard
2. Select a customer or add a new one
3. Add jewelry items from inventory or as custom entries
4. Apply taxes and discounts
5. Preview, print, or send the invoice

### Managing Inventory
1. Browse inventory by categories
2. Add new items with detailed specifications
3. Update stock quantities and pricing
4. Track inventory history and valuations

### Customer Bookings
1. Create new customer bookings with delivery dates
2. Collect advance payments
3. Track booking status
4. Convert bookings to invoices upon completion

## Roadmap

- [ ] Multi-language support with regional Indian languages
- [ ] Integration with accounting software (Tally, QuickBooks)
- [ ] E-commerce showcase feature
- [ ] Mobile app with push notifications
- [ ] AI-powered inventory recommendations
- [ ] Voice-activated assistance

## License

This project is proprietary software. All rights reserved.

## Support

For support, please contact [support@sethiyagold.com](mailto:support@sethiyagold.com)

---

Made with ❤️ for Indian jewelry businesses
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
        },
        gold: {
          50: "hsl(var(--gold-50))",
          100: "hsl(var(--gold-100))",
          200: "hsl(var(--gold-200))",
          300: "hsl(var(--gold-300))",
          400: "hsl(var(--gold-400))",
          500: "hsl(var(--gold-500))",
          600: "hsl(var(--gold-600))",
        },
      },
      fontFamily: {
        heading: ['ui-serif', 'Georgia', 'Cambria', 'Times New Roman', 'Times', 'serif'],
        body: ['ui-sans-serif', 'system-ui', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'sans-serif'],
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
        xl: "calc(var(--radius) + 4px)",
        '2xl': "calc(var(--radius) + 8px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
        shimmer: {
          '0%': { backgroundPosition: '-1000px 0' },
          '100%': { backgroundPosition: '1000px 0' },
        },
        "fade-in": {
          from: { opacity: 0 },
          to: { opacity: 1 },
        },
        "slide-up": {
          from: { transform: 'translateY(12px)', opacity: 0 },
          to: { transform: 'translateY(0)', opacity: 1 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        shimmer: "shimmer 2s infinite",
        "fade-in": "fade-in 0.6s ease-out",
        "slide-up": "slide-up 0.6s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
</file>

<file path="app/customers/page.tsx">
"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { PlusCircle, Search, FileText, Home, Filter, ArrowUpDown } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { CustomerCard } from "@/app/customers/customer-card"
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { useAuth } from "@/components/auth-provider"
import supabase from "@/lib/supabase"
import { toast } from "@/components/ui/use-toast"

export default function CustomersPage() {
  const { user } = useAuth();
  const [customers, setCustomers] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [filter, setFilter] = useState("all");

  // Fetch customers from Supabase
  useEffect(() => {
    const fetchCustomers = async () => {
      if (!user) return;

      try {
        setIsLoading(true);
        
        const { data, error } = await supabase
          .from('customers')
          .select('*')
          .eq('user_id', user.id)
          .order('created_at', { ascending: false });

        if (error) {
          throw error;
        }

        setCustomers(data || []);
      } catch (error: any) {
        toast({
          title: "Error loading customers",
          description: error.message || "Could not load customers. Please try again.",
          variant: "destructive",
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchCustomers();
  }, [user]);

  // Filter and search customers
  const filteredCustomers = customers.filter(customer => {
    // Apply search filter
    if (searchQuery && !customer.name.toLowerCase().includes(searchQuery.toLowerCase())) {
      return false;
    }

    // Apply category filter
    if (filter === "referred" && !customer.referred_by) {
      return false;
    }

    return true;
  });

  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <div className="flex items-center gap-2 font-heading font-semibold">
          <FileText className="h-6 w-6 text-primary" />
          <span className="text-xl">Sethiya Gold</span>
        </div>
        <nav className="ml-auto flex items-center gap-4">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm">
              <Home className="mr-2 h-4 w-4" />
              Dashboard
            </Button>
          </Link>
        </nav>
      </header>
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold tracking-tight">Customer Management</h1>
            <p className="text-muted-foreground">Manage your customer relationships and information</p>
          </div>
          <Link href="/customers/add">
            <Button className="bg-primary hover:bg-primary/90">
              <PlusCircle className="mr-2 h-4 w-4" />
              Add Customer
            </Button>
          </Link>
        </div>

        <div className="flex flex-col gap-4 md:flex-row md:items-center">
          <div className="flex flex-1 items-center gap-2">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              <Input 
                placeholder="Search customers..." 
                className="pl-10" 
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
            <Button variant="outline" size="icon" title="Filter">
              <Filter className="h-4 w-4" />
            </Button>
            <Button variant="outline" size="icon" title="Sort">
              <ArrowUpDown className="h-4 w-4" />
            </Button>
          </div>
          <div className="flex items-center gap-2">
            <Select 
              value={filter} 
              onValueChange={setFilter}
            >
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter by" />
              </SelectTrigger>
              <SelectContent>
                <SelectGroup>
                  <SelectLabel>Filter by</SelectLabel>
                  <SelectItem value="all">All Customers</SelectItem>
                  <SelectItem value="recent">Recent Customers</SelectItem>
                  <SelectItem value="referred">Referred Customers</SelectItem>
                </SelectGroup>
              </SelectContent>
            </Select>
          </div>
        </div>

        <Tabs defaultValue="grid" className="w-full">
          <TabsList className="mb-4">
            <TabsTrigger value="grid">Grid View</TabsTrigger>
            <TabsTrigger value="table">Table View</TabsTrigger>
          </TabsList>
          <TabsContent value="grid" className="space-y-4">
            {isLoading ? (
              <div className="flex h-40 items-center justify-center">
                <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent"></div>
                <p className="ml-2">Loading customers...</p>
              </div>
            ) : filteredCustomers.length > 0 ? (
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {filteredCustomers.map((customer) => (
                  <CustomerCard 
                    key={customer.id} 
                    customer={{
                      id: customer.id,
                      name: customer.name,
                      phone: customer.phone || "",
                      email: customer.email || "",
                      address: customer.address || "",
                      identityType: customer.identity_type,
                      identityNumber: customer.identity_reference || "",
                      referredBy: customer.referred_by,
                      createdAt: new Date(customer.created_at),
                      // Mock last transaction data
                      lastTransaction: {
                        id: "INV-XXXX-XXX",
                        date: new Date(),
                        amount: 0,
                        type: "N/A",
                        description: "No transaction data"
                      }
                    }} 
                  />
                ))}
              </div>
            ) : (
              <div className="flex h-40 flex-col items-center justify-center rounded-lg border border-dashed">
                <p className="text-muted-foreground">No customers found</p>
                <Link href="/customers/add" className="mt-2">
                  <Button variant="outline" size="sm">
                    <PlusCircle className="mr-2 h-3 w-3" />
                    Add Your First Customer
                  </Button>
                </Link>
              </div>
            )}
          </TabsContent>
          <TabsContent value="table">
            <div className="rounded-md border">
              <table className="w-full">
                <thead>
                  <tr className="border-b bg-muted/50">
                    <th className="py-3 pl-4 pr-3 text-left text-sm font-medium">Name</th>
                    <th className="px-3 py-3 text-left text-sm font-medium">Contact</th>
                    <th className="px-3 py-3 text-left text-sm font-medium">ID Type</th>
                    <th className="px-3 py-3 text-left text-sm font-medium">Created At</th>
                    <th className="px-3 py-3 text-left text-sm font-medium">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {isLoading ? (
                    <tr>
                      <td colSpan={5} className="py-6 text-center">
                        <div className="flex items-center justify-center">
                          <div className="h-6 w-6 animate-spin rounded-full border-4 border-primary border-t-transparent"></div>
                          <p className="ml-2">Loading customers...</p>
                        </div>
                      </td>
                    </tr>
                  ) : filteredCustomers.length > 0 ? (
                    filteredCustomers.map((customer) => (
                      <tr key={customer.id} className="border-b">
                        <td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm">
                          <div className="font-medium">{customer.name}</div>
                          {customer.referred_by && <div className="text-xs text-muted-foreground">Referred by {customer.referred_by}</div>}
                        </td>
                        <td className="px-3 py-4 text-sm">
                          <div>{customer.phone || "N/A"}</div>
                          <div className="text-muted-foreground">{customer.email || "N/A"}</div>
                        </td>
                        <td className="px-3 py-4 text-sm">
                          {customer.identity_type === 'pan_card' ? 'PAN Card' : 
                           customer.identity_type === 'aadhaar_card' ? 'Aadhaar Card' : 
                           customer.identity_type === 'others' ? 'Other ID' : 'None'}
                          {customer.identity_reference && `: ${customer.identity_reference}`}
                        </td>
                        <td className="px-3 py-4 text-sm">
                          {new Date(customer.created_at).toLocaleDateString()}
                        </td>
                        <td className="px-3 py-4 text-sm">
                          <div className="flex items-center gap-2">
                            <Link href={`/customers/${customer.id}`}>
                              <Button variant="outline" size="sm">
                                View
                              </Button>
                            </Link>
                            <Link href={`/customers/${customer.id}/edit`}>
                              <Button variant="outline" size="sm">
                                Edit
                              </Button>
                            </Link>
                          </div>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan={5} className="py-6 text-center text-muted-foreground">
                        No customers found
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  )
}
</file>

<file path="app/purchases/invoices/add/page.tsx">
"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { format } from "date-fns"
import { useAuth } from "@/components/auth-provider"
import { useToast } from "@/components/ui/use-toast"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Calendar } from "@/components/ui/calendar"
import { cn } from "@/lib/utils"
import { ArrowLeft, CalendarIcon, FileUp, PlusCircle } from "lucide-react"
import supabase from "@/lib/supabase"
import { Tables } from "@/lib/database.types"

type Supplier = Tables<"suppliers">

export default function AddPurchaseInvoicePage() {
  const { user, isLoading } = useAuth()
  const router = useRouter()
  const { toast } = useToast()
  const [suppliers, setSuppliers] = useState<Supplier[]>([])
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isLoadingSuppliers, setIsLoadingSuppliers] = useState(true)
  const [selectedFile, setSelectedFile] = useState<File | null>(null)
  const [formData, setFormData] = useState({
    purchase_number: "",
    invoice_number: "",
    invoice_date: new Date(),
    supplier_id: "_none",
    amount: "",
    status: "Received",
    payment_status: "Unpaid",
    number_of_items: "",
    notes: "",
  })

  useEffect(() => {
    if (user) {
      fetchSuppliers()
    }
  }, [user])

  const fetchSuppliers = async () => {
    if (!user) return
    
    try {
      const { data, error } = await supabase
        .from("suppliers")
        .select("*")
        .eq("user_id", user.id)
        .order("name")

      if (error) throw error
      setSuppliers(data || [])
    } catch (error: any) {
      console.error("Error fetching suppliers:", error)
      toast({
        title: "Error fetching suppliers",
        description: error.message || "An error occurred",
        variant: "destructive",
      })
    } finally {
      setIsLoadingSuppliers(false)
    }
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleDateSelect = (date: Date | undefined) => {
    if (date) {
      setFormData((prev) => ({ ...prev, invoice_date: date }))
    }
  }

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      setSelectedFile(e.target.files[0])
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!user) {
      toast({
        title: "Authentication required",
        description: "Please log in to add a purchase invoice",
        variant: "destructive",
      })
      return
    }

    // Validate required fields
    if (!formData.invoice_number.trim() || !formData.amount.trim()) {
      toast({
        title: "Required fields missing",
        description: "Please fill in all required fields",
        variant: "destructive",
      })
      return
    }

    setIsSubmitting(true)

    try {
      // Upload file if selected
      let invoice_file_url = null
      if (selectedFile) {
        try {
          const fileExt = selectedFile.name.split('.').pop()
          const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 15)}.${fileExt}`
          const filePath = `${user.id}/${fileName}`
          
          // Use secure upload API
          const { data: { session } } = await supabase.auth.getSession()
          if (!session) {
            throw new Error('No active session')
          }

          const formData = new FormData()
          formData.append('file', selectedFile)
          formData.append('bucket', 'purchase-invoices')
          formData.append('path', filePath)

          const response = await fetch('/api/storage/upload', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${session.access_token}`,
            },
            body: formData,
          })

          if (!response.ok) {
            const error = await response.json()
            throw new Error(error.error || 'Upload failed')
          }

          const uploadResult = await response.json()
          // Store the path in a URL format for backward compatibility
          invoice_file_url = `purchase-invoices/${uploadResult.path}`
        } catch (fileError: any) {
          console.error("File upload error:", fileError)
          throw new Error(`File upload failed: ${fileError.message || 'Unknown error'}`)
        }
      }

      // Generate purchase number if empty
      const purchaseNumber = formData.purchase_number.trim() || `P-${Date.now().toString().slice(-6)}`

      // Insert purchase invoice
      const { data, error } = await supabase.from("purchase_invoices").insert({
        purchase_number: purchaseNumber,
        invoice_number: formData.invoice_number,
        invoice_date: formData.invoice_date.toISOString().split('T')[0],
        supplier_id: formData.supplier_id === "_none" ? null : formData.supplier_id,
        amount: parseFloat(formData.amount),
        status: formData.status,
        payment_status: formData.payment_status,
        number_of_items: formData.number_of_items ? parseInt(formData.number_of_items) : null,
        notes: formData.notes,
        invoice_file_url,
        user_id: user.id,
      })

      if (error) throw error

      toast({
        title: "Purchase invoice added successfully",
        description: `Invoice #${formData.invoice_number} has been added`,
      })
      
      router.push("/purchases")
    } catch (error: any) {
      console.error("Error adding purchase invoice:", error)
      toast({
        title: "Error adding purchase invoice",
        description: error.message || "An error occurred while adding the purchase invoice",
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  // Show loading state
  if (isLoading) {
    return <div className="flex min-h-screen items-center justify-center">Loading...</div>
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <main className="flex flex-1 flex-col gap-6 p-6 md:gap-8 md:p-8">
        <div className="flex items-center gap-4">
          <Button variant="ghost" size="icon" onClick={() => router.back()} className="h-8 w-8">
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h1 className="text-2xl font-bold tracking-tight md:text-3xl">Add New Purchase Invoice</h1>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="grid gap-6">
            {/* Invoice Details Card */}
            <Card>
              <CardHeader>
                <CardTitle className="text-xl">Invoice Details</CardTitle>
                <CardDescription>Enter details from the supplier's invoice</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid gap-4 md:grid-cols-2">
                  <div className="grid gap-2">
                    <Label htmlFor="invoice_number">
                      Invoice Number <span className="text-red-500">*</span>
                    </Label>
                    <Input
                      id="invoice_number"
                      name="invoice_number"
                      placeholder="Enter supplier's invoice number"
                      value={formData.invoice_number}
                      onChange={handleChange}
                      required
                    />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="invoice_date">
                      Invoice Date <span className="text-red-500">*</span>
                    </Label>
                    <Popover>
                      <PopoverTrigger asChild>
                        <Button
                          id="invoice_date"
                          variant={"outline"}
                          className={cn(
                            "w-full justify-start text-left font-normal",
                            !formData.invoice_date && "text-muted-foreground"
                          )}
                        >
                          <CalendarIcon className="mr-2 h-4 w-4" />
                          {formData.invoice_date ? format(formData.invoice_date, "PPP") : <span>Pick a date</span>}
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0">
                        <Calendar
                          mode="single"
                          selected={formData.invoice_date}
                          onSelect={handleDateSelect}
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="supplier_id">Supplier</Label>
                    <Select value={formData.supplier_id} onValueChange={(value) => handleSelectChange("supplier_id", value)}>
                      <SelectTrigger id="supplier_id">
                        <SelectValue placeholder="Select a supplier" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="_none">None</SelectItem>
                        {isLoadingSuppliers ? (
                          <SelectItem value="_loading" disabled>
                            Loading suppliers...
                          </SelectItem>
                        ) : suppliers.length > 0 ? (
                          suppliers.map((supplier) => (
                            <SelectItem key={supplier.id} value={supplier.id}>
                              {supplier.name}
                            </SelectItem>
                          ))
                        ) : (
                          <SelectItem value="_no_suppliers" disabled>
                            No suppliers found
                          </SelectItem>
                        )}
                        <Button
                          variant="ghost"
                          className="mt-2 w-full justify-start"
                          onClick={() => router.push("/purchases/suppliers/add")}
                          type="button"
                        >
                          <PlusCircle className="mr-2 h-4 w-4" />
                          Add New Supplier
                        </Button>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="amount">
                      Amount (₹) <span className="text-red-500">*</span>
                    </Label>
                    <Input
                      id="amount"
                      name="amount"
                      type="number"
                      step="0.01"
                      min="0"
                      placeholder="Enter total amount"
                      value={formData.amount}
                      onChange={handleChange}
                      required
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Additional Information Card */}
            <Card>
              <CardHeader>
                <CardTitle className="text-xl">Additional Information</CardTitle>
                <CardDescription>Add more details about this purchase</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid gap-4 md:grid-cols-2">
                  <div className="grid gap-2">
                    <Label htmlFor="purchase_number">Purchase #</Label>
                    <Input
                      id="purchase_number"
                      name="purchase_number"
                      placeholder="Auto-generated if left blank"
                      value={formData.purchase_number}
                      onChange={handleChange}
                    />
                    <p className="text-xs text-muted-foreground">
                      A unique identifier for your records. Will be auto-generated if left blank.
                    </p>
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="number_of_items">Number of Items</Label>
                    <Input
                      id="number_of_items"
                      name="number_of_items"
                      type="number"
                      min="0"
                      placeholder="Enter number of items"
                      value={formData.number_of_items}
                      onChange={handleChange}
                    />
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="status">Status</Label>
                    <Select value={formData.status} onValueChange={(value) => handleSelectChange("status", value)}>
                      <SelectTrigger id="status">
                        <SelectValue placeholder="Select status" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Received">Received</SelectItem>
                        <SelectItem value="Pending">Pending</SelectItem>
                        <SelectItem value="Cancelled">Cancelled</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="grid gap-2">
                    <Label htmlFor="payment_status">Payment Status</Label>
                    <Select
                      value={formData.payment_status}
                      onValueChange={(value) => handleSelectChange("payment_status", value)}
                    >
                      <SelectTrigger id="payment_status">
                        <SelectValue placeholder="Select payment status" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Paid">Paid</SelectItem>
                        <SelectItem value="Unpaid">Unpaid</SelectItem>
                        <SelectItem value="Partially Paid">Partially Paid</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="grid gap-2 md:col-span-2">
                    <Label htmlFor="notes">Notes</Label>
                    <Textarea
                      id="notes"
                      name="notes"
                      placeholder="Add any notes about this purchase"
                      value={formData.notes}
                      onChange={handleChange}
                      rows={3}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Upload Invoice File Card */}
            <Card>
              <CardHeader>
                <CardTitle className="text-xl">Upload Invoice File</CardTitle>
                <CardDescription>
                  Upload a scan or photo of the original invoice (PDF, JPG, PNG)
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid gap-4">
                  <div className="grid gap-2">
                    <Label htmlFor="invoice_file">Invoice File</Label>
                    <div className="flex items-center gap-2">
                      <Input
                        id="invoice_file"
                        type="file"
                        accept=".pdf,.jpg,.jpeg,.png"
                        onChange={handleFileChange}
                        className="flex-1"
                      />
                    </div>
                    {selectedFile && (
                      <p className="text-xs text-muted-foreground">
                        Selected file: {selectedFile.name} ({(selectedFile.size / 1024).toFixed(2)} KB)
                      </p>
                    )}
                  </div>
                  <div className="rounded-md border border-dashed p-6 text-center">
                    <div className="mx-auto flex max-w-[420px] flex-col items-center justify-center">
                      <FileUp className="h-10 w-10 text-muted-foreground" />
                      <p className="mt-2 text-sm font-medium">
                        Drag and drop your invoice file here, or click the button above to browse
                      </p>
                      <p className="mt-1 text-xs text-muted-foreground">
                        Supported formats: PDF, JPG, PNG
                      </p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Action Buttons */}
            <div className="flex justify-end gap-4">
              <Button
                type="button"
                variant="outline"
                onClick={() => router.push("/purchases")}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? "Saving..." : "Save Invoice"}
              </Button>
            </div>
          </div>
        </form>
      </main>
    </div>
  )
}
</file>

<file path="app/stock/[id]/edit/page.tsx">
"use client"

import type React from "react"

import { useState, useEffect } from "react"
import Link from "next/link"
import { ArrowLeft, FileText, Home, Save, Upload, X, Plus } from "lucide-react"
import { useRouter, useParams } from "next/navigation"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"
import { Textarea } from "@/components/ui/textarea"
import { toast } from "@/components/ui/use-toast"
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { useAuth } from "@/components/auth-provider"
import supabase from "@/lib/supabase"
import { compressImage } from "@/lib/imageUtils"
import { Skeleton } from "@/components/ui/skeleton"

export default function EditStockItemPage() {
  // Use useParams hook instead of accessing params directly
  const params = useParams()
  const itemId = params.id as string
  
  const router = useRouter()
  const { user } = useAuth()
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  
  const [formData, setFormData] = useState({
    category: "",
    material: "Gold",
    purity: "22K",
    weight: 0,
    description: "",
    supplier: "",
    purchaseDate: new Date().toISOString().split("T")[0],
    purchasePrice: 0,
  })

  const [itemNumber, setItemNumber] = useState("")

  const [images, setImages] = useState<{ 
    preview: string; 
    file?: File; 
    existingUrl?: string; 
    toBeDeleted?: boolean 
  }[]>([
    { preview: "/placeholder.svg?height=300&width=300" },
  ])

  // Fetch item data when component mounts
  useEffect(() => {
    if (!user) {
      setIsLoading(false)
      return
    }

    fetchItemData()
  }, [user, itemId])

  const fetchItemData = async () => {
    try {
      setIsLoading(true)
      setError(null)

      const { data, error } = await supabase
        .from('stock_items')
        .select('*')
        .eq('user_id', user?.id)
        .eq('item_number', itemId)
        .single()

      if (error) {
        throw error
      }

      if (data) {
        // Populate form data with fetched item details
        setFormData({
          category: data.category || "",
          material: data.material || "Gold",
          purity: data.purity || "22K",
          weight: data.weight || 0,
          description: data.description || "",
          supplier: data.supplier || "",
          purchaseDate: data.purchase_date 
            ? new Date(data.purchase_date).toISOString().split("T")[0] 
            : new Date().toISOString().split("T")[0],
          purchasePrice: data.purchase_price || 0,
        })

        setItemNumber(data.item_number)

        // Handle existing images
        if (data.image_urls && data.image_urls.length > 0) {
          const existingImages = data.image_urls.map((url: string) => ({
            preview: url,
            existingUrl: url,
            toBeDeleted: false
          }))
          setImages(existingImages)
        } else {
          setImages([{ preview: "/placeholder.svg?height=300&width=300" }])
        }
      } else {
        setError("Item not found")
      }
    } catch (error: any) {
      console.error('Error fetching item data:', error)
      setError(error.message || "Failed to load item data")
      toast({
        title: "Error",
        description: error.message || "Failed to load item data",
        variant: "destructive"
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]: ["weight", "purchasePrice"].includes(name)
        ? Number.parseFloat(value) || 0
        : value,
    }))
  }

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }))
  }

  const handleImageChange = (index: number, e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0]
      const reader = new FileReader()

      reader.onload = (event) => {
        const newImages = [...images]
        newImages[index] = {
          preview: event.target?.result as string,
          file,
        }
        setImages(newImages)
      }

      reader.readAsDataURL(file)
    }
  }

  const addImageSlot = () => {
    if (images.length < 5) {
      setImages([...images, { preview: "/placeholder.svg?height=300&width=300" }])
    } else {
      toast({
        title: "Maximum images reached",
        description: "You can upload a maximum of 5 images per item.",
        variant: "destructive",
      })
    }
  }

  const removeImage = (index: number) => {
    const newImages = [...images]
    
    // If it's an existing image, mark it for deletion
    if (newImages[index].existingUrl) {
      newImages[index] = { 
        ...newImages[index], 
        toBeDeleted: true,
        preview: "/placeholder.svg?height=300&width=300" 
      }
    } else if (images.length > 1) {
      // If it's a new image, just remove it
      newImages.splice(index, 1)
    } else {
      // If it's the only image, reset to placeholder
      newImages[index] = { preview: "/placeholder.svg?height=300&width=300", file: undefined }
    }
    
    setImages(newImages)
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!user) {
      toast({
        title: "Authentication required",
        description: "You must be logged in to edit stock items.",
        variant: "destructive",
      })
      return
    }

    // Validate form
    if (!formData.category || !formData.material) {
      toast({
        title: "Missing required fields",
        description: "Please fill in all required fields: Category, Material.",
        variant: "destructive",
      })
      return
    }
    
    // Check if at least one image will be available after updating
    const willHaveImage = images.some(img => img.file || (img.existingUrl && !img.toBeDeleted))
    if (!willHaveImage) {
      toast({
        title: "Missing image",
        description: "Please upload at least one image for the item.",
        variant: "destructive",
      })
      return
    }
    
    setIsSubmitting(true)
    
    try {
      // Fetch user's compression settings
      let compressionLevel: 'none' | 'low' | 'medium' | 'high' = 'medium' // Default
      try {
        const { data: settingsData, error: settingsError } = await supabase
          .from('user_settings')
          .select('photo_compression_level')
          .eq('user_id', user.id)
          .single()
          
        if (settingsError && settingsError.code !== 'PGRST116') throw settingsError // PGRST116 means no row, use default
        if (settingsData && settingsData.photo_compression_level) {
          compressionLevel = settingsData.photo_compression_level
        }
      } catch (error) {
        console.error("Error fetching compression settings:", error)
        // Continue with default compression
      }
      
      // Process images
      let finalImageUrls: string[] = []
      
      // 1. Handle image deletions
      for (const img of images) {
        if (img.existingUrl && img.toBeDeleted) {
          // Extract path from URL for deletion
          try {
            const url = new URL(img.existingUrl)
            const pathMatch = url.pathname.match(/\/storage\/v1\/object\/public\/stock_item_images\/(.*)/)
            if (pathMatch && pathMatch[1]) {
              const storagePath = decodeURIComponent(pathMatch[1])
              await supabase.storage.from('stock_item_images').remove([storagePath])
            }
          } catch (error) {
            console.error('Error parsing URL or removing image:', error)
          }
        }
      }
      
      // 2. Keep existing images that shouldn't be deleted
      images.forEach(img => {
        if (img.existingUrl && !img.toBeDeleted) {
          finalImageUrls.push(img.existingUrl)
        }
      })
      
      // 3. Upload new images
      const { data: { session } } = await supabase.auth.getSession()
      if (!session) {
        throw new Error('No active session')
      }

      const newImagePromises = images
        .filter(img => img.file) // Only process images with a file (new uploads)
        .map(async (imageState, index) => {
          const fileToProcess = imageState.file!
          const compressedFile = await compressImage(fileToProcess, compressionLevel)
          const fileExt = fileToProcess.name.split('.').pop()
          const fileName = `${Date.now()}_${index}.${fileExt}` // Or use uuid
          const filePath = `${user.id}/${itemNumber}/${fileName}`

          // Use secure upload API
          const formData = new FormData()
          formData.append('file', compressedFile)
          formData.append('bucket', 'stock_item_images')
          formData.append('path', filePath)

          const response = await fetch('/api/storage/upload', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${session.access_token}`,
            },
            body: formData,
          })

          if (!response.ok) {
            const error = await response.json()
            throw new Error(error.error || `Failed to upload image ${fileToProcess.name}`)
          }

          const uploadResult = await response.json()
          // Return path in URL format for backward compatibility
          return `stock_item_images/${uploadResult.path}`
        })

      try {
        const newImageUrls = await Promise.all(newImagePromises)
        finalImageUrls.push(...newImageUrls)
      } catch (error: any) {
        toast({ 
          title: "Image Upload Failed", 
          description: error.message, 
          variant: "destructive" 
        })
        setIsSubmitting(false)
        return
      }
      
      // Prepare data for database update
      const stockItemData = {
        category: formData.category,
        material: formData.material,
        purity: formData.purity || null,
        weight: formData.weight,
        description: formData.description || null,
        supplier: formData.supplier || null,
        purchase_date: formData.purchaseDate || null,
        purchase_price: formData.purchasePrice,
        image_urls: finalImageUrls
      }
      
      // Update in Supabase
      const { data, error: dbError } = await supabase
        .from('stock_items')
        .update(stockItemData)
        .eq('item_number', itemId)
        .eq('user_id', user.id)
        .select()
        
      if (dbError) {
        console.error("Database error:", dbError)
        toast({
          title: "Failed to update item",
          description: dbError.message,
          variant: "destructive",
        })
        return
      }
      
      toast({
        title: "Item updated successfully",
        description: `Item ${itemNumber} has been updated.`,
      })
      
      // Redirect to item view page
      router.push(`/stock/${itemId}`)
      
    } catch (error: any) {
      console.error("Error updating stock item:", error)
      toast({
        title: "Error",
        description: error.message || "An unexpected error occurred",
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  // Render loading skeleton
  if (isLoading) {
    return (
      <div className="flex min-h-screen w-full flex-col">
        <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
          <div className="flex items-center gap-2">
            <Skeleton className="h-6 w-6 rounded-full" />
            <Skeleton className="h-6 w-32" />
          </div>
          <div className="ml-auto">
            <Skeleton className="h-8 w-24" />
          </div>
        </header>
        <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
          <div className="flex items-center">
            <Skeleton className="h-8 w-24" />
            <Skeleton className="ml-4 h-8 w-48" />
          </div>
          <Skeleton className="h-[600px] w-full rounded-md" />
        </main>
      </div>
    )
  }

  // Render error state
  if (error) {
    return (
      <div className="flex min-h-screen w-full flex-col">
        <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
          <div className="flex items-center gap-2 font-heading font-semibold">
            <FileText className="h-6 w-6 text-primary" />
            <span className="text-xl">Sethiya Gold</span>
          </div>
        </header>
        <main className="flex flex-1 flex-col items-center justify-center gap-4 p-4 md:gap-8 md:p-8 text-center">
          <FileText className="h-16 w-16 text-muted-foreground" />
          <h1 className="text-2xl font-bold">Item Not Found</h1>
          <p className="text-muted-foreground">{error}</p>
          <Link href="/stock">
            <Button>
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Stock
            </Button>
          </Link>
        </main>
      </div>
    )
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <Link href="/" className="flex items-center gap-2 font-semibold">
          <FileText className="h-6 w-6 text-primary" />
          <span className="text-xl">Sethiya Gold</span>
        </Link>
        <nav className="ml-auto flex items-center gap-4">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm">
              <Home className="mr-2 h-4 w-4" />
              Dashboard
            </Button>
          </Link>
        </nav>
      </header>
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <div className="flex items-center">
          <Link href={`/stock/${itemId}`}>
            <Button variant="ghost" size="sm" className="gap-1">
              <ArrowLeft className="h-4 w-4" />
              Back to Item
            </Button>
          </Link>
          <h1 className="ml-4 text-xl font-semibold md:text-2xl">Edit Inventory Item</h1>
        </div>

        <form onSubmit={handleSubmit} className="space-y-8">
          <Card>
            <CardHeader>
              <CardTitle>Stock Item</CardTitle>
              <CardDescription>Edit the details of this jewelry item.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                <div className="space-y-2">
                  <Label htmlFor="itemNumber">Item Number</Label>
                  <Input
                    id="itemNumber"
                    name="itemNumber"
                    value={itemNumber}
                    readOnly
                    className="bg-muted"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="category">
                    Category <span className="text-destructive">*</span>
                  </Label>
                  <Select
                    value={formData.category}
                    onValueChange={(value) => handleSelectChange("category", value)}
                    required
                  >
                    <SelectTrigger id="category">
                      <SelectValue placeholder="Select category" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectGroup>
                        <SelectLabel>Jewelry</SelectLabel>
                        <SelectItem value="Necklace">Necklace</SelectItem>
                        <SelectItem value="Chain">Chain</SelectItem>
                        <SelectItem value="Ladies Ring">Ladies Ring</SelectItem>
                        <SelectItem value="Gents Ring">Gents Ring</SelectItem>
                        <SelectItem value="Bangles">Bangles</SelectItem>
                        <SelectItem value="Earrings">Earrings</SelectItem>
                        <SelectItem value="Pendant">Pendant</SelectItem>
                        <SelectItem value="Bracelet">Bracelet</SelectItem>
                        <SelectItem value="Anklet">Anklet</SelectItem>
                        <SelectItem value="Nose Pin">Nose Pin</SelectItem>
                        <SelectItem value="Mangalsutra">Mangalsutra</SelectItem>
                        <SelectItem value="Other">Other</SelectItem>
                      </SelectGroup>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-1 gap-6 md:grid-cols-3">
                <div className="space-y-2">
                  <Label htmlFor="material">
                    Material <span className="text-destructive">*</span>
                  </Label>
                  <Select
                    value={formData.material}
                    onValueChange={(value) => handleSelectChange("material", value)}
                    required
                  >
                    <SelectTrigger id="material">
                      <SelectValue placeholder="Select material" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectGroup>
                        <SelectLabel>Metals & Stones</SelectLabel>
                        <SelectItem value="Gold">Gold</SelectItem>
                        <SelectItem value="Silver">Silver</SelectItem>
                        <SelectItem value="Platinum">Platinum</SelectItem>
                        <SelectItem value="Diamond">Diamond</SelectItem>
                        <SelectItem value="Gemstone">Gemstone</SelectItem>
                        <SelectItem value="Mixed">Mixed Materials</SelectItem>
                      </SelectGroup>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="purity">Purity / Type</Label>
                  <Select 
                    value={formData.purity} 
                    onValueChange={(value) => handleSelectChange("purity", value)}
                  >
                    <SelectTrigger id="purity">
                      <SelectValue placeholder="Select purity or type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectGroup>
                        <SelectLabel>Gold Purity</SelectLabel>
                        <SelectItem value="24K">24K (99.9%)</SelectItem>
                        <SelectItem value="22K">22K (91.6%)</SelectItem>
                        <SelectItem value="18K">18K (75.0%)</SelectItem>
                        <SelectItem value="14K">14K (58.3%)</SelectItem>
                        <SelectLabel>Silver Purity</SelectLabel>
                        <SelectItem value="925 Silver">925 Sterling Silver</SelectItem>
                        <SelectLabel>Diamond Type</SelectLabel>
                        <SelectItem value="Natural Diamond">Natural Diamond</SelectItem>
                        <SelectItem value="Lab-Grown Diamond">Lab-Grown Diamond</SelectItem>
                        <SelectLabel>Other</SelectLabel>
                        <SelectItem value="N/A">Not Applicable</SelectItem>
                      </SelectGroup>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="weight">
                    Weight (grams) <span className="text-destructive">*</span>
                  </Label>
                  <Input
                    id="weight"
                    name="weight"
                    type="number"
                    step="0.01"
                    min="0"
                    value={formData.weight}
                    onChange={handleChange}
                    required
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  name="description"
                  value={formData.description}
                  onChange={handleChange}
                  rows={3}
                  placeholder="Describe the item's details, craftsmanship, or any special features..."
                />
              </div>

              <div className="grid grid-cols-1 gap-6 md:grid-cols-3">
                <div className="space-y-2">
                  <Label htmlFor="supplier">Supplier</Label>
                  <Input
                    id="supplier"
                    name="supplier"
                    value={formData.supplier}
                    onChange={handleChange}
                    placeholder="Name of supplier or vendor"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="purchaseDate">Purchase Date</Label>
                  <Input
                    id="purchaseDate"
                    name="purchaseDate"
                    type="date"
                    value={formData.purchaseDate}
                    onChange={handleChange}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="purchasePrice">
                    Purchase Price (₹) <span className="text-destructive">*</span>
                  </Label>
                  <Input
                    id="purchasePrice"
                    name="purchasePrice"
                    type="number"
                    min="0"
                    step="0.01"
                    value={formData.purchasePrice}
                    onChange={handleChange}
                    required
                  />
                </div>
              </div>

              <Separator />

              <div className="space-y-2">
                <Label>
                  Item Images <span className="text-destructive">*</span>
                </Label>
                <div className="grid grid-cols-2 gap-4 sm:grid-cols-3 lg:grid-cols-5">
                  {images.map((img, index) => (
                    <div key={index} className="relative">
                      <div className={`aspect-square rounded-md border-2 border-dashed border-muted-foreground/25 overflow-hidden ${img.toBeDeleted ? 'opacity-30' : ''}`}>
                        <img
                          src={img.preview}
                          alt={`Product ${index + 1}`}
                          className="h-full w-full object-cover"
                        />
                        <input
                          type="file"
                          accept="image/*"
                          onChange={(e) => handleImageChange(index, e)}
                          className="absolute inset-0 cursor-pointer opacity-0"
                          disabled={img.toBeDeleted}
                        />
                        <div className="absolute inset-0 flex flex-col items-center justify-center bg-background/80 opacity-0 transition-opacity hover:opacity-100">
                          <Upload className="h-6 w-6 text-muted-foreground" />
                          <span className="mt-2 text-xs font-medium">
                            {img.file || img.existingUrl ? "Replace" : "Upload"}
                          </span>
                        </div>
                      </div>
                      {(img.file || img.existingUrl) && (
                        <Button
                          type="button"
                          variant="destructive"
                          size="icon"
                          className="absolute -right-2 -top-2 h-6 w-6 rounded-full"
                          onClick={() => removeImage(index)}
                        >
                          <X className="h-3 w-3" />
                          <span className="sr-only">Remove image</span>
                        </Button>
                      )}
                      {img.toBeDeleted && (
                        <div className="absolute inset-0 flex items-center justify-center">
                          <span className="rounded bg-destructive px-2 py-1 text-xs font-medium text-destructive-foreground">
                            To be deleted
                          </span>
                        </div>
                      )}
                    </div>
                  ))}
                  {images.length < 5 && (
                    <Button
                      type="button"
                      variant="outline"
                      className="aspect-square h-auto flex-col rounded-md border-2 border-dashed"
                      onClick={addImageSlot}
                    >
                      <Plus className="h-8 w-8" />
                      <span className="mt-2">Add Image</span>
                    </Button>
                  )}
                </div>
                <p className="text-xs text-muted-foreground">
                  Upload up to 5 images. First image will be used as the thumbnail.
                </p>
              </div>
            </CardContent>

            <CardFooter className="flex justify-between">
              <Link href={`/stock/${itemId}`}>
                <Button variant="outline" type="button">
                  Cancel
                </Button>
              </Link>
              <Button type="submit" disabled={isSubmitting} className="gap-1">
                {isSubmitting ? (
                  <>
                    <div className="h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent" />
                    <span>Saving...</span>
                  </>
                ) : (
                  <>
                    <Save className="h-4 w-4" />
                    <span>Save Changes</span>
                  </>
                )}
              </Button>
            </CardFooter>
          </Card>
        </form>
      </main>
    </div>
  )
}
</file>

<file path="app/stock/add/page.tsx">
"use client"

import type React from "react"

import { useState, useEffect } from "react"
import Link from "next/link"
import { ArrowLeft, FileText, Home, Save, Upload, X, Plus } from "lucide-react"
import { useRouter } from "next/navigation"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"
import { Textarea } from "@/components/ui/textarea"
import { toast } from "@/components/ui/use-toast"
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { useAuth } from "@/components/auth-provider"
import supabase from "@/lib/supabase"
import { compressImage } from "@/lib/imageUtils"

export default function AddStockItemPage() {
  const router = useRouter()
  const { user } = useAuth()
  const [isSubmitting, setIsSubmitting] = useState(false)
  
  const [formData, setFormData] = useState({
    category: "",
    material: "Gold",
    purity: "22K",
    weight: 0,
    description: "",
    supplier: "",
    purchaseDate: new Date().toISOString().split("T")[0],
    purchasePrice: 0,
  })

  const [itemNumber, setItemNumber] = useState("")

  const [images, setImages] = useState<{ preview: string; file?: File }[]>([
    { preview: "/placeholder.svg?height=300&width=300" },
  ])

  const generateItemNumber = (category: string): string => {
    // Take the first 3 letters of the category and convert to uppercase
    let prefix = category.substring(0, 3).toUpperCase()
    // Pad with 'X' if category is less than 3 letters
    while (prefix.length < 3) {
      prefix += 'X'
    }
    // Generate a random 4-digit number
    const randomNum = Math.floor(1000 + Math.random() * 9000).toString()
    return `${prefix}${randomNum}`
  }

  // Update item number when category changes
  useEffect(() => {
    if (formData.category) {
      setItemNumber(generateItemNumber(formData.category))
    }
  }, [formData.category])

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]: ["weight", "purchasePrice"].includes(name)
        ? Number.parseFloat(value) || 0
        : value,
    }))
  }

  const handleSelectChange = (name: string, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }))
  }

  const handleImageChange = (index: number, e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0]
      const reader = new FileReader()

      reader.onload = (event) => {
        const newImages = [...images]
        newImages[index] = {
          preview: event.target?.result as string,
          file,
        }
        setImages(newImages)
      }

      reader.readAsDataURL(file)
    }
  }

  const addImageSlot = () => {
    if (images.length < 5) {
      setImages([...images, { preview: "/placeholder.svg?height=300&width=300" }])
    } else {
      toast({
        title: "Maximum images reached",
        description: "You can upload a maximum of 5 images per item.",
        variant: "destructive",
      })
    }
  }

  const removeImage = (index: number) => {
    const newImages = [...images]
    if (images.length > 1) {
        newImages.splice(index, 1);
    } else {
        newImages[index] = { preview: "/placeholder.svg?height=300&width=300", file: undefined };
    }
    setImages(newImages);
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!user) {
      toast({
        title: "Authentication required",
        description: "You must be logged in to add stock items.",
        variant: "destructive",
      })
      return
    }

    // Validate form
    if (!formData.category || !formData.material) {
      toast({
        title: "Missing required fields",
        description: "Please fill in all required fields: Category, Material.",
        variant: "destructive",
      })
      return
    }
    
    // Validate if at least one image is uploaded (check if file exists)
    const hasUploadedImage = images.some(img => img.file);
    if (!hasUploadedImage) {
      toast({
        title: "Missing image",
        description: "Please upload at least one image for the item.",
        variant: "destructive",
      });
      return;
    }
    
    setIsSubmitting(true)
    
    try {
      // Fetch user's compression settings
      let compressionLevel: 'none' | 'low' | 'medium' | 'high' = 'medium'; // Default
      try {
        const { data: settingsData, error: settingsError } = await supabase
          .from('user_settings')
          .select('photo_compression_level')
          .eq('user_id', user.id)
          .single();
          
        if (settingsError && settingsError.code !== 'PGRST116') throw settingsError; // PGRST116 means no row, use default
        if (settingsData && settingsData.photo_compression_level) {
          compressionLevel = settingsData.photo_compression_level;
        }
      } catch (error) {
        console.error("Error fetching compression settings:", error);
        // Continue with default compression
      }
      
      // Process and upload images
      const uploadedImageUrls: string[] = [];
      
      const { data: { session } } = await supabase.auth.getSession()
      if (!session) {
        throw new Error('No active session')
      }

      const imageUploadPromises = images
        .filter(img => img.file) // Process only images with an actual file
        .map(async (imageState, index) => {
          const fileToProcess = imageState.file!;
          const compressedFile = await compressImage(fileToProcess, compressionLevel);
          const fileExt = fileToProcess.name.split('.').pop();
          const fileName = `${Date.now()}_${index}.${fileExt}`; // Or use uuid
          const filePath = `${user.id}/${itemNumber}/${fileName}`;

          // Use secure upload API
          const formData = new FormData()
          formData.append('file', compressedFile)
          formData.append('bucket', 'stock_item_images')
          formData.append('path', filePath)

          const response = await fetch('/api/storage/upload', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${session.access_token}`,
            },
            body: formData,
          })

          if (!response.ok) {
            const error = await response.json()
            throw new Error(error.error || `Failed to upload image ${fileToProcess.name}`)
          }

          const uploadResult = await response.json()
          // Return path in URL format for backward compatibility
          return `stock_item_images/${uploadResult.path}`;
        });

      try {
        const urls = await Promise.all(imageUploadPromises);
        uploadedImageUrls.push(...urls);
      } catch (error: any) {
        toast({ 
          title: "Image Upload Failed", 
          description: error.message, 
          variant: "destructive" 
        });
        setIsSubmitting(false);
        return;
      }
      
      // Prepare data for database insertion
      const stockItemData = {
        user_id: user.id,
        item_number: itemNumber,
        category: formData.category,
        material: formData.material,
        purity: formData.purity || null,
        weight: formData.weight,
        description: formData.description || null,
        supplier: formData.supplier || null,
        purchase_date: formData.purchaseDate || null,
        purchase_price: formData.purchasePrice,
        image_urls: uploadedImageUrls
      };
      
      // Insert into Supabase
      const { data, error: dbError } = await supabase
        .from('stock_items')
        .insert([stockItemData])
        .select();
        
      if (dbError) {
        console.error("Database error:", dbError);
        toast({
          title: "Failed to save item",
          description: dbError.message,
          variant: "destructive",
        });
        return;
      }
      
      toast({
        title: "Item added successfully",
        description: `Item ${itemNumber} has been added to inventory.`,
      });
      
      // Redirect to stock page
      router.push("/stock");
      
    } catch (error: any) {
      console.error("Error saving stock item:", error);
      toast({
        title: "Error",
        description: error.message || "An unexpected error occurred",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <div className="flex items-center gap-2 font-heading font-semibold">
          <FileText className="h-6 w-6 text-primary" />
          <span className="text-xl">Sethiya Gold</span>
        </div>
        <nav className="ml-auto flex items-center gap-4">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm">
              <Home className="mr-2 h-4 w-4" />
              Dashboard
            </Button>
          </Link>
        </nav>
      </header>
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <div className="flex items-center">
          <Link href="/stock">
            <Button variant="ghost" size="sm" className="gap-1">
              <ArrowLeft className="h-4 w-4" />
              Back to Stock
            </Button>
          </Link>
          <h1 className="ml-4 text-xl font-semibold md:text-2xl">Add New Inventory Item</h1>
        </div>

        <form onSubmit={handleSubmit} className="space-y-8">
          <Card>
            <CardHeader>
              <CardTitle>Stock Item</CardTitle>
              <CardDescription>Enter the details of the jewelry item, including inventory specifics and purchase information.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                <div className="space-y-2">
                  <Label htmlFor="itemNumber">Item Number</Label>
                  <Input
                    id="itemNumber"
                    name="itemNumber"
                    value={itemNumber}
                    readOnly
                    className="bg-muted"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="category">
                    Category <span className="text-destructive">*</span>
                  </Label>
                  <Select
                    value={formData.category}
                    onValueChange={(value) => handleSelectChange("category", value)}
                    required
                  >
                    <SelectTrigger id="category">
                      <SelectValue placeholder="Select category" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectGroup>
                        <SelectLabel>Jewelry</SelectLabel>
                        <SelectItem value="Necklace">Necklace</SelectItem>
                        <SelectItem value="Chain">Chain</SelectItem>
                        <SelectItem value="Ladies Ring">Ladies Ring</SelectItem>
                        <SelectItem value="Gents Ring">Gents Ring</SelectItem>
                        <SelectItem value="Bangles">Bangles</SelectItem>
                        <SelectItem value="Earrings">Earrings</SelectItem>
                        <SelectItem value="Pendant">Pendant</SelectItem>
                        <SelectItem value="Bracelet">Bracelet</SelectItem>
                        <SelectItem value="Anklet">Anklet</SelectItem>
                        <SelectItem value="Nose Pin">Nose Pin</SelectItem>
                        <SelectItem value="Mangalsutra">Mangalsutra</SelectItem>
                        <SelectItem value="Other">Other</SelectItem>
                      </SelectGroup>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-1 gap-6 md:grid-cols-3">
                <div className="space-y-2">
                  <Label htmlFor="material">
                    Material <span className="text-destructive">*</span>
                  </Label>
                  <Select
                    value={formData.material}
                    onValueChange={(value) => handleSelectChange("material", value)}
                    required
                  >
                    <SelectTrigger id="material">
                      <SelectValue placeholder="Select material" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectGroup>
                        <SelectLabel>Metals & Stones</SelectLabel>
                        <SelectItem value="Gold">Gold</SelectItem>
                        <SelectItem value="Silver">Silver</SelectItem>
                        <SelectItem value="Platinum">Platinum</SelectItem>
                        <SelectItem value="Diamond">Diamond</SelectItem>
                        <SelectItem value="Gemstone">Gemstone</SelectItem>
                        <SelectItem value="Mixed">Mixed Materials</SelectItem>
                      </SelectGroup>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="purity">Purity / Type</Label>
                  <Select value={formData.purity} onValueChange={(value) => handleSelectChange("purity", value)}>
                    <SelectTrigger id="purity">
                      <SelectValue placeholder="Select purity or type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectGroup>
                        <SelectLabel>Gold Purity</SelectLabel>
                        <SelectItem value="24K">24K (99.9%)</SelectItem>
                        <SelectItem value="22K">22K (91.6%)</SelectItem>
                        <SelectItem value="18K">18K (75.0%)</SelectItem>
                        <SelectItem value="14K">14K (58.3%)</SelectItem>
                        <SelectLabel>Silver Purity</SelectLabel>
                        <SelectItem value="925 Silver">925 Sterling Silver</SelectItem>
                        <SelectLabel>Diamond Type</SelectLabel>
                        <SelectItem value="Natural Diamond">Natural Diamond</SelectItem>
                        <SelectItem value="Lab-Grown Diamond">Lab-Grown Diamond</SelectItem>
                        <SelectLabel>Other</SelectLabel>
                        <SelectItem value="N/A">Not Applicable</SelectItem>
                      </SelectGroup>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="weight">
                    Weight (grams) <span className="text-destructive">*</span>
                  </Label>
                  <Input
                    id="weight"
                    name="weight"
                    type="number"
                    placeholder="e.g., 10.5"
                    value={formData.weight}
                    onChange={handleChange}
                    min="0"
                    step="0.01"
                    required
                  />
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  name="description"
                  placeholder="Add any additional details about the item"
                  value={formData.description}
                  onChange={handleChange}
                  rows={3}
                />
              </div>

              <div className="grid grid-cols-1 gap-6 md:grid-cols-3">
                <div className="space-y-2">
                  <Label htmlFor="supplier">Supplier / Source</Label>
                  <Input
                    id="supplier"
                    name="supplier"
                    placeholder="e.g., Local Artisan, ABC Jewellers"
                    value={formData.supplier}
                    onChange={handleChange}
                  />
                </div>
                 <div className="space-y-2">
                  <Label htmlFor="purchasePrice">
                    Purchase Price (₹ per item) <span className="text-destructive">*</span>
                  </Label>
                  <Input
                    id="purchasePrice"
                    name="purchasePrice"
                    type="number"
                    placeholder="e.g., 50000"
                    value={formData.purchasePrice}
                    onChange={handleChange}
                    min="0"
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="purchaseDate">Purchase Date</Label>
                  <Input
                    id="purchaseDate"
                    name="purchaseDate"
                    type="date"
                    value={formData.purchaseDate}
                    onChange={handleChange}
                  />
                </div>
              </div>
              
              <Separator />

              <div>
                <Label className="text-lg font-medium">Item Images (Max 5)</Label>
                <p className="text-sm text-muted-foreground">
                  Upload clear images of the jewelry item. The first image will be the primary display image.
                </p>
                <div className="mt-4 grid grid-cols-2 gap-4 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5">
                  {images.map((image, index) => (
                    <div key={index} className="relative group aspect-square">
                      <img
                        src={image.preview}
                        alt={`Preview ${index + 1}`}
                        className="h-full w-full rounded-md border object-cover shadow-sm"
                        width={150}
                        height={150}
                      />
                      <div className="absolute inset-0 flex flex-col items-center justify-center rounded-md bg-black/60 opacity-0 transition-opacity group-hover:opacity-100">
                        <label
                          htmlFor={`image-upload-${index}`}
                          className="mb-2 cursor-pointer rounded-full bg-primary/80 p-2 text-primary-foreground hover:bg-primary"
                        >
                          <Upload className="h-5 w-5" />
                          <Input
                            id={`image-upload-${index}`}
                            type="file"
                            accept="image/png, image/jpeg, image/webp"
                            className="sr-only"
                            onChange={(e) => handleImageChange(index, e)}
                          />
                        </label>
                        {(image.file || images.length > 1) && (
                             <Button
                                type="button"
                                variant="destructive"
                                size="icon"
                                className="h-8 w-8 rounded-full opacity-80 hover:opacity-100"
                                onClick={() => removeImage(index)}
                                >
                                <X className="h-4 w-4" />
                                <span className="sr-only">Remove image</span>
                            </Button>
                        )}
                      </div>
                    </div>
                  ))}
                  {images.length < 5 && (
                    <button
                      type="button"
                      onClick={addImageSlot}
                      className="flex aspect-square flex-col items-center justify-center rounded-md border-2 border-dashed border-muted-foreground/50 bg-muted/20 text-muted-foreground transition-colors hover:border-primary/50 hover:bg-primary/5 hover:text-primary"
                    >
                      <Plus className="h-8 w-8" />
                      <span className="mt-1 text-xs">Add Image</span>
                    </button>
                  )}
                </div>
              </div>
            </CardContent>
            <CardFooter className="flex justify-between border-t pt-5">
              <Button variant="outline" type="button" onClick={() => router.push("/stock")}>
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? (
                  <>
                    <span className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-primary border-t-transparent"></span>
                    Saving...
                  </>
                ) : (
                  <>
                    <Save className="mr-2 h-4 w-4" />
                    Save Item
                  </>
                )}
              </Button>
            </CardFooter>
          </Card>
        </form>
      </main>
    </div>
  )
}
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Warm background system */
    --background: 40 60% 99%;
    --foreground: 222.2 84% 4.9%;

    /* Warm card with cream tone */
    --card: 40 40% 99%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 40 40% 99%;
    --popover-foreground: 222.2 84% 4.9%;

    /* Warm gold primary */
    --primary: 30 89% 43%;
    --primary-foreground: 40 100% 98%;

    /* Warm secondary with cream */
    --secondary: 40 50% 96%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 40 45% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;

    /* Bright warm gold accent */
    --accent: 35 91% 52%;
    --accent-foreground: 35 100% 15%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    /* Warm borders */
    --border: 40 30% 90%;
    --input: 40 30% 90%;
    --ring: 35 91% 52%;

    --radius: 0.75rem;

    /* Warm sidebar */
    --sidebar-background: 40 45% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 40 45% 98%;
    --sidebar-accent: 40 50% 95%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 40 30% 90%;
    --sidebar-ring: 35 91% 52%;

    /* Custom warm gold shades for accents */
    --gold-50: 40 60% 98%;
    --gold-100: 40 55% 95%;
    --gold-200: 38 52% 88%;
    --gold-300: 36 48% 78%;
    --gold-400: 34 80% 62%;
    --gold-500: 35 91% 52%;
    --gold-600: 30 89% 43%;

    /* Gradient helper variables */
    --gradient-from: 40 60% 99%;
    --gradient-via: 40 55% 97%;
    --gradient-to: 40 50% 95%;
  }

  [data-theme="slate"] {
    --primary: 230 48% 25%;
    --primary-foreground: 210 40% 98%;
    --accent: 35 91% 52%;
    --accent-foreground: 35 100% 15%;
  }

  [data-theme="zinc"] {
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
  }

  [data-theme="stone"] {
    --primary: 22 5.9% 10%;
    --primary-foreground: 0 0% 98%;
  }

  [data-theme="gray"] {
    --primary: 220 14.3% 10%;
    --primary-foreground: 0 0% 98%;
  }

  [data-theme="neutral"] {
    --primary: 0 0% 10%;
    --primary-foreground: 0 0% 98%;
  }

  [data-theme="red"] {
    --primary: 0 72.2% 50.6%;
    --primary-foreground: 0 0% 98%;
  }

  [data-theme="rose"] {
    --primary: 346.8 77.2% 49.8%;
    --primary-foreground: 355.7 100% 97.3%;
  }

  [data-theme="orange"] {
    --primary: 24.6 95% 53.1%;
    --primary-foreground: 60 9.1% 97.8%;
  }

  [data-theme="green"] {
    --primary: 142.1 76.2% 36.3%;
    --primary-foreground: 355.7 100% 97.3%;
  }

  [data-theme="blue"] {
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
  }

  [data-theme="violet"] {
    --primary: 262.1 83.3% 57.8%;
    --primary-foreground: 210 40% 98%;
  }

  .dark {
    --background: 230 25% 12%;
    --foreground: 210 40% 98%;

    --card: 230 25% 14%;
    --card-foreground: 210 40% 98%;

    --popover: 230 25% 14%;
    --popover-foreground: 210 40% 98%;

    --primary: 230 44% 64%;
    --primary-foreground: 230 25% 10%;

    --secondary: 230 25% 20%;
    --secondary-foreground: 210 40% 98%;

    --muted: 230 25% 20%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 35 91% 52%;
    --accent-foreground: 35 100% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 230 25% 25%;
    --input: 230 25% 25%;
    --ring: 35 91% 52%;

    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 0 0% 98%;
    --sidebar-primary-foreground: 240 5.9% 10%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Animation utilities */
@layer utilities {
  .animate-fade-in {
    animation: fadeIn 0.6s ease-out forwards;
  }
  
  .animate-slide-up {
    animation: slideUp 0.6s ease-out forwards;
  }

  .animate-shimmer {
    animation: shimmer 2s infinite;
  }

  .animate-scale-in {
    animation: scaleIn 0.3s ease-out forwards;
  }

  .animate-count-up {
    animation: countUp 0.8s ease-out forwards;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes slideUp {
    from { 
      transform: translateY(12px); 
      opacity: 0; 
    }
    to { 
      transform: translateY(0); 
      opacity: 1; 
    }
  }

  @keyframes shimmer {
    0% {
      background-position: -1000px 0;
    }
    100% {
      background-position: 1000px 0;
    }
  }

  @keyframes scaleIn {
    from {
      transform: scale(0.95);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }

  @keyframes countUp {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
}

/* Typography utilities */
@layer components {
  .font-heading {
    font-family: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
    letter-spacing: -0.02em;
  }

  .font-body {
    font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
  }
}
</file>

<file path="app/page.tsx">
import Link from "next/link"
import type { Metadata } from "next"
import { 
  ArrowRight, 
  ChevronRight, 
  Package, 
  Users, 
  FileText, 
  DollarSign, 
  BarChart4, 
  CreditCard, 
  Gem
} from "lucide-react"

import { Button } from "@/components/ui/button"
import { AuthModal } from "@/app/components/auth-modal"

export const metadata: Metadata = {
  title: "Sethiya Gold - Premium Jewelry Management",
  description: "Streamline your jewelry business with our comprehensive management solution",
}

export default function LandingPage() {
  return (
    <div className="flex min-h-screen w-full flex-col">
      {/* Hero Section */}
      <section className="relative flex min-h-[80vh] flex-col items-center justify-center overflow-hidden">
        {/* Background with Gradient */}
        <div className="absolute inset-0 z-0">
          <div className="h-full w-full bg-gradient-to-br from-primary/90 via-primary/80 to-primary/70">
            <div className="absolute inset-0 opacity-10 mix-blend-overlay" 
                 style={{ backgroundImage: "url('data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23ffffff' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E')" 
            }}></div>
          </div>
        </div>

        {/* Hero Content */}
        <div className="container relative z-10 mx-auto flex flex-col items-center px-4 text-center">
          <div className="mb-3 inline-block rounded-full bg-gold-200/30 backdrop-blur-sm px-5 py-2 text-sm font-medium text-accent animate-fade-in shadow-sm border border-gold-300/30">
            Premium Jewelry Management Solution
          </div>
          <h1 className="mb-6 font-heading text-4xl font-bold tracking-tight text-white md:text-5xl lg:text-6xl animate-fade-in" style={{animationDelay: "0.2s"}}>
            <span className="block drop-shadow-lg">Sethiya Gold</span>
            <span className="mt-3 block text-accent drop-shadow-md">Streamline Your Jewelry Business</span>
          </h1>
          <p className="mb-8 max-w-2xl text-lg text-gray-200 animate-fade-in animate-slide-up" style={{animationDelay: "0.3s"}}>
            The ultimate management tool for Indian jewelers. Effortlessly handle invoicing, inventory, and customer relationships with our comprehensive suite of tools.
          </p>
          <div className="flex flex-col space-y-4 sm:flex-row sm:space-x-4 sm:space-y-0 animate-fade-in" style={{animationDelay: "0.4s"}}>
            <AuthModal>
              <Button size="lg" className="bg-accent hover:bg-accent/90 text-accent-foreground">
                Get Started <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
            </AuthModal>
            <Link href="#features">
              <Button variant="outline" size="lg" className="border-white/30 text-white hover:bg-white/10">
                Explore Features <ChevronRight className="ml-2 h-4 w-4" />
              </Button>
            </Link>
          </div>
        </div>

        {/* Decorative Element */}
        <div className="absolute bottom-0 left-0 right-0 h-24 bg-gradient-to-t from-background to-transparent"></div>
      </section>

      {/* Features Section */}
      <section id="features" className="py-16">
        <div className="container mx-auto px-4">
          <div className="mb-12 text-center animate-fade-in">
            <h2 className="mb-4 font-heading text-3xl font-bold text-primary md:text-4xl">
              Powerful Features, Seamlessly Integrated
            </h2>
            <p className="mx-auto max-w-2xl text-lg text-muted-foreground">
              Our jewelry management system combines powerful tools designed specifically for Indian jewelry businesses.
            </p>
          </div>

          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {/* Feature 1 */}
            <div className="group rounded-2xl border border-gold-200 bg-card p-6 shadow-sm transition-all duration-300 hover:border-gold-300 hover:shadow-lg hover:-translate-y-1 animate-fade-in animate-slide-up" style={{animationDelay: "0.1s"}}>
              <div className="mb-4 inline-flex rounded-full bg-gradient-to-br from-gold-100 to-gold-200 p-3 transition-transform duration-300 group-hover:scale-110">
                <Package className="h-6 w-6 text-accent" />
              </div>
              <h3 className="mb-2 font-heading text-xl font-semibold text-primary">Premium Inventory Management</h3>
              <p className="text-muted-foreground leading-relaxed">
                Track your precious inventory with precision. Manage gold, diamonds, and gemstones with ease.
              </p>
            </div>

            {/* Feature 2 */}
            <div className="group rounded-2xl border border-gold-200 bg-card p-6 shadow-sm transition-all duration-300 hover:border-gold-300 hover:shadow-lg hover:-translate-y-1 animate-fade-in animate-slide-up" style={{animationDelay: "0.2s"}}>
              <div className="mb-4 inline-flex rounded-full bg-gradient-to-br from-gold-100 to-gold-200 p-3 transition-transform duration-300 group-hover:scale-110">
                <Users className="h-6 w-6 text-accent" />
              </div>
              <h3 className="mb-2 font-heading text-xl font-semibold text-primary">Customer Relationship</h3>
              <p className="text-muted-foreground leading-relaxed">
                Build lasting relationships with your clients. Track preferences, purchases, and special occasions.
              </p>
            </div>

            {/* Feature 3 */}
            <div className="group rounded-2xl border border-gold-200 bg-card p-6 shadow-sm transition-all duration-300 hover:border-gold-300 hover:shadow-lg hover:-translate-y-1 animate-fade-in animate-slide-up" style={{animationDelay: "0.3s"}}>
              <div className="mb-4 inline-flex rounded-full bg-gradient-to-br from-gold-100 to-gold-200 p-3 transition-transform duration-300 group-hover:scale-110">
                <FileText className="h-6 w-6 text-accent" />
              </div>
              <h3 className="mb-2 font-heading text-xl font-semibold text-primary">Professional Invoicing</h3>
              <p className="text-muted-foreground leading-relaxed">
                Create elegant invoices that reflect your brand's premium quality. GST-compliant and customizable.
              </p>
            </div>

            {/* Feature 4 */}
            <div className="group rounded-2xl border border-gold-200 bg-card p-6 shadow-sm transition-all duration-300 hover:border-gold-300 hover:shadow-lg hover:-translate-y-1 animate-fade-in animate-slide-up" style={{animationDelay: "0.4s"}}>
              <div className="mb-4 inline-flex rounded-full bg-gradient-to-br from-gold-100 to-gold-200 p-3 transition-transform duration-300 group-hover:scale-110">
                <DollarSign className="h-6 w-6 text-accent" />
              </div>
              <h3 className="mb-2 font-heading text-xl font-semibold text-primary">Real-time Gold Rates</h3>
              <p className="text-muted-foreground leading-relaxed">
                Stay updated with the latest gold rates. Automatically calculate prices based on current market values.
              </p>
            </div>

            {/* Feature 5 */}
            <div className="group rounded-2xl border border-gold-200 bg-card p-6 shadow-sm transition-all duration-300 hover:border-gold-300 hover:shadow-lg hover:-translate-y-1 animate-fade-in animate-slide-up" style={{animationDelay: "0.5s"}}>
              <div className="mb-4 inline-flex rounded-full bg-gradient-to-br from-gold-100 to-gold-200 p-3 transition-transform duration-300 group-hover:scale-110">
                <BarChart4 className="h-6 w-6 text-accent" />
              </div>
              <h3 className="mb-2 font-heading text-xl font-semibold text-primary">Business Analytics</h3>
              <p className="text-muted-foreground leading-relaxed">
                Gain insights into your business performance. Track sales trends, popular items, and customer
                preferences.
              </p>
            </div>

            {/* Feature 6 */}
            <div className="group rounded-2xl border border-gold-200 bg-card p-6 shadow-sm transition-all duration-300 hover:border-gold-300 hover:shadow-lg hover:-translate-y-1 animate-fade-in animate-slide-up" style={{animationDelay: "0.6s"}}>
              <div className="mb-4 inline-flex rounded-full bg-gradient-to-br from-gold-100 to-gold-200 p-3 transition-transform duration-300 group-hover:scale-110">
                <CreditCard className="h-6 w-6 text-accent" />
              </div>
              <h3 className="mb-2 font-heading text-xl font-semibold text-primary">Secure Payments</h3>
              <p className="text-muted-foreground leading-relaxed">
                Process payments securely. Support for multiple payment methods including UPI, cards, and more.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* Testimonial Section */}
      <section className="bg-gradient-to-br from-gold-50/30 to-gold-100/20 py-16">
        <div className="container mx-auto px-4">
          <div className="mb-12 text-center">
            <h2 className="mb-4 font-heading text-3xl font-bold text-primary md:text-4xl">
              Trusted by Jewelers Across India
            </h2>
            <p className="mx-auto max-w-2xl text-lg text-muted-foreground">
              Hear from jewelry shop owners who have transformed their business with our system.
            </p>
          </div>

          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {/* Testimonial 1 */}
            <div className="rounded-2xl border border-gold-200 bg-card p-6 shadow-sm hover:shadow-lg hover:-translate-y-1 transition-all duration-300">
              <div className="mb-4 flex items-center">
                <div className="mr-4 h-12 w-12 overflow-hidden rounded-full bg-gradient-to-br from-gold-100 to-gold-200 flex items-center justify-center">
                  <Users className="h-6 w-6 text-accent" />
                </div>
                <div>
                  <h4 className="font-heading font-semibold text-primary">Rajesh Sharma</h4>
                  <p className="text-sm text-muted-foreground">Sharma Jewelers, Delhi</p>
                </div>
              </div>
              <p className="italic text-muted-foreground leading-relaxed">
                "This system has revolutionized how we manage our inventory. The real-time gold rate updates and
                professional invoicing have impressed our customers."
              </p>
            </div>

            {/* Testimonial 2 */}
            <div className="rounded-2xl border border-gold-200 bg-card p-6 shadow-sm hover:shadow-lg hover:-translate-y-1 transition-all duration-300">
              <div className="mb-4 flex items-center">
                <div className="mr-4 h-12 w-12 overflow-hidden rounded-full bg-gradient-to-br from-gold-100 to-gold-200 flex items-center justify-center">
                  <Users className="h-6 w-6 text-accent" />
                </div>
                <div>
                  <h4 className="font-heading font-semibold text-primary">Priya Patel</h4>
                  <p className="text-sm text-muted-foreground">Patel Gold House, Mumbai</p>
                </div>
              </div>
              <p className="italic text-muted-foreground leading-relaxed">
                "The customer management features have helped us build stronger relationships with our clients. We can
                now track preferences and send personalized offers."
              </p>
            </div>

            {/* Testimonial 3 */}
            <div className="rounded-2xl border border-gold-200 bg-card p-6 shadow-sm hover:shadow-lg hover:-translate-y-1 transition-all duration-300">
              <div className="mb-4 flex items-center">
                <div className="mr-4 h-12 w-12 overflow-hidden rounded-full bg-gradient-to-br from-gold-100 to-gold-200 flex items-center justify-center">
                  <Users className="h-6 w-6 text-accent" />
                </div>
                <div>
                  <h4 className="font-heading font-semibold text-primary">Anand Mehta</h4>
                  <p className="text-sm text-muted-foreground">Royal Jewels, Jaipur</p>
                </div>
              </div>
              <p className="italic text-muted-foreground leading-relaxed">
                "The analytics have given us insights we never had before. We've been able to optimize our inventory and
                focus on our most profitable items."
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="relative py-16">
        <div className="absolute inset-0 z-0">
          <div className="h-full w-full bg-gradient-to-br from-primary via-primary/90 to-primary/80">
            <div className="absolute inset-0 opacity-10 mix-blend-overlay" 
                 style={{ backgroundImage: "url('data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23ffffff' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E')" 
            }}></div>
          </div>
        </div>

        <div className="container relative z-10 mx-auto px-4 text-center animate-fade-in">
          <h2 className="mb-4 font-heading text-3xl font-bold text-white drop-shadow-lg md:text-4xl">
            Elevate Your Jewelry Business Today
          </h2>
          <p className="mx-auto mb-8 max-w-2xl text-lg text-gray-200 drop-shadow-sm">
            Join hundreds of jewelry shop owners who have transformed their business with our premium management system.
          </p>
          <AuthModal>
            <Button size="lg" className="bg-accent hover:bg-accent/90 text-accent-foreground shadow-lg hover:shadow-xl">
              Get Started Today <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </AuthModal>
        </div>
      </section>

      {/* Footer */}
      <footer className="border-t border-border bg-card py-12">
        <div className="container mx-auto px-4">
          <div className="grid gap-8 md:grid-cols-4">
            <div>
              <div className="mb-4 flex items-center">
                <Gem className="mr-2 h-6 w-6 text-primary" />
                <span className="text-xl font-semibold text-primary">Sethiya Gold</span>
              </div>
              <p className="text-muted-foreground">Premium jewelry management system designed for Indian jewelers.</p>
            </div>

            <div>
              <h4 className="mb-4 font-semibold text-primary">Features</h4>
              <ul className="space-y-2 text-muted-foreground">
                <li>Inventory Management</li>
                <li>Customer Relationship</li>
                <li>Professional Invoicing</li>
                <li>Real-time Gold Rates</li>
                <li>Business Analytics</li>
              </ul>
            </div>

            <div>
              <h4 className="mb-4 font-semibold text-primary">Resources</h4>
              <ul className="space-y-2 text-muted-foreground">
                <li><Link href="/resources/documentation" className="hover:text-primary transition-colors">Documentation</Link></li>
                <li><Link href="/resources/tutorials" className="hover:text-primary transition-colors">Tutorials</Link></li>
                <li><Link href="/resources/blog" className="hover:text-primary transition-colors">Blog</Link></li>
                <li><Link href="/resources/contact-us" className="hover:text-primary transition-colors">Contact Us</Link></li>
                <li><Link href="/resources/faq" className="hover:text-primary transition-colors">FAQ</Link></li>
              </ul>
            </div>

            <div>
              <h4 className="mb-4 font-semibold text-primary">Contact</h4>
              <ul className="space-y-2 text-muted-foreground">
                <li>info@sethiyagold.com</li>
                <li>+91 98765 43210</li>
                <li>Mumbai, India</li>
              </ul>
            </div>
          </div>

          <div className="mt-8 border-t border-border pt-8 text-center text-sm text-muted-foreground">
            <p>&copy; {new Date().getFullYear()} Sethiya Gold. All rights reserved.</p>
          </div>
        </div>
      </footer>
    </div>
  )
}
</file>

<file path="package.json">
{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "1.1.3",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "1.1.4",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "2.1.1",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "1.1.1",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "@react-pdf/renderer": "4.3.1",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/supabase-js": "2.47.10",
    "@types/qrcode": "^1.5.5",
    "@types/uuid": "^10.0.0",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "embla-carousel-react": "8.5.1",
    "framer-motion": "^12.23.22",
    "input-otp": "1.4.1",
    "lucide-react": "^0.454.0",
    "next": "15.2.4",
    "next-themes": "^0.4.4",
    "qrcode": "^1.5.4",
    "react": "^19",
    "react-day-picker": "9.4.3",
    "react-dom": "^19",
    "react-hook-form": "^7.54.1",
    "react-resizable-panels": "^2.1.7",
    "react-to-print": "3.1.0",
    "recharts": "2.15.0",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^11.1.0",
    "vaul": "^0.9.6",
    "web-push": "^3.6.7",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  },
  "packageManager": "pnpm@10.10.0+sha512.d615db246fe70f25dcfea6d8d73dee782ce23e2245e3c4f6f888249fb568149318637dca73c2c5c8ef2a4ca0d5657fb9567188bfab47f566d1ee6ce987815c39"
}
</file>

<file path="app/stock/[id]/page.tsx">
"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { ArrowLeft, FileText, Home, Edit, Printer, Trash2, Tag, ShoppingBag } from "lucide-react"
import { useRouter, useParams } from "next/navigation"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { ImageGallery } from "@/app/stock/[id]/image-gallery"
import { Skeleton } from "@/components/ui/skeleton"
import { useAuth } from "@/components/auth-provider"
import supabase from "@/lib/supabase"
import { toast } from "@/components/ui/use-toast"
import StockItemLabelDownloadWrapper from "../components/stock-item-label-download-wrapper"
import { ConfirmDialog } from "@/components/ui/confirm-dialog"

// Define the label settings type
type LabelSettings = {
  type: 'standard' | 'large' | 'small';
  copies: number;
  includeProductName: boolean;
  includePrice: boolean;
  includeBarcode: boolean;
  includeDate: boolean;
  includeMetal: boolean;
  includeWeight: boolean;
  includePurity: boolean;
  includeQrCode: boolean;
  qrErrorCorrection: 'L' | 'M' | 'Q' | 'H';
};

export default function StockItemDetailPage() {
  const params = useParams()
  const itemId = params.id as string
  
  const router = useRouter()
  const { user } = useAuth()
  const [itemData, setItemData] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [showLabelDownload, setShowLabelDownload] = useState(false)
  const [isDeleting, setIsDeleting] = useState(false)
  const [isMarkingAsSold, setIsMarkingAsSold] = useState(false)
  const [labelSettings, setLabelSettings] = useState<LabelSettings>({
    type: "standard",
    copies: 1,
    includeProductName: true,
    includePrice: true,
    includeBarcode: true,
    includeDate: true,
    includeMetal: true,
    includeWeight: true,
    includePurity: true,
    includeQrCode: true,
    qrErrorCorrection: "M"
  })

  // Fetch item data when component mounts or when user/params change
  useEffect(() => {
    if (!user) {
      setIsLoading(false)
      return
    }

    fetchItemData()
  }, [user, itemId])

  const fetchItemData = async () => {
    try {
      setIsLoading(true)
      setError(null)

      const { data, error } = await supabase
        .from('stock_items')
        .select('*')
        .eq('user_id', user?.id)
        .eq('item_number', itemId)
        .single()

      if (error) {
        throw error
      }

      if (data) {
        // Map Supabase data to the format expected by UI
        const mappedItem = {
          id: data.item_number,
          name: data.description || `${data.material} ${data.category}`,
          category: data.category,
          material: data.material,
          purity: data.purity || 'N/A',
          weight: data.weight,
          makingCharges: 0, // Not in schema, default to 0
          price: data.purchase_price,
          stock: 1, // Assuming each row is one item
          images: data.image_urls && data.image_urls.length > 0 
            ? data.image_urls 
            : ["/placeholder.svg?height=600&width=600"],
          description: data.description || `${data.material} ${data.category} (${data.purity || 'N/A'})`,
          dateAdded: new Date(data.created_at),
          supplier: data.supplier || 'Not specified',
          purchaseDate: data.purchase_date ? new Date(data.purchase_date) : new Date(),
          purchasePrice: data.purchase_price,
          location: "Main Showcase", // Default value as not in schema
          is_sold: data.is_sold,
          sold_at: data.sold_at ? new Date(data.sold_at) : null,
          // Add other fields with default values or from data if available
          specifications: {
            length: "N/A",
            clasp: "N/A",
            diamonds: {
              count: 0,
              totalCarat: 0,
              clarity: "N/A",
              color: "N/A",
            },
          },
          transactions: [],
          // Keep a reference to the original data
          _original: data
        }
        
        setItemData(mappedItem)
      } else {
        setError("Item not found")
      }
    } catch (error: any) {
      console.error('Error fetching item data:', error)
      setError(error.message || "Failed to load item data")
      toast({
        title: "Error",
        description: error.message || "Failed to load item data",
        variant: "destructive"
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handlePrintLabel = async () => {
    if (!user) {
      toast({
        title: "Authentication required",
        description: "You must be logged in to print labels.",
        variant: "destructive",
      });
      return;
    }

    try {
      // Fetch user settings to get label configuration
      const { data, error } = await supabase
        .from('user_settings')
        .select('*')
        .eq('user_id', user.id)
        .single();

      if (error) {
        if (error.code !== 'PGRST116') {
          throw error;
        }
        // No settings found, use default
      } else if (data) {
        // Update label settings from user preferences
        setLabelSettings({
          type: data.label_type || labelSettings.type,
          copies: data.label_copies || labelSettings.copies,
          includeProductName: data.label_include_product_name ?? labelSettings.includeProductName,
          includePrice: data.label_include_price ?? labelSettings.includePrice,
          includeBarcode: data.label_include_barcode ?? labelSettings.includeBarcode,
          includeDate: data.label_include_date ?? labelSettings.includeDate,
          includeMetal: data.label_include_metal ?? labelSettings.includeMetal,
          includeWeight: data.label_include_weight ?? labelSettings.includeWeight,
          includePurity: data.label_include_purity ?? labelSettings.includePurity,
          includeQrCode: data.label_include_qr_code ?? labelSettings.includeQrCode,
          qrErrorCorrection: data.label_qr_error_correction || labelSettings.qrErrorCorrection
        });
      }
      
      // Show the label download component
      setShowLabelDownload(true);
    } catch (error: any) {
      console.error('Error fetching label settings:', error);
      toast({
        title: "Error loading label settings",
        description: error.message || "Failed to load label settings",
        variant: "destructive"
      });
    }
  };

  const handleDeleteItem = async () => {
    if (!user) {
      toast({
        title: "Authentication required",
        description: "You must be logged in to delete items.",
        variant: "destructive",
      });
      return;
    }

    try {
      setIsDeleting(true);
      
      const { error } = await supabase
        .from('stock_items')
        .delete()
        .eq('user_id', user.id)
        .eq('item_number', itemId);

      if (error) {
        throw error;
      }

      toast({
        title: "Item deleted",
        description: "The item has been successfully deleted",
      });

      // Redirect to the stock list
      router.push("/stock");
    } catch (error: any) {
      console.error('Error deleting item:', error);
      toast({
        title: "Error deleting item",
        description: error.message || "Failed to delete item",
        variant: "destructive"
      });
    } finally {
      setIsDeleting(false);
    }
  };

  const handleMarkAsSold = async () => {
    if (!user) {
      toast({
        title: "Authentication required",
        description: "You must be logged in to mark items as sold.",
        variant: "destructive",
      });
      return;
    }

    try {
      setIsMarkingAsSold(true);
      
      const { error } = await supabase
        .from('stock_items')
        .update({
          is_sold: true,
          sold_at: new Date().toISOString(),
        })
        .eq('user_id', user.id)
        .eq('item_number', itemId);

      if (error) {
        throw error;
      }

      toast({
        title: "Item marked as sold",
        description: "The item has been successfully marked as sold",
      });

      // Refresh the data
      await fetchItemData();
    } catch (error: any) {
      console.error('Error marking item as sold:', error);
      toast({
        title: "Error marking item as sold",
        description: error.message || "Failed to mark item as sold",
        variant: "destructive"
      });
    } finally {
      setIsMarkingAsSold(false);
    }
  };

  const handleMarkAsUnsold = async () => {
    if (!user) {
      toast({
        title: "Authentication required",
        description: "You must be logged in to update items.",
        variant: "destructive",
      });
      return;
    }

    try {
      setIsMarkingAsSold(true);
      
      const { error } = await supabase
        .from('stock_items')
        .update({
          is_sold: false,
          sold_at: null,
        })
        .eq('user_id', user.id)
        .eq('item_number', itemId);

      if (error) {
        throw error;
      }

      toast({
        title: "Item marked as in stock",
        description: "The item has been returned to inventory",
      });

      // Refresh the data
      await fetchItemData();
    } catch (error: any) {
      console.error('Error marking item as unsold:', error);
      toast({
        title: "Error updating item",
        description: error.message || "Failed to update item",
        variant: "destructive"
      });
    } finally {
      setIsMarkingAsSold(false);
    }
  };

  // Render loading skeleton
  if (isLoading) {
    return (
      <div className="flex min-h-screen w-full flex-col">
        <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
          <div className="flex items-center gap-2">
            <Skeleton className="h-6 w-6 rounded-full" />
            <Skeleton className="h-6 w-32" />
          </div>
          <div className="ml-auto">
            <Skeleton className="h-8 w-24" />
          </div>
        </header>
        <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
          <div className="flex items-center">
            <Skeleton className="h-8 w-24" />
            <Skeleton className="ml-4 h-8 w-48" />
          </div>
          <div className="grid grid-cols-1 gap-6 md:grid-cols-3">
            <Skeleton className="aspect-square md:col-span-2" />
            <div className="space-y-4">
              <Skeleton className="h-8 w-full" />
              <Skeleton className="h-4 w-3/4" />
              <Skeleton className="h-16 w-full" />
              <div className="grid grid-cols-2 gap-4">
                {Array(4).fill(0).map((_, i) => (
                  <div key={i} className="space-y-2">
                    <Skeleton className="h-4 w-full" />
                    <Skeleton className="h-6 w-full" />
                  </div>
                ))}
              </div>
              <Skeleton className="h-0.5 w-full" />
              <div className="space-y-2">
                <Skeleton className="h-4 w-1/2" />
                <Skeleton className="h-24 w-full" />
              </div>
            </div>
          </div>
        </main>
      </div>
    )
  }

  // Render error state
  if (error || !itemData) {
    return (
      <div className="flex min-h-screen w-full flex-col">
        <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
          <Link href="/" className="flex items-center gap-2 font-semibold">
            <FileText className="h-6 w-6 text-primary" />
            <span className="text-xl">Sethiya Gold</span>
          </Link>
        </header>
        <main className="flex flex-1 flex-col items-center justify-center gap-4 p-4 md:gap-8 md:p-8 text-center">
          <FileText className="h-16 w-16 text-muted-foreground" />
          <h1 className="text-2xl font-bold">Item Not Found</h1>
          <p className="text-muted-foreground">{error || "The requested item could not be found."}</p>
          <Link href="/stock">
            <Button>
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Stock
            </Button>
          </Link>
        </main>
      </div>
    )
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <div className="flex items-center gap-2 font-heading font-semibold">
          <FileText className="h-6 w-6 text-primary" />
          <span className="text-xl">Sethiya Gold</span>
        </div>
        <nav className="ml-auto flex items-center gap-4">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm">
              <Home className="mr-2 h-4 w-4" />
              Dashboard
            </Button>
          </Link>
        </nav>
      </header>
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <Link href="/stock">
              <Button variant="ghost" size="sm" className="gap-1">
                <ArrowLeft className="h-4 w-4" />
                Back to Stock
              </Button>
            </Link>
            <h1 className="ml-4 text-xl font-semibold md:text-2xl">{itemData.name}</h1>
          </div>
          <div className="flex gap-2">
            <Button onClick={handlePrintLabel} className="gap-2">
              <Printer className="h-4 w-4" />
              Print Label
            </Button>

            {!itemData.is_sold ? (
              <ConfirmDialog
                trigger={
                  <Button className="gap-2" variant="outline" disabled={isMarkingAsSold}>
                    <ShoppingBag className="h-4 w-4" />
                    {isMarkingAsSold ? "Processing..." : "Mark as Sold"}
                  </Button>
                }
                title="Mark Item as Sold"
                description="Are you sure you want to mark this item as sold? This will remove it from active inventory."
                actionText="Mark as Sold"
                onConfirm={handleMarkAsSold}
              />
            ) : (
              <ConfirmDialog
                trigger={
                  <Button className="gap-2" variant="outline" disabled={isMarkingAsSold}>
                    <Tag className="h-4 w-4" />
                    {isMarkingAsSold ? "Processing..." : "Return to Stock"}
                  </Button>
                }
                title="Return Item to Stock"
                description="Are you sure you want to mark this item as in stock? This will return it to active inventory."
                actionText="Return to Stock"
                onConfirm={handleMarkAsUnsold}
              />
            )}

            <ConfirmDialog
              trigger={
                <Button className="gap-2" variant="destructive" disabled={isDeleting}>
                  <Trash2 className="h-4 w-4" />
                  {isDeleting ? "Deleting..." : "Delete Item"}
                </Button>
              }
              title="Delete Item"
              description="Are you sure you want to delete this item? This action cannot be undone."
              actionText="Delete Item"
              variant="destructive"
              onConfirm={handleDeleteItem}
            />

            <Link href={`/stock/${itemId}/edit`}>
              <Button className="gap-2">
                <Edit className="h-4 w-4" />
                Edit Item
              </Button>
            </Link>
          </div>
        </div>

        {showLabelDownload && (
          <Card className="mb-4">
            <CardHeader>
              <CardTitle>Print Label</CardTitle>
              <CardDescription>Download the label PDF and print it</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex items-center gap-4">
                <StockItemLabelDownloadWrapper 
                  itemData={itemData} 
                  labelSettings={labelSettings} 
                />
                <Button variant="outline" onClick={() => setShowLabelDownload(false)}>Cancel</Button>
              </div>
            </CardContent>
          </Card>
        )}

        <div className="grid grid-cols-1 gap-6 md:grid-cols-3">
          {/* Image Gallery */}
          <Card className="md:col-span-2">
            <CardContent className="p-0">
              <ImageGallery images={itemData.images} />
            </CardContent>
          </Card>

          {/* Item Summary */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>{itemData.name}</CardTitle>
                  <CardDescription>Item ID: {itemData.id}</CardDescription>
                </div>
                <Badge 
                  variant={itemData.is_sold ? "destructive" : "outline"} 
                  className="text-sm"
                >
                  {itemData.is_sold ? "Sold" : "In Stock"}
                </Badge>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="rounded-lg bg-muted p-4">
                <div className="text-2xl font-bold text-primary">₹{itemData.price.toLocaleString()}</div>
                <div className="text-sm text-muted-foreground">Selling Price</div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <div className="text-sm text-muted-foreground">Category</div>
                  <div className="font-medium">{itemData.category}</div>
                </div>
                <div>
                  <div className="text-sm text-muted-foreground">Material</div>
                  <div className="font-medium">
                    {itemData.material} {itemData.purity}
                  </div>
                </div>
                <div>
                  <div className="text-sm text-muted-foreground">Weight</div>
                  <div className="font-medium">{itemData.weight}g</div>
                </div>
                <div>
                  <div className="text-sm text-muted-foreground">Purchase Date</div>
                  <div className="font-medium">
                    {itemData.purchaseDate.toLocaleDateString()}
                  </div>
                </div>
              </div>

              {itemData.is_sold && itemData.sold_at && (
                <div>
                  <div className="text-sm text-muted-foreground">Sold Date</div>
                  <div className="font-medium">
                    {new Date(itemData.sold_at).toLocaleDateString()}
                  </div>
                </div>
              )}

              <Separator />

              <div>
                <div className="text-sm font-medium">Description</div>
                <div className="text-sm text-muted-foreground">
                  {itemData.description || "No description available."}
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  )
}
</file>

<file path="app/stock/page.tsx">
"use client"

import { useState, useEffect, useMemo } from "react"
import Link from "next/link"
import { FileText, Home, Package, Plus, Search, Filter, Grid, List } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { StockItemCard } from "@/app/stock/stock-item-card"
import { StockItemTable } from "@/app/stock/stock-item-table"
import { StockCategoryCard } from "@/app/stock/stock-category-card"
import { useAuth } from "@/components/auth-provider"
import supabase from "@/lib/supabase"
import { toast } from "@/components/ui/use-toast"
import { Skeleton } from "@/components/ui/skeleton"
import { Database } from "@/lib/database.types"

// Define types for stock items and categories
type StockItem = {
  id: string
  name: string
  category: string
  material: string
  purity: string
  weight: number
  makingCharges: number
  price: number
  stock: number
  images: string[]
  description: string
  dateAdded: Date
  is_sold: boolean
  sold_at: Date | null
  supplier: string | null
}

type StockCategory = {
  id: string
  name: string
  count: number
  icon: string
}

type FilterCriteria = {
  category: string
  material: string
}

export default function StockPage() {
  const { user } = useAuth()
  const [stockItems, setStockItems] = useState<StockItem[]>([])
  const [derivedCategories, setDerivedCategories] = useState<StockCategory[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [searchQuery, setSearchQuery] = useState("")
  const [filterCriteria, setFilterCriteria] = useState<FilterCriteria>({
    category: "all",
    material: "all"
  })
  const [activeView, setActiveView] = useState("grid")
  const [error, setError] = useState<string | null>(null)

  // Fetch stock data when component mounts or user changes
  useEffect(() => {
    if (!user) {
      setIsLoading(false)
      return
    }
    
    fetchStockData()
  }, [user])

  // Fetch stock data from Supabase
  const fetchStockData = async () => {
    if (!user) return
    
    try {
      setIsLoading(true)
      setError(null)
      
      const { data, error } = await supabase
        .from('stock_items')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false })
      
      if (error) {
        throw error
      }
      
      if (data) {
        // Map the data to the format expected by the components
        const mappedItems = data.map(item => ({
          id: item.item_number,
          name: item.description || `${item.material} ${item.category}`,
          category: item.category,
          material: item.material,
          purity: item.purity || 'N/A',
          weight: item.weight,
          makingCharges: 0, // Not in database, default to 0
          price: item.purchase_price,
          purchasePrice: item.purchase_price,
          stock: 1, // Assuming each row is one item
          images: item.image_urls && item.image_urls.length > 0 
            ? item.image_urls 
            : ["/placeholder.svg?height=300&width=300"],
          description: item.description || `${item.material} ${item.category} (${item.purity || 'N/A'})`,
          dateAdded: new Date(item.created_at),
          is_sold: item.is_sold,
          sold_at: item.sold_at,
          supplier: item.supplier
        }));
        
        setStockItems(mappedItems);
      } else {
        setStockItems([]);
      }
    } catch (error: any) {
      console.error('Error fetching stock data:', error)
      setError(error.message)
      toast({
        title: "Error fetching stock data",
        description: error.message || "Could not load your stock items. Please try again.",
        variant: "destructive"
      })
    } finally {
      setIsLoading(false)
    }
  }

  // Process the stock data to derive categories and map for display
  const processStockData = (items: Database['public']['Tables']['stock_items']['Row'][]) => {
    // Create a map to count items by category
    const categoryCount: Record<string, number> = {}
    
    // Process each item
    const processedItems = items.map(item => {
      // Count by category
      if (categoryCount[item.category]) {
        categoryCount[item.category]++
      } else {
        categoryCount[item.category] = 1
      }
      
      // Map item to expected format for StockItemCard and StockItemTable
      return {
        id: item.item_number,
        name: item.description || `${item.material} ${item.category}`, // Use description as name, or fallback
        category: item.category,
        material: item.material,
        purity: item.purity || 'N/A',
        weight: item.weight,
        makingCharges: 0, // Not in schema, using default
        price: item.purchase_price,
        stock: 1, // Assuming each row is one item
        images: item.image_urls && item.image_urls.length > 0 
          ? item.image_urls 
          : ["/placeholder.svg?height=300&width=300"],
        description: item.description || `${item.material} ${item.category} (${item.purity || 'N/A'})`,
        dateAdded: new Date(item.created_at)
      } as StockItem
    })
    
    // Convert categories to expected format for StockCategoryCard
    const categories = Object.entries(categoryCount).map(([name, count]) => ({
      id: name,
      name,
      count,
      icon: "/placeholder.svg?height=40&width=40"
    }))
    
    setDerivedCategories(categories)
    return processedItems
  }

  // Apply search and filters to stock items
  const filteredStockItems = useMemo(() => {
    return stockItems.filter(item => {
      // Apply search filter
      const matchesSearch = searchQuery === "" ||
        item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        item.id.toLowerCase().includes(searchQuery.toLowerCase()) ||
        item.description.toLowerCase().includes(searchQuery.toLowerCase())
      
      // Apply category filter
      const matchesCategory = filterCriteria.category === "all" || 
        item.category === filterCriteria.category
      
      // Apply material filter
      const matchesMaterial = filterCriteria.material === "all" ||
        item.material.toLowerCase() === filterCriteria.material.toLowerCase()
      
      return matchesSearch && matchesCategory && matchesMaterial
    })
  }, [stockItems, searchQuery, filterCriteria])

  // Extract unique materials for the material filter
  const uniqueMaterials = useMemo(() => {
    const materials = new Set(stockItems.map(item => item.material))
    return Array.from(materials)
  }, [stockItems])

  // Handle search input change
  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value)
  }

  // Handle category filter change
  const handleCategoryChange = (value: string) => {
    setFilterCriteria(prev => ({
      ...prev,
      category: value
    }))
  }

  // Handle material filter change
  const handleMaterialChange = (value: string) => {
    setFilterCriteria(prev => ({
      ...prev,
      material: value
    }))
  }

  // Group items by category for the category view
  const groupedByCategory = stockItems.reduce((acc, item) => {
    if (!acc[item.category]) {
      acc[item.category] = []
    }
    acc[item.category].push(item)
    return acc
  }, {} as Record<string, StockItem[]>)

  const categoryCards = Object.keys(groupedByCategory).map((category) => ({
    name: category,
    count: groupedByCategory[category].length,
    totalValue: groupedByCategory[category].reduce((sum, item) => sum + item.price, 0),
    images: groupedByCategory[category].slice(0, 4).map(item => item.images[0]),
  }))

  // Render loading skeletons for categories
  const renderCategorySkeletons = () => {
    return Array(8).fill(0).map((_, index) => (
      <div key={`category-skeleton-${index}`} className="rounded-md border p-6">
        <div className="flex items-center gap-4">
          <Skeleton className="h-12 w-12 rounded-full" />
          <div className="space-y-2">
            <Skeleton className="h-4 w-24" />
            <Skeleton className="h-3 w-16" />
          </div>
        </div>
        <Skeleton className="mt-4 h-8 w-full" />
      </div>
    ))
  }

  // Render loading skeletons for item cards
  const renderItemCardSkeletons = () => {
    return Array(8).fill(0).map((_, index) => (
      <div key={`item-skeleton-${index}`} className="rounded-md border">
        <Skeleton className="aspect-square w-full" />
        <div className="p-4 space-y-2">
          <Skeleton className="h-4 w-full" />
          <Skeleton className="h-3 w-4/5" />
          <div className="grid grid-cols-2 gap-2 pt-2">
            <div>
              <Skeleton className="h-2 w-10 mb-1" />
              <Skeleton className="h-3 w-16" />
            </div>
            <div>
              <Skeleton className="h-2 w-10 mb-1" />
              <Skeleton className="h-3 w-16" />
            </div>
            <div>
              <Skeleton className="h-2 w-10 mb-1" />
              <Skeleton className="h-3 w-16" />
            </div>
            <div>
              <Skeleton className="h-2 w-10 mb-1" />
              <Skeleton className="h-3 w-16" />
            </div>
          </div>
        </div>
        <div className="border-t p-2 flex justify-between">
          <Skeleton className="h-8 w-16" />
          <Skeleton className="h-8 w-16" />
        </div>
      </div>
    ))
  }

  // Render loading skeleton for table
  const renderTableSkeleton = () => (
    <div className="rounded-md border">
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr className="border-b bg-muted/50">
              {Array(9).fill(0).map((_, index) => (
                <th key={`th-${index}`} className="p-3">
                  <Skeleton className="h-4 w-20" />
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {Array(5).fill(0).map((_, rowIndex) => (
              <tr key={`tr-${rowIndex}`} className="border-b">
                {Array(9).fill(0).map((_, cellIndex) => (
                  <td key={`td-${rowIndex}-${cellIndex}`} className="p-3">
                    <Skeleton className="h-4 w-full" />
                    {cellIndex === 0 && <Skeleton className="h-3 w-4/5 mt-1" />}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )

  // Empty state component
  const EmptyState = ({ message, showAddButton = true }: { message: string; showAddButton?: boolean }) => (
    <div className="flex flex-col items-center justify-center py-10 text-center">
      <Package className="h-16 w-16 text-muted-foreground/50 mb-4" />
      <h3 className="text-lg font-medium">{message}</h3>
      <p className="text-muted-foreground mb-6">
        {showAddButton ? "Add your first item to start tracking your inventory" : "Try adjusting your filters or search query"}
      </p>
      {showAddButton && (
        <Link href="/stock/add">
          <Button>
            <Plus className="mr-2 h-4 w-4" />
            Add New Item
          </Button>
        </Link>
      )}
    </div>
  )

  // Render error state
  if (error) {
    return (
      <div className="flex min-h-screen w-full flex-col">
        <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
          <Link href="/" className="flex items-center gap-2 font-semibold">
            <FileText className="h-6 w-6 text-primary" />
            <span className="text-xl">Sethiya Gold</span>
          </Link>
        </header>
        <main className="flex flex-1 flex-col items-center justify-center gap-4 p-4 md:gap-8 md:p-8 text-center">
          <div className="text-destructive text-5xl">⚠️</div>
          <h1 className="text-2xl font-bold">Error Loading Stock</h1>
          <p className="text-muted-foreground">{error}</p>
          <Button onClick={fetchStockData}>Retry</Button>
        </main>
      </div>
    )
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <div className="flex items-center gap-2 font-heading font-semibold">
          <FileText className="h-6 w-6 text-primary" />
          <span className="text-xl">Sethiya Gold</span>
        </div>
        <nav className="ml-auto flex items-center gap-4">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm">
              <Home className="mr-2 h-4 w-4" />
              Dashboard
            </Button>
          </Link>
        </nav>
      </header>
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold tracking-tight">Stock Management</h1>
            <p className="text-muted-foreground">Manage your jewelry inventory and track items</p>
          </div>
          <Link href="/stock/add">
            <Button className="bg-primary hover:bg-primary/90">
              <Plus className="mr-2 h-4 w-4" />
              Add New Item
            </Button>
          </Link>
        </div>

        <div className="flex flex-col gap-4 md:flex-row md:items-center">
          <div className="flex flex-1 items-center gap-2">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              <Input 
                placeholder="Search items by name, ID, or description..." 
                className="pl-10"
                value={searchQuery}
                onChange={handleSearchChange}
              />
            </div>
            <Button variant="outline" size="icon" title="Filter">
              <Filter className="h-4 w-4" />
            </Button>
          </div>
          <div className="flex items-center gap-2">
            <Select 
              value={filterCriteria.category} 
              onValueChange={handleCategoryChange}
            >
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter by category" />
              </SelectTrigger>
              <SelectContent>
                <SelectGroup>
                  <SelectLabel>Categories</SelectLabel>
                  <SelectItem value="all">All Categories</SelectItem>
                  {derivedCategories.map((category) => (
                    <SelectItem key={category.id} value={category.id}>
                      {category.name}
                    </SelectItem>
                  ))}
                </SelectGroup>
              </SelectContent>
            </Select>
            <Select 
              value={filterCriteria.material} 
              onValueChange={handleMaterialChange}
            >
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter by material" />
              </SelectTrigger>
              <SelectContent>
                <SelectGroup>
                  <SelectLabel>Materials</SelectLabel>
                  <SelectItem value="all">All Materials</SelectItem>
                  {uniqueMaterials.map(material => (
                    <SelectItem key={material} value={material.toLowerCase()}>
                      {material}
                    </SelectItem>
                  ))}
                </SelectGroup>
              </SelectContent>
            </Select>
          </div>
        </div>

        <Tabs defaultValue="grid" onValueChange={setActiveView}>
          <TabsList>
            <TabsTrigger value="grid">Grid View</TabsTrigger>
            <TabsTrigger value="table">Table View</TabsTrigger>
            <TabsTrigger value="category">Category View</TabsTrigger>
          </TabsList>

          <TabsContent value="grid" className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Package className="h-5 w-5 text-primary" />
                <h2 className="text-lg font-semibold">All Items</h2>
                <Badge variant="outline" className="ml-2">
                  {filteredStockItems.length} items
                </Badge>
              </div>
              <div className="flex items-center gap-2">
                <Button variant="outline" size="sm" className="gap-1">
                  <Grid className="h-4 w-4" />
                  <span className="hidden sm:inline">Grid</span>
                </Button>
                <Button variant="ghost" size="sm" className="gap-1">
                  <List className="h-4 w-4" />
                  <span className="hidden sm:inline">List</span>
                </Button>
              </div>
            </div>

            <div className="grid gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
              {isLoading ? (
                renderItemCardSkeletons()
              ) : filteredStockItems.length > 0 ? (
                filteredStockItems.map((item) => (
                  <StockItemCard key={item.id} item={item} />
                ))
              ) : (
                <EmptyState 
                  message={stockItems.length > 0 ? "No items match your filters" : "No items found"} 
                  showAddButton={stockItems.length === 0}
                />
              )}
            </div>
          </TabsContent>

          <TabsContent value="table">
            {isLoading ? (
              renderTableSkeleton()
            ) : filteredStockItems.length > 0 ? (
              <StockItemTable items={filteredStockItems} />
            ) : (
              <EmptyState 
                message={stockItems.length > 0 ? "No items match your filters" : "No items found"} 
                showAddButton={stockItems.length === 0}
              />
            )}
          </TabsContent>

          <TabsContent value="category" className="space-y-4">
            <div className="grid gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
              {isLoading ? (
                renderCategorySkeletons()
              ) : categoryCards.length > 0 ? (
                categoryCards.map((category) => (
                  <StockCategoryCard key={category.name} category={category} />
                ))
              ) : (
                <EmptyState message="No categories found" />
              )}
            </div>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  )
}
</file>

<file path="app/create-invoice/invoice-preview.tsx">
"use client"

import React from "react";
import { Card, CardContent } from "@/components/ui/card"
import { TERMS_AND_CONDITIONS, AGREEMENT_TEXT } from "@/lib/invoice-text";
import { Separator } from "@/components/ui/separator";

interface InvoiceItem {
  name: string
  quantity: number
  weight: number
  pricePerGram: number
  total: number
}

export interface InvoiceData {
  invoiceNumber: string
  date: string
  customerName: string
  customerAddress?: string
  customerPhone?: string
  customerEmail?: string
  firmName: string
  firmAddress: string
  firmPhone: string
  firmGstin: string
  items: InvoiceItem[]
  subtotal: number
  gstPercentage: number
  gstAmount: number
  total: number
}

interface InvoicePreviewProps {
  invoiceData: InvoiceData
}

export const InvoicePreview = React.forwardRef<HTMLDivElement, InvoicePreviewProps>(({ invoiceData }, ref) => {
  return (
    <Card className="overflow-hidden border-2" ref={ref}>
      <CardContent className="p-0">
        {/* Header Section */}
        <div className="relative bg-blue-50 p-6">
          {/* Colored Band */}
          <div className="absolute inset-0 bg-blue-50 z-0"></div>
          
          <div className="flex flex-col items-center justify-center space-y-2 text-center relative z-10">
            <p className="text-center text-red-800 font-bold tracking-wide text-lg mb-1">TAX INVOICE</p>
            <h1 className="text-3xl font-bold tracking-tight text-red-800 uppercase">{invoiceData.firmName}</h1>
            <p className="text-sm font-medium uppercase tracking-wide">Premium Jewelry</p>
            <p className="text-xs text-muted-foreground">{invoiceData.firmAddress}</p>
            <p className="text-xs text-muted-foreground">GSTIN: {invoiceData.firmGstin} | HSN: 7113 | Phone: {invoiceData.firmPhone}</p>
            
            <div className="w-full flex justify-between py-2 mt-2 border-t border-b border-gray-400 text-sm">
              <span>Bill No.: {invoiceData.invoiceNumber}</span>
              <span>Date: {invoiceData.date}</span>
            </div>
          </div>
        </div>

        <div className="p-6">
          {/* Customer Info Section */}
          <div className="mb-6 rounded-none border p-4">
            <div className="grid grid-cols-6 gap-1">
              <div className="col-span-1 font-medium text-sm">M/s.</div>
              <div className="col-span-5 text-sm">{invoiceData.customerName}</div>
              
              {invoiceData.customerAddress && (
                <>
                  <div className="col-span-1 font-medium text-sm">Address:</div>
                  <div className="col-span-5 text-sm">{invoiceData.customerAddress}</div>
                </>
              )}
              
              {invoiceData.customerPhone && (
                <>
                  <div className="col-span-1 font-medium text-sm">Phone:</div>
                  <div className="col-span-5 text-sm">{invoiceData.customerPhone}</div>
                </>
              )}
              
              {invoiceData.customerEmail && (
                <>
                  <div className="col-span-1 font-medium text-sm">Email:</div>
                  <div className="col-span-5 text-sm">{invoiceData.customerEmail}</div>
                </>
              )}
            </div>
          </div>

          {/* Items Table */}
          <div className="mb-6 overflow-x-auto">
            <table className="w-full border-collapse">
              <thead>
                <tr className="bg-gray-200">
                  <th className="border border-gray-400 p-2 text-sm font-medium text-center" style={{ width: "35%" }}>Item</th>
                  <th className="border border-gray-400 p-2 text-sm font-medium text-center" style={{ width: "10%" }}>Qty</th>
                  <th className="border border-gray-400 p-2 text-sm font-medium text-center" style={{ width: "15%" }}>Weight (g)</th>
                  <th className="border border-gray-400 p-2 text-sm font-medium text-center" style={{ width: "20%" }}>Price/10g (₹)</th>
                  <th className="border border-gray-400 p-2 text-sm font-medium text-center" style={{ width: "20%" }}>Amount (₹)</th>
                </tr>
              </thead>
              <tbody>
                {invoiceData.items.map((item, index) => (
                  <tr key={index} className={index % 2 === 0 ? "bg-white" : "bg-gray-50"}>
                    <td className="border border-gray-400 p-2 text-sm">{item.name}</td>
                    <td className="border border-gray-400 p-2 text-sm text-center">{item.quantity}</td>
                    <td className="border border-gray-400 p-2 text-sm text-right">{item.weight.toFixed(3)}</td>
                    <td className="border border-gray-400 p-2 text-sm text-right">{(item.pricePerGram * 10).toFixed(2)}</td>
                    <td className="border border-gray-400 p-2 text-sm text-right">{item.total.toFixed(2)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* Summary Section */}
          <div className="mb-6 flex justify-end">
            <div className="w-1/2 space-y-1">
              <div className="flex justify-between border-b py-1 text-sm">
                <span>Subtotal (Items Value):</span>
                <span>₹{invoiceData.subtotal.toFixed(2)}</span>
              </div>
              <div className="flex justify-between border-b py-1 text-sm">
                <span>GST ({invoiceData.gstPercentage}%):</span>
                <span>₹{invoiceData.gstAmount.toFixed(2)}</span>
              </div>
              <div className="flex justify-between border-t border-b border-black py-2 font-bold">
                <span>GRAND TOTAL:</span>
                <span>₹{invoiceData.total.toFixed(2)}</span>
              </div>
            </div>
          </div>

          {/* Footer Section */}
          <div className="mt-8 border p-4">
            <div className="border-t border-dotted mb-2"></div>
            <p className="text-center font-bold mb-2">Thank You! Visit Again!</p>
            
            <h4 className="text-sm font-bold underline mb-2">Terms & Conditions:</h4>
            <ol className="text-xs text-muted-foreground pl-5 space-y-1">
              {TERMS_AND_CONDITIONS.map((term, index) => (
                <li key={index}>{term}</li>
              ))}
            </ol>
            
            <p className="mt-3 text-xs text-center">{AGREEMENT_TEXT}</p>
            
            <div className="mt-6 grid grid-cols-2 gap-4">
              <div>
                <p className="text-sm">Customer Signature:</p>
                <div className="mt-8 border-t border-gray-400"></div>
                <p className="text-sm">({invoiceData.customerName})</p>
              </div>
              <div className="text-right">
                <p className="text-sm">For {invoiceData.firmName}:</p>
                <div className="mt-8 border-t border-gray-400"></div>
                <p className="text-sm">(Authorised Signatory)</p>
              </div>
            </div>
            
            <div className="mt-6 flex justify-between text-xs italic">
              <span>E. & O. E.</span>
              <span>This is a computer-generated invoice.</span>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  )
});

InvoicePreview.displayName = "InvoicePreview";
</file>

<file path="app/create-invoice/page.tsx">
"use client"

import type React from "react"
import { v4 as uuidv4 } from "uuid"

import { useState, useRef, useEffect } from "react"
import Link from "next/link"
import { ArrowLeft, FileText, Printer, Save, Plus, Trash2 } from "lucide-react"
import { useRouter } from "next/navigation"
import { useReactToPrint } from "react-to-print"
import dynamic from "next/dynamic"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { InvoicePreview } from "@/app/create-invoice/invoice-preview"
import { toast } from "@/components/ui/use-toast"
import { useAuth } from "@/components/auth-provider"
import supabase from "@/lib/supabase"
import { AddCustomerModal } from "@/app/create-invoice/components/add-customer-modal"

// Dynamically import PDF components with ssr: false to ensure they only load on the client
const PDFDownloadLinkWrapper = dynamic(
  () => import("@/app/create-invoice/pdf-download-link-wrapper").then((mod) => mod.PDFDownloadLinkWrapper),
  { ssr: false },
)

// Item interface for form state
interface InvoiceItem {
  id: string
  name: string
  quantity: number
  weight: number
  pricePerGram: number
  total: number
}

// Customer interface
interface Customer {
  id: string
  name: string
  address?: string
  phone?: string
  email?: string
}

export default function CreateInvoicePage() {
  const router = useRouter()
  const { user } = useAuth()
  const [showPreview, setShowPreview] = useState(false)
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false)
  const [isBrowser, setIsBrowser] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [isSaving, setIsSaving] = useState(false)
  const [customers, setCustomers] = useState<Customer[]>([])
  const [invoicePrefix, setInvoicePrefix] = useState("INV-")
  const [invoiceNextNumber, setInvoiceNextNumber] = useState(1)
  const [firmDetails, setFirmDetails] = useState({
    firmName: "Sethiya Gold",
    firmAddress: "123 Jewelry Lane, Mumbai, Maharashtra, 400001",
    firmPhone: "+91 98765 43210",
    firmGstin: "27AABCT3518Q1ZV"
  })
  
  const invoiceRef = useRef<HTMLDivElement>(null)
  
  const [formData, setFormData] = useState({
    selectedCustomerId: "",
    selectedCustomerDetails: null as Customer | null,
    date: new Date().toISOString().split("T")[0],
    items: [
      {
        id: uuidv4(),
        name: "",
        quantity: 1,
        weight: 0,
        pricePerGram: 6450,
        total: 0,
      },
    ] as InvoiceItem[],
    gst: 3,
  })

  // Set isBrowser to true once component mounts and fetch customers and firm details
  useEffect(() => {
    setIsBrowser(true)
    if (user) {
      fetchCustomers()
      fetchFirmDetails()
    } else {
      setIsLoading(false)
    }
  }, [user])

  // Fetch customers from Supabase
  const fetchCustomers = async () => {
    if (!user) return
    
    try {
      setIsLoading(true)
      const { data, error } = await supabase
        .from('customers')
        .select('id, name, address, phone, email')
        .eq('user_id', user.id)
        .order('name')
      
      if (error) throw error
      
      setCustomers(data || [])
    } catch (error: any) {
      toast({
        title: "Error loading customers",
        description: error.message || "Could not load customers",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  // Fetch firm details from user settings
  const fetchFirmDetails = async () => {
    if (!user) return
    
    try {
      const { data, error } = await supabase
        .from('user_settings')
        .select('firm_name, firm_address, firm_phone, firm_gstin, firm_email, invoice_default_prefix, invoice_next_number')
        .eq('user_id', user.id)
        .single()
      
      if (error) {
        console.error("Error fetching firm details:", error)
        return // Use default values set in state
      }
      
      if (data) {
        setFirmDetails({
          firmName: data.firm_name || "Sethiya Gold",
          firmAddress: data.firm_address || "123 Jewelry Lane, Mumbai, Maharashtra, 400001",
          firmPhone: data.firm_phone || "+91 98765 43210",
          firmGstin: data.firm_gstin || "27AABCT3518Q1ZV"
        })
        
        // Set invoice prefix and next number
        if (data.invoice_default_prefix) {
          setInvoicePrefix(data.invoice_default_prefix)
        }
        
        if (data.invoice_next_number) {
          setInvoiceNextNumber(data.invoice_next_number)
        }
      }
    } catch (error: any) {
      console.error("Error fetching firm details:", error)
    }
  }

  // Handle customer selection
  const handleCustomerChange = (customerId: string) => {
    if (customerId === "add_new_customer") {
      // This is handled by the AddCustomerModal component
      return
    }
    
    const selectedCustomer = customers.find((c) => c.id === customerId) || null
    
    setFormData((prev) => ({
      ...prev,
      selectedCustomerId: customerId,
      selectedCustomerDetails: selectedCustomer,
    }))
  }

  // Handle new customer added via modal
  const handleCustomerAdded = (newCustomer: any) => {
    const customerObj = {
      id: newCustomer.id,
      name: newCustomer.name,
      address: newCustomer.address,
      phone: newCustomer.phone,
      email: newCustomer.email,
    }
    
    // Add to customers list
    setCustomers((prev) => [...prev, customerObj])
    
    // Select the new customer
    setFormData((prev) => ({
      ...prev,
      selectedCustomerId: newCustomer.id,
      selectedCustomerDetails: customerObj,
    }))
  }

  // Handle input changes for non-item fields
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]: name === "date" ? value : Number(value),
    }))
  }
  
  // Handle item field changes
  const handleItemChange = (itemId: string, field: string, value: string | number) => {
    setFormData((prev) => {
      const newItems = prev.items.map((item) => {
        if (item.id === itemId) {
          const updatedItem = {
            ...item,
            [field]: field === "name" ? value : Number(value),
          }
          
          // Recalculate total for this item
          updatedItem.total = calculateItemBaseTotal(
            updatedItem.quantity,
            updatedItem.weight,
            updatedItem.pricePerGram
          )
          
          return updatedItem
        }
        return item
      })
      
      return { ...prev, items: newItems }
    })
  }
  
  // Add a new item to the list
  const addItem = () => {
    setFormData((prev) => ({
      ...prev,
      items: [
        ...prev.items,
        {
          id: uuidv4(),
          name: "",
          quantity: 1,
          weight: 0,
          pricePerGram: prev.items[0]?.pricePerGram || 6450, // Use the price from the first item or default
          total: 0,
        },
      ],
    }))
  }
  
  // Remove an item from the list
  const removeItem = (itemId: string) => {
    // Don't remove if it's the last item
    if (formData.items.length <= 1) {
      return
    }
    
    setFormData((prev) => ({
      ...prev,
      items: prev.items.filter((item) => item.id !== itemId),
    }))
  }

  // Calculate base total for a single item (without making charges)
  const calculateItemBaseTotal = (quantity: number, weight: number, pricePerGram: number) => {
    return (quantity * weight * pricePerGram) / 10 // Price per 10 grams
  }

  // Calculate overall totals
  const calculateTotal = () => {
    const { items, gst } = formData
    
    // Calculate base value (gold value) for all items
    const itemsBaseTotal = items.reduce((sum, item) => 
      sum + calculateItemBaseTotal(item.quantity, item.weight, item.pricePerGram), 0
    )
    
    // Subtotal is the base value of all items
    const subtotal = itemsBaseTotal
    
    // Grand total before GST is the same as subtotal since we no longer have making charges
    const grandTotalBeforeGst = subtotal
    
    // Calculate GST on the grand total
    const gstAmount = grandTotalBeforeGst * (gst / 100)
    
    // Total including GST
    const total = grandTotalBeforeGst + gstAmount
    
    return {
      itemsBaseTotal: itemsBaseTotal.toFixed(2),
      subtotal: subtotal.toFixed(2),
      grandTotalBeforeGst: grandTotalBeforeGst.toFixed(2),
      gstAmount: gstAmount.toFixed(2),
      total: total.toFixed(2),
    }
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    // Check if any item is invalid
    if (formData.items.some(item => !item.name.trim() || item.quantity <= 0 || item.weight <= 0)) {
      toast({
        title: "Required fields missing",
        description: "Please fill in all required item fields with valid values",
        variant: "destructive",
      })
      return
    }
    
    // Validate customer selection
    if (!formData.selectedCustomerId) {
      toast({
        title: "Customer required",
        description: "Please select a customer for the invoice",
        variant: "destructive",
      })
      return
    }
    
    // If customer ID is "add_new_customer" but we don't have a name, show error
    if (formData.selectedCustomerId === "add_new_customer" && (!formData.selectedCustomerDetails || !formData.selectedCustomerDetails.name.trim())) {
      toast({
        title: "Customer name required",
        description: "Please enter a name for the new customer",
        variant: "destructive",
      })
      return
    }
    
    // Save invoice to database before showing preview
    handleSaveInvoice().then(() => {
      setShowPreview(true)
    }).catch(error => {
      toast({
        title: "Error saving invoice",
        description: error.message || "Failed to save the invoice to the database",
        variant: "destructive",
      })
    })
  }

  // Save invoice data to Supabase
  const saveInvoiceToDB = async () => {
    if (!user) {
      throw new Error("User not authenticated")
    }
    
    try {
      setIsSaving(true)
      
      const invoiceData = generateInvoiceData()
      const calculatedTotals = calculateTotal()
      const customer = formData.selectedCustomerDetails
      
      // Insert the main invoice record
      const { data: invoiceRecord, error: invoiceError } = await supabase
        .from('invoices')
        .insert({
          user_id: user.id,
          customer_id: formData.selectedCustomerId !== "add_new_customer" ? formData.selectedCustomerId : null,
          invoice_number: invoiceData.invoiceNumber,
          invoice_date: new Date(formData.date).toISOString().split('T')[0],
          status: 'finalized',
          customer_name_snapshot: customer?.name || "Customer",
          customer_address_snapshot: customer?.address || null,
          customer_phone_snapshot: customer?.phone || null,
          customer_email_snapshot: customer?.email || null,
          firm_name_snapshot: firmDetails.firmName,
          firm_address_snapshot: firmDetails.firmAddress,
          firm_phone_snapshot: firmDetails.firmPhone,
          firm_gstin_snapshot: firmDetails.firmGstin,
          subtotal: Number(calculatedTotals.subtotal),
          gst_percentage: formData.gst,
          gst_amount: Number(calculatedTotals.gstAmount),
          grand_total: Number(calculatedTotals.total)
        })
        .select('id')
        .single()
      
      if (invoiceError) {
        throw new Error(`Error saving invoice: ${invoiceError.message}`)
      }
      
      if (!invoiceRecord) {
        throw new Error("Failed to create invoice record")
      }
      
      // Now insert all the invoice items
      const invoiceItems = formData.items.map(item => ({
        invoice_id: invoiceRecord.id,
        user_id: user.id,
        name: item.name,
        quantity: item.quantity,
        weight: item.weight,
        price_per_gram: item.pricePerGram,
        total: item.total
      }))
      
      const { error: itemsError } = await supabase
        .from('invoice_items')
        .insert(invoiceItems)
      
      if (itemsError) {
        throw new Error(`Error saving invoice items: ${itemsError.message}`)
      }
      
      // Update the invoice_next_number in user_settings
      const { error: updateError } = await supabase
        .from('user_settings')
        .update({ invoice_next_number: invoiceNextNumber + 1 })
        .eq('user_id', user.id)
      
      if (updateError) {
        console.error(`Error updating invoice number: ${updateError.message}`)
        // Continue anyway, as the invoice is already saved
      } else {
        // Update local state for next invoice
        setInvoiceNextNumber(invoiceNextNumber + 1)
      }
      
      toast({
        title: "Invoice saved",
        description: `Invoice ${invoiceData.invoiceNumber} has been successfully saved.`,
        variant: "default",
      })
      
      return invoiceRecord.id
    } catch (error: any) {
      console.error("Error saving invoice:", error)
      throw error
    } finally {
      setIsSaving(false)
    }
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date
      .toLocaleDateString("en-IN", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      })
      .replace(/\//g, "/")
  }

  const generateInvoiceData = () => {
    const calculatedTotals = calculateTotal()
    const customer = formData.selectedCustomerDetails || { 
      name: "Customer", 
      address: undefined,
      phone: undefined,
      email: undefined 
    }
    
    return {
      invoiceNumber:
        invoicePrefix +
        invoiceNextNumber.toString()
          .padStart(4, "0"),
      date: formatDate(formData.date),
      customerName: customer.name,
      customerAddress: customer.address,
      customerPhone: customer.phone,
      customerEmail: customer.email,
      firmName: firmDetails.firmName,
      firmAddress: firmDetails.firmAddress,
      firmPhone: firmDetails.firmPhone,
      firmGstin: firmDetails.firmGstin,
      items: formData.items.map((item) => ({
        name: item.name,
        quantity: item.quantity,
        weight: item.weight,
        pricePerGram: item.pricePerGram,
        total: item.total,
      })),
      subtotal: Number(calculatedTotals.subtotal),
      gstPercentage: formData.gst,
      gstAmount: Number(calculatedTotals.gstAmount),
      total: Number(calculatedTotals.total),
    }
  }

  // Handle printing
  const handlePrint = useReactToPrint({
    contentRef: invoiceRef,
    documentTitle: `Invoice-${generateInvoiceData().invoiceNumber}`,
  });

  const handleSaveInvoice = async () => {
    if (!user) {
      toast({
        title: "Authentication required",
        description: "Please log in to save an invoice",
        variant: "destructive",
      })
      return
    }
    
    // Validate required fields
    if (formData.items.some(item => !item.name.trim() || item.quantity <= 0 || item.weight <= 0)) {
      toast({
        title: "Required fields missing",
        description: "Please fill in all required item fields with valid values",
        variant: "destructive",
      })
      return
    }
    
    try {
      setIsSaving(true)
      
      const id = await saveInvoiceToDB()
      
      toast({
        title: "Invoice saved",
        description: "The invoice has been successfully saved.",
        variant: "default",
      })
      
      // Navigate to invoice detail page
      router.push(`/invoices/${id}`)
    } catch (error: any) {
      console.error("Error saving invoice:", error)
      toast({
        title: "Error saving invoice",
        description: error.message || "An error occurred while saving the invoice.",
        variant: "destructive",
      })
    } finally {
      setIsSaving(false)
    }
  }

  // Handle previewing the invoice
  const handlePreview = (e: React.FormEvent) => {
    e.preventDefault()
    
    // Check if any item is invalid
    if (formData.items.some(item => !item.name.trim() || item.quantity <= 0 || item.weight <= 0)) {
      toast({
        title: "Required fields missing",
        description: "Please fill in all required item fields with valid values",
        variant: "destructive",
      })
      return
    }
    
    // If customer ID is "add_new_customer" but we don't have a name, show error
    if (formData.selectedCustomerId === "add_new_customer" && (!formData.selectedCustomerDetails || !formData.selectedCustomerDetails.name.trim())) {
      toast({
        title: "Customer name required",
        description: "Please enter a name for the new customer",
        variant: "destructive",
      })
      return
    }
    
    setShowPreview(true)
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <Link href="/dashboard" className="flex items-center gap-2 font-semibold">
          <FileText className="h-6 w-6 text-amber-500" />
          <span className="text-xl">Sethiya Gold</span>
        </Link>
      </header>
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <div className="flex items-center">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm" className="gap-1">
              <ArrowLeft className="h-4 w-4" />
              Back to Dashboard
            </Button>
          </Link>
          <h1 className="ml-4 text-xl font-semibold md:text-2xl">Create New Invoice</h1>
        </div>

        {!showPreview ? (
          <Card>
            <CardHeader>
              <CardTitle>Invoice Details</CardTitle>
              <CardDescription>Fill in the details to create a new invoice</CardDescription>
            </CardHeader>
            <form onSubmit={handleSubmit}>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                  <div className="space-y-2">
                    <Label htmlFor="customer">Customer</Label>
                    <Select 
                      value={formData.selectedCustomerId} 
                      onValueChange={handleCustomerChange}
                    >
                      <SelectTrigger id="customer">
                        <SelectValue placeholder="Select customer" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectGroup>
                          <SelectLabel>Customers</SelectLabel>
                          {customers.map((customer) => (
                            <SelectItem key={customer.id} value={customer.id}>
                              {customer.name}
                            </SelectItem>
                          ))}
                          <SelectItem value="add_new_customer">
                            <span className="text-primary">+ Add New Customer</span>
                          </SelectItem>
                        </SelectGroup>
                      </SelectContent>
                    </Select>
                    {formData.selectedCustomerId === "add_new_customer" && (
                      <AddCustomerModal onCustomerAdded={handleCustomerAdded} />
                    )}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="date">Date</Label>
                    <Input id="date" name="date" type="date" value={formData.date} onChange={handleChange} required />
                  </div>
                </div>

                {formData.selectedCustomerDetails && (
                  <div className="rounded-md border p-3 text-sm">
                    <p className="font-medium">{formData.selectedCustomerDetails.name}</p>
                    {formData.selectedCustomerDetails.address && (
                      <p className="text-muted-foreground">{formData.selectedCustomerDetails.address}</p>
                    )}
                    <p className="text-muted-foreground">
                      {formData.selectedCustomerDetails.phone && `Phone: ${formData.selectedCustomerDetails.phone}`}
                      {formData.selectedCustomerDetails.phone && formData.selectedCustomerDetails.email && " | "}
                      {formData.selectedCustomerDetails.email && `Email: ${formData.selectedCustomerDetails.email}`}
                    </p>
                  </div>
                )}

                <Separator />

                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h3 className="text-lg font-medium">Jewelry Items</h3>
                    <Button 
                      type="button" 
                      variant="outline" 
                      size="sm" 
                      onClick={addItem}
                      className="gap-1"
                    >
                      <Plus className="h-4 w-4" />
                      Add Item
                    </Button>
                  </div>

                  {formData.items.map((item, index) => (
                    <div key={item.id} className="rounded-md border p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-medium">Item {index + 1}</h4>
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          onClick={() => removeItem(item.id)}
                          disabled={formData.items.length <= 1}
                          className="h-8 w-8 rounded-full p-0"
                        >
                          <Trash2 className="h-4 w-4 text-destructive" />
                          <span className="sr-only">Remove</span>
                        </Button>
                      </div>

                      <div className="space-y-4">
                        <div className="space-y-2">
                          <Label htmlFor={`item-name-${item.id}`}>Jewelry Item Name</Label>
                          <Input
                            id={`item-name-${item.id}`}
                            value={item.name}
                            onChange={(e) => handleItemChange(item.id, "name", e.target.value)}
                            placeholder="Enter jewelry item name"
                            required
                          />
                        </div>

                        <div className="grid grid-cols-1 gap-4 md:grid-cols-3">
                          <div className="space-y-2">
                            <Label htmlFor={`item-quantity-${item.id}`}>Quantity</Label>
                            <Input
                              id={`item-quantity-${item.id}`}
                              type="number"
                              min="1"
                              value={item.quantity}
                              onChange={(e) => handleItemChange(item.id, "quantity", e.target.value)}
                              required
                            />
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor={`item-weight-${item.id}`}>Weight (in grams)</Label>
                            <Input
                              id={`item-weight-${item.id}`}
                              type="number"
                              step="0.01"
                              min="0"
                              placeholder="Enter weight in grams"
                              value={item.weight || ""}
                              onChange={(e) => handleItemChange(item.id, "weight", e.target.value)}
                              required
                            />
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor={`item-price-${item.id}`}>Price per 10 grams (₹)</Label>
                            <Input
                              id={`item-price-${item.id}`}
                              type="number"
                              step="0.01"
                              min="0"
                              placeholder="Enter price per 10 grams"
                              value={item.pricePerGram}
                              onChange={(e) => handleItemChange(item.id, "pricePerGram", e.target.value)}
                              required
                            />
                          </div>
                        </div>
                        
                        <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                          <div className="space-y-2 flex flex-col justify-end">
                            <div className="text-right">
                              <div className="text-sm text-muted-foreground">Base Value: ₹{calculateItemBaseTotal(item.quantity, item.weight, item.pricePerGram).toFixed(2)}</div>
                              <div className="font-medium">Item Total: ₹{item.total.toFixed(2)}</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="gst">GST (%)</Label>
                  <Input
                    id="gst"
                    name="gst"
                    type="number"
                    step="0.01"
                    min="0"
                    value={formData.gst}
                    onChange={handleChange}
                    disabled
                  />
                  <p className="text-sm text-muted-foreground">GST for jewelry is fixed at 3%</p>
                </div>

                <div className="rounded-lg bg-muted p-4">
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span>Items Base Total:</span>
                      <span>₹{calculateTotal().itemsBaseTotal}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Subtotal (Before GST):</span>
                      <span>₹{calculateTotal().grandTotalBeforeGst}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>GST ({formData.gst}%):</span>
                      <span>₹{calculateTotal().gstAmount}</span>
                    </div>
                    <Separator />
                    <div className="flex justify-between font-bold">
                      <span>Total Amount:</span>
                      <span>₹{calculateTotal().total}</span>
                    </div>
                  </div>
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <Button variant="outline" type="button" onClick={() => router.push("/dashboard")} disabled={isSaving}>
                  Cancel
                </Button>
                <Button type="submit" className="bg-amber-600 hover:bg-amber-700" disabled={isSaving}>
                  {isSaving ? (
                    <>
                      <svg className="mr-2 h-4 w-4 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Saving Invoice...
                    </>
                  ) : (
                    <>
                      <Save className="mr-2 h-4 w-4" />
                      Generate Invoice
                    </>
                  )}
                </Button>
              </CardFooter>
            </form>
          </Card>
        ) : (
          <div className="space-y-4">
            <div className="flex justify-between">
              <Button variant="outline" onClick={() => setShowPreview(false)}>
                <ArrowLeft className="mr-2 h-4 w-4" />
                Edit Invoice
              </Button>
              <div className="flex gap-2">
                {isBrowser && (
                  <>
                    <Button variant="outline" onClick={handlePrint}>
                      <Printer className="mr-2 h-4 w-4" />
                      Print Invoice
                    </Button>
                  </>
                )}
                <PDFDownloadLinkWrapper
                  invoiceData={generateInvoiceData()}
                  onStartGeneration={() => setIsGeneratingPDF(true)}
                  onFinishGeneration={() => setIsGeneratingPDF(false)}
                />
              </div>
            </div>

            <div ref={invoiceRef}>
              <InvoicePreview invoiceData={generateInvoiceData()} />
            </div>
          </div>
        )}
      </main>
    </div>
  )
}
</file>

<file path="app/invoices/[id]/page.tsx">
"use client"

import { useState, useEffect, useRef, useMemo } from "react"
import Link from "next/link"
import { useRouter, useParams } from "next/navigation"
import { useReactToPrint } from "react-to-print"
import dynamic from "next/dynamic"
import { ArrowLeft, Save, Printer, Edit, DollarSign } from "lucide-react"

import { Button } from "@/components/ui/button"
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog"
import { Skeleton } from "@/components/ui/skeleton"
import { useToast } from "@/components/ui/use-toast"
import { useAuth } from "@/components/auth-provider"
import supabase from "@/lib/supabase"
import { InvoicePreview, InvoiceData } from "@/app/create-invoice/invoice-preview"

// Dynamically import PDF components with ssr: false to ensure they only load on the client
const PDFDownloadLinkWrapper = dynamic(
  () => import("@/app/create-invoice/pdf-download-link-wrapper").then((mod) => mod.PDFDownloadLinkWrapper),
  { ssr: false },
)

interface InvoiceItem {
  id: string
  name: string
  quantity: number
  weight: number
  price_per_gram: number
  total: number
}

export default function InvoiceDetailPage() {
  const router = useRouter()
  const params = useParams()
  const { user, isLoading: authLoading } = useAuth()
  const { toast } = useToast()
  
  const [invoice, setInvoice] = useState<any>(null)
  const [invoiceItems, setInvoiceItems] = useState<InvoiceItem[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [isUpdating, setIsUpdating] = useState(false)
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false)
  const [isBrowser, setIsBrowser] = useState(false)
  
  const invoiceRef = useRef<HTMLDivElement>(null)
  
  // Check if user is authenticated
  useEffect(() => {
    if (!authLoading && !user) {
      router.push("/")
      toast({
        title: "Authentication required",
        description: "Please log in to view this invoice",
        variant: "destructive",
      })
    }
  }, [user, authLoading, router, toast])
  
  // Set isBrowser to true once component mounts
  useEffect(() => {
    setIsBrowser(true)
  }, [])
  
  // Fetch invoice data
  useEffect(() => {
    if (user && params.id) {
      fetchInvoiceData()
    }
  }, [user, params.id])
  
  // Fetch invoice and its items
  const fetchInvoiceData = async () => {
    if (!user) return
    
    try {
      setIsLoading(true)
      
      // Fetch invoice
      const { data: invoiceData, error: invoiceError } = await supabase
        .from('invoices')
        .select('*')
        .eq('id', params.id)
        .eq('user_id', user.id)
        .single()
      
      if (invoiceError) throw invoiceError
      
      if (!invoiceData) {
        toast({
          title: "Invoice not found",
          description: "The requested invoice could not be found",
          variant: "destructive",
        })
        router.push("/invoices")
        return
      }
      
      setInvoice(invoiceData)
      
      // Fetch invoice items
      const { data: itemsData, error: itemsError } = await supabase
        .from('invoice_items')
        .select('*')
        .eq('invoice_id', params.id)
        .order('created_at', { ascending: true })
      
      if (itemsError) throw itemsError
      
      setInvoiceItems(itemsData || [])
    } catch (error: any) {
      console.error("Error fetching invoice:", error)
      toast({
        title: "Error loading invoice",
        description: error.message || "Could not load invoice details",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }
  
  // Mark invoice as paid
  const markAsPaid = async () => {
    if (!user || !invoice) return
    
    try {
      setIsUpdating(true)
      
      const { error } = await supabase
        .from('invoices')
        .update({ status: 'paid' })
        .eq('id', invoice.id)
        .eq('user_id', user.id)
      
      if (error) throw error
      
      // Update local state
      setInvoice({ ...invoice, status: 'paid' })
      
      toast({
        title: "Invoice updated",
        description: "Invoice has been marked as paid",
        variant: "default",
      })
    } catch (error: any) {
      console.error("Error updating invoice:", error)
      toast({
        title: "Update failed",
        description: error.message || "Could not update invoice status",
        variant: "destructive",
      })
    } finally {
      setIsUpdating(false)
    }
  }
  
  // Format invoice data for the preview component - memoized to avoid recalculation
  // All formatting logic is inside useMemo to ensure stable references and proper dependency tracking
  const invoiceData = useMemo((): InvoiceData | null => {
    if (!invoice) return null
    
    // Safe date formatter - handles null, undefined, and invalid dates
    const formatDate = (dateString: any): string => {
      if (!dateString) return 'N/A'
      
      try {
        const date = new Date(dateString)
        // Check if date is valid
        if (isNaN(date.getTime())) {
          return 'N/A'
        }
        return date.toLocaleDateString('en-IN', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
        })
      } catch (error) {
        console.error('Error formatting date:', error)
        return 'N/A'
      }
    }
    
    // Safe number converter with bounds checking
    const safeNumber = (value: any, min: number = 0, max: number = Number.MAX_SAFE_INTEGER): number => {
      const num = Number(value)
      if (isNaN(num) || !isFinite(num) || num < min || num > max) {
        return 0
      }
      return num
    }
    
    try {
      // Create stable item references by pre-processing
      const processedItems = invoiceItems.map(item => ({
        name: String(item.name || ''),
        quantity: safeNumber(item.quantity, 0, 999999),
        weight: safeNumber(item.weight, 0, 999999),
        pricePerGram: safeNumber(item.price_per_gram, 0, 999999),
        total: safeNumber(item.total, 0, 99999999),
      }))
      
      return {
        invoiceNumber: String(invoice.invoice_number || 'N/A'),
        date: formatDate(invoice.invoice_date),
        customerName: String(invoice.customer_name_snapshot || ''),
        customerAddress: invoice.customer_address_snapshot ? String(invoice.customer_address_snapshot) : undefined,
        customerPhone: invoice.customer_phone_snapshot ? String(invoice.customer_phone_snapshot) : undefined,
        customerEmail: invoice.customer_email_snapshot ? String(invoice.customer_email_snapshot) : undefined,
        firmName: String(invoice.firm_name_snapshot || ''),
        firmAddress: String(invoice.firm_address_snapshot || ''),
        firmPhone: String(invoice.firm_phone_snapshot || ''),
        firmGstin: String(invoice.firm_gstin_snapshot || ''),
        items: processedItems,
        subtotal: safeNumber(invoice.subtotal, 0, 99999999),
        gstPercentage: safeNumber(invoice.gst_percentage, 0, 100),
        gstAmount: safeNumber(invoice.gst_amount, 0, 99999999),
        total: safeNumber(invoice.grand_total, 0, 99999999),
      }
    } catch (error) {
      console.error('Error formatting invoice data:', error)
      return null
    }
  }, [invoice, invoiceItems])
  
  // Handle printing
  const handlePrint = useReactToPrint({
    contentRef: invoiceRef,
    documentTitle: `Invoice-${invoice?.invoice_number}`,
  })
  
  // Show loading state or nothing while checking authentication
  if (authLoading || !user) {
    return <div className="flex min-h-screen items-center justify-center">Loading...</div>
  }
  
  // Show loading state while fetching data
  if (isLoading) {
    return (
      <>
        <div className="flex items-center">
          <Link href="/invoices">
            <Button variant="ghost" size="sm" className="gap-1">
              <ArrowLeft className="h-4 w-4" />
              Back to Invoices
            </Button>
          </Link>
          <Skeleton className="ml-4 h-8 w-48" />
        </div>
        <div className="flex justify-end gap-2">
          <Skeleton className="h-10 w-28" />
          <Skeleton className="h-10 w-28" />
          <Skeleton className="h-10 w-28" />
        </div>
        <Skeleton className="h-[60vh] w-full" />
      </>
    )
  }
  
  // If no invoice found
  if (!invoice) {
    return (
      <div className="flex flex-1 flex-col items-center justify-center">
        <h1 className="text-2xl font-bold">Invoice Not Found</h1>
        <p className="mb-4 text-muted-foreground">The requested invoice could not be found</p>
        <Link href="/invoices">
          <Button>Back to Invoices</Button>
        </Link>
      </div>
    )
  }
  
  return (
    <>
      <div className="flex items-center">
        <Link href="/invoices">
          <Button variant="ghost" size="sm" className="gap-1">
            <ArrowLeft className="h-4 w-4" />
            Back to Invoices
          </Button>
        </Link>
        <h1 className="ml-4 text-xl font-semibold md:text-2xl">
          Invoice #{invoice.invoice_number}
        </h1>
      </div>
      
      <div className="flex flex-wrap justify-end gap-2">
        {invoice.status !== 'paid' && (
          <AlertDialog>
            <AlertDialogTrigger asChild>
              <Button variant="outline" disabled={isUpdating}>
                <DollarSign className="mr-2 h-4 w-4" />
                Mark as Paid
              </Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Mark Invoice as Paid?</AlertDialogTitle>
                <AlertDialogDescription>
                  This will update the invoice status to "Paid". This action cannot be undone.
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>Cancel</AlertDialogCancel>
                <AlertDialogAction onClick={markAsPaid}>Continue</AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        )}
        
        <Link href={`/invoices/${invoice.id}/edit`}>
          <Button variant="outline">
            <Edit className="mr-2 h-4 w-4" />
            Edit Invoice
          </Button>
        </Link>
        
        {isBrowser && (
          <Button variant="outline" onClick={handlePrint}>
            <Printer className="mr-2 h-4 w-4" />
            Print Invoice
          </Button>
        )}
        
        {isBrowser && invoiceData && invoiceItems.length > 0 && (
          <PDFDownloadLinkWrapper
            invoiceData={invoiceData}
            onStartGeneration={() => setIsGeneratingPDF(true)}
            onFinishGeneration={() => setIsGeneratingPDF(false)}
          />
        )}
      </div>
      
      <div ref={invoiceRef}>
        {invoiceData && (
          <InvoicePreview invoiceData={invoiceData} />
        )}
      </div>
    </>
  )
}
</file>

<file path="app/settings/page.tsx">
"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { ArrowLeft, Download, FileText, Home, Mail, Phone, Save, Settings, Upload, Building, Bell, Database, Receipt, Tag, Image } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Checkbox } from "@/components/ui/checkbox"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { toast } from "@/components/ui/use-toast"
import { useAuth } from "@/components/auth-provider"
import supabase from "@/lib/supabase"
import { Textarea } from "@/components/ui/textarea"

export default function SettingsPage() {
  const { user, isLoading } = useAuth();
  const [isSettingsLoading, setIsSettingsLoading] = useState(true);
  
  const [firmDetails, setFirmDetails] = useState({
    name: "Sethiya Gold",
    phone: "+91 9876543210",
    address: "123 Jewelry Lane, Mumbai, Maharashtra 400001",
    gstin: "27ABCDE1234F1Z5",
    email: "contact@sethiyagold.com",
    website: "www.sethiyagold.com",
    establishmentDate: "01/01/1995"
  });
  
  const [notificationSettings, setNotificationSettings] = useState({
    email: true,
    push: false,
    sms: true,
    whatsapp: false,
    frequency: "instant",
    quietHoursStart: "22:00",
    quietHoursEnd: "07:00"
  });
  
  const [invoiceSettings, setInvoiceSettings] = useState({
    defaultPrefix: "INV-",
    nextNumber: 1,
    defaultNotes: ""
  });
  
  const [labelSettings, setLabelSettings] = useState({
    type: "standard",
    copies: 1,
    includeProductName: true,
    includePrice: true,
    includeBarcode: true,
    includeDate: true,
    includeMetal: true,
    includeWeight: true,
    includePurity: true,
    includeQrCode: true,
    qrErrorCorrection: "M"
  });
  
  const [photoSettings, setPhotoSettings] = useState({
    compressionLevel: "medium"
  });
  
  const [backupFileName, setBackupFileName] = useState("");
  
  // Fetch user settings when component mounts and user is available
  useEffect(() => {
    const fetchUserSettings = async () => {
      if (!user) return;
      
      try {
        setIsSettingsLoading(true);
        const { data, error } = await supabase
          .from('user_settings')
          .select('*')
          .eq('user_id', user.id)
          .single();
        
        if (error) {
          // If error is not 'no rows returned', show error
          if (error.code !== 'PGRST116') {
            console.error('Error fetching settings:', error);
            toast({
              title: "Error loading settings",
              description: "There was a problem loading your settings. Please try again.",
              variant: "destructive",
            });
          }
          // For first time users or no settings found, keep default values
        } else if (data) {
          // Update firm details
          setFirmDetails({
            name: data.firm_name || firmDetails.name,
            phone: data.firm_phone || firmDetails.phone,
            address: data.firm_address || firmDetails.address,
            gstin: data.firm_gstin || firmDetails.gstin,
            email: data.firm_email || firmDetails.email,
            website: data.firm_website || firmDetails.website,
            establishmentDate: data.firm_establishment_date || firmDetails.establishmentDate
          });
          
          // Update notification settings
          setNotificationSettings({
            email: data.notifications_email_enabled ?? notificationSettings.email,
            push: data.notifications_push_enabled ?? notificationSettings.push,
            sms: data.notifications_sms_enabled ?? notificationSettings.sms,
            whatsapp: data.notifications_whatsapp_enabled ?? notificationSettings.whatsapp,
            frequency: data.notifications_frequency || notificationSettings.frequency,
            quietHoursStart: data.notifications_quiet_hours_start || notificationSettings.quietHoursStart,
            quietHoursEnd: data.notifications_quiet_hours_end || notificationSettings.quietHoursEnd
          });
          
          // Update invoice settings
          setInvoiceSettings({
            defaultPrefix: data.invoice_default_prefix || invoiceSettings.defaultPrefix,
            nextNumber: data.invoice_next_number || invoiceSettings.nextNumber,
            defaultNotes: data.invoice_default_notes || invoiceSettings.defaultNotes
          });
          
          // Update label settings
          setLabelSettings({
            type: data.label_type || labelSettings.type,
            copies: data.label_copies || labelSettings.copies,
            includeProductName: data.label_include_product_name ?? labelSettings.includeProductName,
            includePrice: data.label_include_price ?? labelSettings.includePrice,
            includeBarcode: data.label_include_barcode ?? labelSettings.includeBarcode,
            includeDate: data.label_include_date ?? labelSettings.includeDate,
            includeMetal: data.label_include_metal ?? labelSettings.includeMetal,
            includeWeight: data.label_include_weight ?? labelSettings.includeWeight,
            includePurity: data.label_include_purity ?? labelSettings.includePurity,
            includeQrCode: data.label_include_qr_code ?? labelSettings.includeQrCode,
            qrErrorCorrection: data.label_qr_error_correction || labelSettings.qrErrorCorrection
          });
          
          // Update photo settings
          setPhotoSettings({
            compressionLevel: data.photo_compression_level || photoSettings.compressionLevel
          });
        }
      } catch (error) {
        console.error('Error in fetchUserSettings:', error);
      } finally {
        setIsSettingsLoading(false);
      }
    };
    
    if (!isLoading) {
      fetchUserSettings();
    }
  }, [user, isLoading]);
  
  const handleFirmDetailChange = (field: string, value: string) => {
    setFirmDetails(prev => ({
      ...prev,
      [field]: value
    }));
  };
  
  const handleNotificationChange = (field: string, value: boolean | string) => {
    setNotificationSettings(prev => ({
      ...prev,
      [field]: value
    }));
  };
  
  const handleInvoiceSettingChange = (field: string, value: string | number) => {
    setInvoiceSettings(prev => ({
      ...prev,
      [field]: value
    }));
  };
  
  const handleLabelSettingChange = (field: string, value: string | number | boolean) => {
    setLabelSettings(prev => ({
      ...prev,
      [field]: value
    }));
  };
  
  const handlePhotoSettingChange = (field: string, value: string) => {
    setPhotoSettings(prev => ({
      ...prev,
      [field]: value
    }));
  };
  
  const handleSaveChanges = async () => {
    if (!user) {
      toast({
        title: "Authentication required",
        description: "You must be logged in to save settings.",
        variant: "destructive",
      });
      return;
    }
    
    try {
      // Construct the settings payload
      const settingsPayload = {
        user_id: user.id,
        // Firm Details
        firm_name: firmDetails.name,
        firm_phone: firmDetails.phone,
        firm_address: firmDetails.address,
        firm_gstin: firmDetails.gstin,
        firm_email: firmDetails.email,
        firm_website: firmDetails.website,
        firm_establishment_date: firmDetails.establishmentDate,
        // Notification Settings
        notifications_email_enabled: notificationSettings.email,
        notifications_push_enabled: notificationSettings.push,
        notifications_sms_enabled: notificationSettings.sms,
        notifications_whatsapp_enabled: notificationSettings.whatsapp,
        notifications_frequency: notificationSettings.frequency,
        notifications_quiet_hours_start: notificationSettings.quietHoursStart,
        notifications_quiet_hours_end: notificationSettings.quietHoursEnd,
        // Invoice Settings
        invoice_default_prefix: invoiceSettings.defaultPrefix,
        invoice_next_number: invoiceSettings.nextNumber,
        invoice_default_notes: invoiceSettings.defaultNotes,
        // Label Settings
        label_type: labelSettings.type,
        label_copies: labelSettings.copies,
        label_include_product_name: labelSettings.includeProductName,
        label_include_price: labelSettings.includePrice,
        label_include_barcode: labelSettings.includeBarcode,
        label_include_date: labelSettings.includeDate,
        label_include_metal: labelSettings.includeMetal,
        label_include_weight: labelSettings.includeWeight,
        label_include_purity: labelSettings.includePurity,
        label_include_qr_code: labelSettings.includeQrCode,
        label_qr_error_correction: labelSettings.qrErrorCorrection,
        // Photo Settings
        photo_compression_level: photoSettings.compressionLevel,
      };
      
      // Save settings to Supabase
      const { error } = await supabase
        .from('user_settings')
        .upsert(settingsPayload, { onConflict: 'user_id' });
      
      if (error) {
        console.error('Error saving settings:', error);
        toast({
          title: "Error saving settings",
          description: "There was a problem saving your settings. Please try again.",
          variant: "destructive",
        });
        return;
      }
      
      toast({
        title: "Changes saved",
        description: "Your settings have been updated successfully",
      });
    } catch (error) {
      console.error('Error in handleSaveChanges:', error);
      toast({
        title: "Error saving settings",
        description: "An unexpected error occurred. Please try again.",
        variant: "destructive",
      });
    }
  };
  
  const handleBackup = () => {
    toast({
      title: "Backup created",
      description: "Your data has been backed up successfully",
    });
  };
  
  const handleRestore = () => {
    if (!backupFileName) {
      toast({
        title: "No file selected",
        description: "Please select a backup file to restore",
        variant: "destructive",
      });
      return;
    }
    
    toast({
      title: "Restore initiated",
      description: "Your data is being restored from backup",
    });
  };
  
  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <div className="flex items-center gap-2 font-heading font-semibold">
          <FileText className="h-6 w-6 text-primary" />
          <span className="text-xl">Sethiya Gold</span>
        </div>
        <nav className="ml-auto flex items-center gap-4">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm">
              <Home className="mr-2 h-4 w-4" />
              Dashboard
            </Button>
          </Link>
        </nav>
      </header>
      <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
        <div className="flex items-center">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm" className="gap-1">
              <ArrowLeft className="h-4 w-4" />
              Back to Dashboard
            </Button>
          </Link>
          <div className="ml-4">
            <h1 className="text-2xl font-bold tracking-tight">Settings</h1>
          </div>
        </div>
        
        <Tabs defaultValue="firm-details" className="w-full">
          <TabsList className="mb-4 flex overflow-x-auto whitespace-nowrap">
            <TabsTrigger value="firm-details" className="flex items-center gap-2">
              <Building className="h-4 w-4" />
              <span>Firm Details</span>
            </TabsTrigger>
            <TabsTrigger value="notifications" className="flex items-center gap-2">
              <Bell className="h-4 w-4" />
              <span>Notifications</span>
            </TabsTrigger>
            <TabsTrigger value="backup" className="flex items-center gap-2">
              <Database className="h-4 w-4" />
              <span>Backup</span>
            </TabsTrigger>
            <TabsTrigger value="invoice-settings" className="flex items-center gap-2">
              <Receipt className="h-4 w-4" />
              <span>Invoice</span>
            </TabsTrigger>
            <TabsTrigger value="label-settings" className="flex items-center gap-2">
              <Tag className="h-4 w-4" />
              <span>Label</span>
            </TabsTrigger>
            <TabsTrigger value="photo-settings" className="flex items-center gap-2">
              <Image className="h-4 w-4" />
              <span>Photo</span>
            </TabsTrigger>
          </TabsList>
          
          {/* Firm Details Tab */}
          <TabsContent value="firm-details" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Firm Details</CardTitle>
                <CardDescription>Manage your firm's information</CardDescription>
              </CardHeader>
              <CardContent>
                <form className="space-y-6">
                  <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                    <div className="space-y-2">
                      <Label htmlFor="firmName">Firm Name</Label>
                      <Input 
                        id="firmName" 
                        value={firmDetails.name}
                        onChange={(e) => handleFirmDetailChange("name", e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="firmPhone">Firm Phone Number</Label>
                      <Input 
                        id="firmPhone" 
                        value={firmDetails.phone}
                        onChange={(e) => handleFirmDetailChange("phone", e.target.value)}
                      />
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="firmAddress">Firm Address</Label>
                    <Input 
                      id="firmAddress" 
                      value={firmDetails.address}
                      onChange={(e) => handleFirmDetailChange("address", e.target.value)}
                    />
                  </div>
                  
                  <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                    <div className="space-y-2">
                      <Label htmlFor="firmGstin">Firm GSTIN Number</Label>
                      <Input 
                        id="firmGstin" 
                        value={firmDetails.gstin}
                        onChange={(e) => handleFirmDetailChange("gstin", e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="firmEmail">Firm Email Address</Label>
                      <Input 
                        id="firmEmail" 
                        type="email" 
                        value={firmDetails.email}
                        onChange={(e) => handleFirmDetailChange("email", e.target.value)}
                      />
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                    <div className="space-y-2">
                      <Label htmlFor="firmWebsite">Firm Website</Label>
                      <Input 
                        id="firmWebsite" 
                        value={firmDetails.website}
                        onChange={(e) => handleFirmDetailChange("website", e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="dateEstablished">Date of Establishment</Label>
                      <Input 
                        id="dateEstablished" 
                        value={firmDetails.establishmentDate}
                        onChange={(e) => handleFirmDetailChange("establishmentDate", e.target.value)}
                      />
                    </div>
                  </div>
                  
                  <Button 
                    type="button" 
                    className="bg-primary hover:bg-primary/90"
                    onClick={handleSaveChanges}
                  >
                    <Save className="mr-2 h-4 w-4" />
                    Save Changes
                  </Button>
                </form>
              </CardContent>
            </Card>
          </TabsContent>
          
          {/* Notifications Tab */}
          <TabsContent value="notifications" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Notifications</CardTitle>
                <CardDescription>Configure your notification preferences</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium">Notification Channels</h3>
                    
                    <div className="space-y-2">
                      <div className="flex items-center justify-between">
                        <Label htmlFor="emailNotifications">Email Notifications</Label>
                        <Switch 
                          id="emailNotifications" 
                          checked={notificationSettings.email}
                          onCheckedChange={(checked) => handleNotificationChange("email", checked)}
                        />
                      </div>
                      <div className="flex items-center justify-between">
                        <Label htmlFor="pushNotifications">Push Notifications</Label>
                        <Switch 
                          id="pushNotifications" 
                          checked={notificationSettings.push}
                          onCheckedChange={(checked) => handleNotificationChange("push", checked)}
                        />
                      </div>
                      <div className="flex items-center justify-between">
                        <Label htmlFor="smsNotifications">SMS Notifications</Label>
                        <Switch 
                          id="smsNotifications" 
                          checked={notificationSettings.sms}
                          onCheckedChange={(checked) => handleNotificationChange("sms", checked)}
                        />
                      </div>
                      <div className="flex items-center justify-between">
                        <Label htmlFor="whatsappNotifications">WhatsApp Notifications</Label>
                        <Switch 
                          id="whatsappNotifications" 
                          checked={notificationSettings.whatsapp}
                          onCheckedChange={(checked) => handleNotificationChange("whatsapp", checked)}
                        />
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium">Notification Frequency and Quiet Hours</h3>
                    
                    <div className="space-y-2">
                      <Label htmlFor="notificationFrequency">Notification Frequency</Label>
                      <Select 
                        value={notificationSettings.frequency} 
                        onValueChange={(value) => handleNotificationChange("frequency", value)}
                      >
                        <SelectTrigger id="notificationFrequency">
                          <SelectValue placeholder="Select frequency" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="instant">Instant</SelectItem>
                          <SelectItem value="daily">Daily</SelectItem>
                          <SelectItem value="weekly">Weekly</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div className="space-y-2">
                      <Label>Quiet Hours</Label>
                      <div className="grid grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="quietHoursStart">Start Time</Label>
                          <Input
                            id="quietHoursStart"
                            type="time"
                            value={notificationSettings.quietHoursStart}
                            onChange={(e) => handleNotificationChange("quietHoursStart", e.target.value)}
                          />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="quietHoursEnd">End Time</Label>
                          <Input
                            id="quietHoursEnd"
                            type="time"
                            value={notificationSettings.quietHoursEnd}
                            onChange={(e) => handleNotificationChange("quietHoursEnd", e.target.value)}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <Button 
                    type="button" 
                    className="bg-primary hover:bg-primary/90"
                    onClick={handleSaveChanges}
                  >
                    <Save className="mr-2 h-4 w-4" />
                    Save Preferences
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          {/* Backup Tab */}
          <TabsContent value="backup" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Backup & Restore</CardTitle>
                <CardDescription>Create backups and restore your data</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                    {/* Create Backup Section */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-medium">Create Backup</h3>
                      <p className="text-sm text-muted-foreground">
                        Download a complete backup of your data for safekeeping.
                      </p>
                      <Button 
                        className="w-full"
                        onClick={handleBackup}
                      >
                        <Download className="mr-2 h-4 w-4" />
                        Download Backup
                      </Button>
                    </div>
                    
                    {/* Restore Backup Section */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-medium">Restore Backup</h3>
                      <div className="space-y-2">
                        <Label htmlFor="backupFile">Select Backup File</Label>
                        <div className="flex items-center">
                          <Input 
                            id="backupFile" 
                            type="file" 
                            onChange={(e) => setBackupFileName(e.target.files?.[0]?.name || "")}
                          />
                        </div>
                        <p className="text-sm text-amber-600">
                          Restoring a backup will replace all your current data
                        </p>
                      </div>
                      <Button 
                        variant="outline" 
                        className="w-full"
                        onClick={handleRestore}
                      >
                        <Upload className="mr-2 h-4 w-4" />
                        Restore Selected Backup
                      </Button>
                    </div>
                  </div>
                  
                  {/* Backup History */}
                  <div className="space-y-4 rounded-md border p-4">
                    <h3 className="font-medium">Backup History</h3>
                    
                    <div className="space-y-4">
                      <div>
                        <h4 className="text-sm font-medium">Recent Backups Created</h4>
                        <p className="text-sm text-muted-foreground">No recent backups</p>
                      </div>
                      
                      <div>
                        <h4 className="text-sm font-medium">Recent Restores</h4>
                        <p className="text-sm text-muted-foreground">No recent restores</p>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Invoice Settings Tab */}
          <TabsContent value="invoice-settings" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Invoice Settings</CardTitle>
                <CardDescription>Configure your invoice preferences and defaults</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                    <div className="space-y-2">
                      <Label htmlFor="invoicePrefix">Invoice Number Prefix</Label>
                      <Input
                        id="invoicePrefix"
                        placeholder="e.g., INV-"
                        value={invoiceSettings.defaultPrefix}
                        onChange={(e) => handleInvoiceSettingChange("defaultPrefix", e.target.value)}
                      />
                      <p className="text-xs text-muted-foreground">
                        This will be prepended to invoice numbers (e.g., INV-001)
                      </p>
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="nextInvoiceNumber">Next Invoice Number</Label>
                      <Input
                        id="nextInvoiceNumber"
                        type="number"
                        min="1"
                        placeholder="1"
                        value={invoiceSettings.nextNumber}
                        onChange={(e) => handleInvoiceSettingChange("nextNumber", parseInt(e.target.value, 10) || 1)}
                      />
                      <p className="text-xs text-muted-foreground">
                        The next invoice will use this number and increment it
                      </p>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="defaultNotes">Default Invoice Notes</Label>
                    <Textarea
                      id="defaultNotes"
                      placeholder="These notes will appear on all invoices by default"
                      rows={4}
                      value={invoiceSettings.defaultNotes}
                      onChange={(e) => handleInvoiceSettingChange("defaultNotes", e.target.value)}
                    />
                  </div>
                  
                  <Button 
                    type="button" 
                    className="bg-primary hover:bg-primary/90"
                    onClick={handleSaveChanges}
                  >
                    <Save className="mr-2 h-4 w-4" />
                    Save Invoice Settings
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Label Settings Tab */}
          <TabsContent value="label-settings" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Label Configuration</CardTitle>
                <CardDescription>Configure and print labels for inventory items</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 gap-8 lg:grid-cols-2">
                  {/* Label Options */}
                  <div className="space-y-6">
                    <h3 className="text-lg font-semibold">Label Options</h3>
                    
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <Label htmlFor="label-type">Label Type</Label>
                        <Select 
                          value={labelSettings.type}
                          onValueChange={(value) => handleLabelSettingChange('type', value)}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select label type" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="standard">Standard</SelectItem>
                            <SelectItem value="large">Large</SelectItem>
                            <SelectItem value="small">Small</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="label-copies">Number of Copies</Label>
                        <Input
                          id="label-copies"
                          type="number"
                          min="1"
                          value={labelSettings.copies}
                          onChange={(e) => handleLabelSettingChange('copies', parseInt(e.target.value) || 1)}
                        />
                      </div>

                      <div className="space-y-3">
                        <Label>Include in Label</Label>
                        <div className="grid grid-cols-2 gap-4">
                          <div className="space-y-4">
                            <div className="flex items-center space-x-2">
                              <Checkbox
                                id="include-product-name"
                                checked={labelSettings.includeProductName}
                                onCheckedChange={(checked) => handleLabelSettingChange('includeProductName', checked)}
                              />
                              <Label htmlFor="include-product-name" className="font-normal">Product Name</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Checkbox
                                id="include-price"
                                checked={labelSettings.includePrice}
                                onCheckedChange={(checked) => handleLabelSettingChange('includePrice', checked)}
                              />
                              <Label htmlFor="include-price" className="font-normal">Price</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Checkbox
                                id="include-barcode"
                                checked={labelSettings.includeBarcode}
                                onCheckedChange={(checked) => handleLabelSettingChange('includeBarcode', checked)}
                              />
                              <Label htmlFor="include-barcode" className="font-normal">Barcode</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Checkbox
                                id="include-date"
                                checked={labelSettings.includeDate}
                                onCheckedChange={(checked) => handleLabelSettingChange('includeDate', checked)}
                              />
                              <Label htmlFor="include-date" className="font-normal">Date</Label>
                            </div>
                          </div>
                          <div className="space-y-4">
                            <div className="flex items-center space-x-2">
                              <Checkbox
                                id="include-metal"
                                checked={labelSettings.includeMetal}
                                onCheckedChange={(checked) => handleLabelSettingChange('includeMetal', checked)}
                              />
                              <Label htmlFor="include-metal" className="font-normal">Metal</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Checkbox
                                id="include-weight"
                                checked={labelSettings.includeWeight}
                                onCheckedChange={(checked) => handleLabelSettingChange('includeWeight', checked)}
                              />
                              <Label htmlFor="include-weight" className="font-normal">Weight</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Checkbox
                                id="include-purity"
                                checked={labelSettings.includePurity}
                                onCheckedChange={(checked) => handleLabelSettingChange('includePurity', checked)}
                              />
                              <Label htmlFor="include-purity" className="font-normal">Purity</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Checkbox
                                id="include-qr-code"
                                checked={labelSettings.includeQrCode}
                                onCheckedChange={(checked) => handleLabelSettingChange('includeQrCode', checked)}
                              />
                              <Label htmlFor="include-qr-code" className="font-normal">QR Code</Label>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    {labelSettings.includeQrCode && (
                      <div className="space-y-2">
                        <Label htmlFor="qr-error-correction">QR Code Error Correction</Label>
                        <Select 
                          value={labelSettings.qrErrorCorrection}
                          onValueChange={(value) => handleLabelSettingChange('qrErrorCorrection', value)}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Select error correction level" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="L">Low (L)</SelectItem>
                            <SelectItem value="M">Medium (M)</SelectItem>
                            <SelectItem value="Q">Quartile (Q)</SelectItem>
                            <SelectItem value="H">High (H)</SelectItem>
                          </SelectContent>
                        </Select>
                        <p className="text-xs text-muted-foreground">
                          Higher error correction allows the QR code to be readable even if partially damaged, but makes the code more complex.
                        </p>
                      </div>
                    )}

                    <Button 
                      className="w-full bg-primary hover:bg-primary/90"
                      onClick={handleSaveChanges}
                    >
                      <Save className="mr-2 h-4 w-4" />
                      Save Configuration
                    </Button>
                  </div>

                  {/* Label Preview */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-semibold">Label Preview</h3>
                    <div className="rounded-lg border-2 border-dashed border-muted p-8 text-center">
                      <p className="text-muted-foreground">
                        Label preview will appear here when printing from inventory
                      </p>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      Note: The actual configuration will be applied when printing labels from the Inventory section.
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Photo Settings Tab */}
          <TabsContent value="photo-settings" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Photo Settings</CardTitle>
                <CardDescription>Configure image compression and quality settings</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div className="space-y-2">
                    <Label htmlFor="imageCompression">Image Compression Level</Label>
                    <Select
                      value={photoSettings.compressionLevel}
                      onValueChange={(value) => handlePhotoSettingChange("compressionLevel", value)}
                    >
                      <SelectTrigger id="imageCompression">
                        <SelectValue placeholder="Select compression level" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="none">None</SelectItem>
                        <SelectItem value="low">Low</SelectItem>
                        <SelectItem value="medium">Medium</SelectItem>
                        <SelectItem value="high">High</SelectItem>
                      </SelectContent>
                    </Select>
                    <p className="text-sm text-muted-foreground">
                      Choose the compression level for images uploaded to the application. Higher compression means smaller file sizes but lower image quality.
                    </p>
                  </div>

                  <Button 
                    type="button" 
                    className="bg-primary hover:bg-primary/90"
                    onClick={handleSaveChanges}
                  >
                    <Save className="mr-2 h-4 w-4" />
                    Save Settings
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  )
}
</file>

<file path="app/dashboard/page.tsx">
"use client"

import type { Metadata } from "next"
import { useEffect } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import {
  Box,
  FileText,
  Home,
  Package,
  Plus,
  Users,
  User,
  LogOut,
  Lock,
  ChevronDown,
  BarChart4,
  ShoppingBag,
  Receipt,
  Calendar,
  Settings,
  ShoppingCart,
} from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { useAuth } from "@/components/auth-provider"
import { useToast } from "@/components/ui/use-toast"
import supabase from "@/lib/supabase"

// Remove the metadata export since this is now a client component
// export const metadata: Metadata = {
//   title: "Dashboard - Sethiya Gold",
//   description: "A premium invoicing system for Indian jewelry shops",
// }

export default function DashboardPage() {
  const { user, isLoading } = useAuth()
  const router = useRouter()
  const { toast } = useToast()

  useEffect(() => {
    if (!isLoading && !user) {
      router.push("/")
      toast({
        title: "Authentication required",
        description: "Please log in to access the dashboard",
        variant: "destructive",
      })
    }
  }, [user, isLoading, router, toast])

  const handleLogout = async () => {
    await supabase.auth.signOut()
    router.push("/")
    toast({
      title: "Logged out",
      description: "You have been successfully logged out",
    })
  }

  // Show loading state or nothing while checking authentication
  if (isLoading || !user) {
    return <div className="flex min-h-screen items-center justify-center">Loading...</div>
  }

  return (
    <div className="flex min-h-screen w-full flex-col">
      <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-6">
        <div className="flex items-center gap-2 font-heading font-semibold">
          <FileText className="h-6 w-6 text-primary" />
          <span className="text-xl">Sethiya Gold</span>
        </div>
        <nav className="ml-auto flex items-center gap-4">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm">
              <Home className="mr-2 h-4 w-4" />
              Home
            </Button>
          </Link>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="sm" className="flex items-center gap-1">
                <User className="h-4 w-4" />
                <span>{user.user_metadata?.full_name || user.email}</span>
                <ChevronDown className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem asChild>
                <Link href="/profile">
                  <User className="mr-2 h-4 w-4" />
                  <span>View Profile</span>
                </Link>
              </DropdownMenuItem>
              <DropdownMenuItem>
                <Lock className="mr-2 h-4 w-4" />
                <span>Change Password</span>
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={handleLogout}>
                <LogOut className="mr-2 h-4 w-4" />
                <span>Logout</span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </nav>
      </header>
      <main className="flex flex-1 flex-col gap-6 p-6 md:gap-8 md:p-8">
        <div className="flex flex-col animate-fade-in">
          <h1 className="font-heading text-3xl font-bold tracking-tight md:text-4xl bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">Welcome to Sethiya Gold</h1>
          <p className="mt-2 text-muted-foreground">Manage your jewelry business with elegance and efficiency</p>
        </div>

        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 animate-slide-up" style={{animationDelay: "0.1s"}}>
          {/* Sales Card */}
          <Card className="col-span-1 overflow-hidden transition-all duration-300 hover:border-gold-300 hover:shadow-lg group md:col-span-2 lg:col-span-3">
            <CardHeader className="bg-gradient-to-r from-gold-50 to-gold-100/50 pb-2 border-b border-gold-200/30">
              <CardTitle className="font-heading flex items-center gap-2 text-primary">
                <ShoppingBag className="h-5 w-5 text-accent transition-transform group-hover:scale-110 duration-300" />
                Sales
              </CardTitle>
            </CardHeader>
            <CardContent className="pt-6">
              <div className="grid gap-4 md:grid-cols-3">
                {/* Create Invoice */}
                <Link href="/create-invoice" className="group">
                  <Card className="h-full overflow-hidden border transition-all duration-300 hover:border-gold-300 hover:shadow-lg hover:-translate-y-1">
                    <CardHeader className="pb-2 bg-gradient-to-br from-gold-50/50 to-transparent">
                      <CardTitle className="font-heading flex items-center gap-2 text-base">
                        <Receipt className="h-4 w-4 text-accent transition-all group-hover:text-primary group-hover:rotate-6 duration-300" />
                        Create Invoice
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="pt-2">
                      <div className="flex h-20 items-center justify-center rounded-xl bg-gradient-to-br from-gold-100/40 to-gold-50/30 p-4 text-primary transition-all duration-300 group-hover:from-gold-200/50 group-hover:to-gold-100/40">
                        <Plus className="h-8 w-8 transition-transform group-hover:scale-110 duration-300" />
                      </div>
                    </CardContent>
                  </Card>
                </Link>

                {/* View Invoices */}
                <Link href="/invoices" className="group">
                  <Card className="h-full overflow-hidden border transition-all duration-300 hover:border-gold-300 hover:shadow-lg hover:-translate-y-1">
                    <CardHeader className="pb-2 bg-gradient-to-br from-gold-50/50 to-transparent">
                      <CardTitle className="font-heading flex items-center gap-2 text-base">
                        <FileText className="h-4 w-4 text-accent transition-all group-hover:text-primary group-hover:rotate-6 duration-300" />
                        View Invoices
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="pt-2">
                      <div className="flex h-20 items-center justify-center rounded-xl bg-gradient-to-br from-gold-100/40 to-gold-50/30 p-4 text-primary transition-all duration-300 group-hover:from-gold-200/50 group-hover:to-gold-100/40">
                        <FileText className="h-8 w-8 transition-transform group-hover:scale-110 duration-300" />
                      </div>
                    </CardContent>
                  </Card>
                </Link>

                {/* Create Booking */}
                <Link href="/bookings/create" className="group">
                  <Card className="h-full overflow-hidden border transition-all duration-300 hover:border-gold-300 hover:shadow-lg hover:-translate-y-1">
                    <CardHeader className="pb-2 bg-gradient-to-br from-gold-50/50 to-transparent">
                      <CardTitle className="font-heading flex items-center gap-2 text-base">
                        <Calendar className="h-4 w-4 text-accent transition-all group-hover:text-primary group-hover:rotate-6 duration-300" />
                        Create Booking
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="pt-2">
                      <div className="flex h-20 items-center justify-center rounded-xl bg-gradient-to-br from-gold-100/40 to-gold-50/30 p-4 text-primary transition-all duration-300 group-hover:from-gold-200/50 group-hover:to-gold-100/40">
                        <Calendar className="h-8 w-8 transition-transform group-hover:scale-110 duration-300" />
                      </div>
                    </CardContent>
                  </Card>
                </Link>
              </div>
            </CardContent>
          </Card>

          {/* Stock Tile */}
          <Link href="/stock" className="group">
            <Card className="h-full overflow-hidden transition-all duration-300 hover:border-gold-300 hover:shadow-lg hover:-translate-y-1">
              <CardHeader className="bg-gradient-to-r from-gold-50 to-gold-100/50 pb-2 border-b border-gold-200/30">
                <CardTitle className="font-heading flex items-center gap-2 text-primary">
                  <Package className="h-5 w-5 text-accent transition-transform group-hover:scale-110 group-hover:rotate-6 duration-300" />
                  Stock
                </CardTitle>
                </CardHeader>
                <CardContent className="pt-6">
                  <div className="flex h-24 items-center justify-center rounded-xl bg-gradient-to-br from-gold-100/40 to-gold-50/30 p-4 text-primary transition-all duration-300 group-hover:from-gold-200/50 group-hover:to-gold-100/40">
                    <Box className="h-12 w-12 transition-transform group-hover:scale-110 duration-300" />
                  </div>
                </CardContent>
              </Card>
            </Link>

          {/* Purchases Tile */}
          <Link href="/purchases" className="group">
            <Card className="h-full overflow-hidden transition-all duration-300 hover:border-gold-300 hover:shadow-lg hover:-translate-y-1">
              <CardHeader className="bg-gradient-to-r from-gold-50 to-gold-100/50 pb-2 border-b border-gold-200/30">
                <CardTitle className="font-heading flex items-center gap-2 text-primary">
                  <ShoppingCart className="h-5 w-5 text-accent transition-transform group-hover:scale-110 group-hover:rotate-6 duration-300" />
                  Purchases
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-6">
                <div className="flex h-24 items-center justify-center rounded-xl bg-gradient-to-br from-gold-100/40 to-gold-50/30 p-4 text-primary transition-all duration-300 group-hover:from-gold-200/50 group-hover:to-gold-100/40">
                  <ShoppingCart className="h-12 w-12 transition-transform group-hover:scale-110 duration-300" />
                </div>
              </CardContent>
            </Card>
          </Link>

          {/* Customer Tile */}
          <Link href="/customers" className="group">
            <Card className="h-full overflow-hidden transition-all duration-300 hover:border-gold-300 hover:shadow-lg hover:-translate-y-1">
              <CardHeader className="bg-gradient-to-r from-gold-50 to-gold-100/50 pb-2 border-b border-gold-200/30">
                <CardTitle className="font-heading flex items-center gap-2 text-primary">
                  <Users className="h-5 w-5 text-accent transition-transform group-hover:scale-110 group-hover:rotate-6 duration-300" />
                  Customer
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-6">
                <div className="flex h-24 items-center justify-center rounded-xl bg-gradient-to-br from-gold-100/40 to-gold-50/30 p-4 text-primary transition-all duration-300 group-hover:from-gold-200/50 group-hover:to-gold-100/40">
                  <Users className="h-12 w-12 transition-transform group-hover:scale-110 duration-300" />
                </div>
              </CardContent>
            </Card>
          </Link>

          {/* Reports Tile */}
          <Link href="/reports" className="group">
            <Card className="h-full overflow-hidden transition-all duration-300 hover:border-gold-300 hover:shadow-lg hover:-translate-y-1">
              <CardHeader className="bg-gradient-to-r from-gold-50 to-gold-100/50 pb-2 border-b border-gold-200/30">
                <CardTitle className="font-heading flex items-center gap-2 text-primary">
                  <BarChart4 className="h-5 w-5 text-accent transition-transform group-hover:scale-110 group-hover:rotate-6 duration-300" />
                  Reports
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-6">
                <div className="flex h-24 items-center justify-center rounded-xl bg-gradient-to-br from-gold-100/40 to-gold-50/30 p-4 text-primary transition-all duration-300 group-hover:from-gold-200/50 group-hover:to-gold-100/40">
                  <BarChart4 className="h-12 w-12 transition-transform group-hover:scale-110 duration-300" />
                </div>
              </CardContent>
            </Card>
          </Link>

          {/* Settings Tile */}
          <Link href="/settings" className="group">
            <Card className="h-full overflow-hidden transition-all duration-300 hover:border-gold-300 hover:shadow-lg hover:-translate-y-1">
              <CardHeader className="bg-gradient-to-r from-gold-50 to-gold-100/50 pb-2 border-b border-gold-200/30">
                <CardTitle className="font-heading flex items-center gap-2 text-primary">
                  <Settings className="h-5 w-5 text-accent transition-transform group-hover:scale-110 group-hover:rotate-6 duration-300" />
                  Settings
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-6">
                <div className="flex h-24 items-center justify-center rounded-xl bg-gradient-to-br from-gold-100/40 to-gold-50/30 p-4 text-primary transition-all duration-300 group-hover:from-gold-200/50 group-hover:to-gold-100/40">
                  <Settings className="h-12 w-12 transition-transform group-hover:scale-110 duration-300" />
                </div>
              </CardContent>
            </Card>
          </Link>

        </div>

        <Card className="mt-4 overflow-hidden border-gold-200 animate-fade-in" style={{animationDelay: "0.3s"}}>
          <CardContent className="p-5">
            <div className="flex items-center gap-4">
              <div className="rounded-full bg-gradient-to-br from-gold-100 to-gold-200 p-3 shadow-sm">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  className="h-5 w-5 text-accent"
                >
                  <path d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6" />
                </svg>
              </div>
              <div className="flex-1">
                <h3 className="font-heading font-semibold text-primary">Current Gold Rate</h3>
                <p className="text-sm text-muted-foreground">₹6,450 per 10 grams (22K) | Updated: Today</p>
              </div>
              <Button variant="outline" size="sm" className="ml-auto border-gold-300 hover:bg-gold-50 hover:text-primary">
                Update Rate
              </Button>
            </div>
          </CardContent>
        </Card>
      </main>
    </div>
  )
}
</file>

<file path="app/create-invoice/invoice-pdf.tsx">
import { Document, Page, Text, View, StyleSheet } from "@react-pdf/renderer"
import type { InvoiceData } from "@/app/create-invoice/invoice-preview"
import { TERMS_AND_CONDITIONS, AGREEMENT_TEXT } from "@/lib/invoice-text"

const MM_TO_PT = 2.8346;

// Create styles
const styles = StyleSheet.create({
  page: {
    paddingTop: 10 * MM_TO_PT,
    paddingBottom: 15 * MM_TO_PT,
    paddingHorizontal: 10 * MM_TO_PT,
    fontSize: 10,           // Default font size for body text
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#000000',
  },
  // Header Styles
  headerSection: {
    marginBottom: 15,
  },
  headerColoredBand: {
    backgroundColor: '#E8EAF6', // A light blue/gray, adjust to your brand
    position: 'absolute',
    top: 5 * MM_TO_PT,      // Adjust positioning carefully
    left: -10 * MM_TO_PT,   // Span full width beyond page padding
    right: -10 * MM_TO_PT,
    height: 60,             // Adjust height for content
    zIndex: -1,
  },
  taxInvoiceTitle: {
    textAlign: 'center',
    fontSize: 14,
    color: '#B22222', // Firebrick red
    letterSpacing: 1,
    marginBottom: 5,
    marginTop: 5, // Added margin for spacing from top or devanagari if used
  },
  firmNameHeader: {
    textAlign: 'center',
    fontSize: 28,
    color: '#B22222', // Firebrick red
    textTransform: 'uppercase',
    marginBottom: 2,
  },
  firmTagline: {
    textAlign: 'center',
    fontSize: 9,
    textTransform: 'uppercase',
    letterSpacing: 0.5,
    marginBottom: 3,
  },
  firmAddressGstinHeader: {
    textAlign: 'center',
    fontSize: 8.5,
    lineHeight: 1.3,
    marginBottom: 3,
  },
  telNumberHeader: {
    textAlign: 'right',
    fontSize: 9,
    position: 'absolute',
    top: 0,
    right: 0,
  },
  invoiceMetaBlock: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    fontSize: 9.5,
    paddingVertical: 5,
    borderTopWidth: 0.5,
    borderBottomWidth: 0.5,
    borderColor: '#555555',
    marginTop: 5,
    marginBottom: 10,
  },

  // Customer Info Styles
  customerInfoContainer: {
    borderWidth: 1,
    borderColor: '#AAAAAA',
    padding: 8,
    marginBottom: 15,
    fontSize: 9.5,
  },
  customerInfoRow: {
    flexDirection: 'row',
    marginBottom: 2,
  },
  customerInfoLabel: {
    width: '18%',
  },
  customerInfoValue: {
    width: '82%',
  },

  // Table Styles
  table: {
    width: '100%',
    borderStyle: 'solid',
    borderWidth: 0.5,
    borderColor: '#000000',
    borderRightWidth: 0,
    borderBottomWidth: 0,
    marginBottom: 15,
  },
  tableRow: {
    flexDirection: 'row',
  },
  tableColHeader: {
    borderStyle: 'solid',
    borderBottomWidth: 0.5,
    borderColor: '#000000',
    borderRightWidth: 0.5,
    paddingVertical: 3, // Adjusted for 8pt feel with default fonts
    paddingHorizontal: 5,
    backgroundColor: '#E0E0E0',
    fontSize: 9,
    textAlign: 'center',
  },
  tableCol: {
    borderStyle: 'solid',
    borderBottomWidth: 0.5,
    borderColor: '#000000',
    borderRightWidth: 0.5,
    paddingVertical: 3, // Adjusted for 8pt feel
    paddingHorizontal: 5,
    fontSize: 9,
  },
  colItem: { width: '35%' },
  colQty: { width: '10%', textAlign: 'center' },
  colWeight: { width: '15%', textAlign: 'right' },
  colPricePerGram: { width: '20%', textAlign: 'right' },
  colAmount: { width: '20%', textAlign: 'right', borderRightWidth: 0 },
  tableRowLight: { backgroundColor: '#FFFFFF' },
  tableRowDark: { backgroundColor: '#F5F5F5' },

  // Summary Styles
  summarySection: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    marginTop: 10,
  },
  summaryTable: {
    width: '50%',
    fontSize: 9.5,
  },
  summaryRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 2,
    borderBottomWidth: 0.5,
    borderColor: '#888888',
  },
  summaryLabel: {
    textAlign: 'left',
  },
  summaryValue: {
    textAlign: 'right',
  },
  grandTotalRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 4,
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderColor: '#000000',
    marginTop: 3,
  },
  grandTotalLabel: {
    fontSize: 11,
  },
  grandTotalValue: {
    fontSize: 11,
    textAlign: 'right',
  },

  // Footer Styles
  footerContainer: {
    position: 'absolute',
    bottom: 15 * MM_TO_PT,
    left: 10 * MM_TO_PT,
    right: 10 * MM_TO_PT,
    borderWidth: 1,
    borderColor: '#555555',
    padding: 8,
  },
  footerDottedLine: {
    borderTopWidth: 1,
    borderTopStyle: 'dotted',
    borderColor: '#555555',
    marginBottom: 5,
  },
  footerThankYou: {
    textAlign: 'center',
    fontSize: 10,
    marginBottom: 5,
  },
  footerTermsTitle: {
    fontSize: 9,
    textDecoration: 'underline',
    marginBottom: 3,
  },
  footerTermItem: {
    fontSize: 7.5,
    lineHeight: 1.3,
    marginBottom: 2,
  },
  footerAgreement: {
    fontSize: 7.5,
    textAlign: 'center',
    marginTop: 4,
    marginBottom: 4,
  },
  footerSignatureSection: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 8,
  },
  footerSignatureBox: {
    width: '48%',
    fontSize: 8.5,
  },
  signatureLine: {
    borderBottomWidth: 0.5,
    borderColor: '#333333',
    marginTop: 15,
    marginBottom: 2,
  },
  footerBottomText: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    fontSize: 8,
    fontStyle: 'italic',
    marginTop: 8,
  },
});

interface InvoicePDFProps {
  invoice: InvoiceData;
}

// Helper function to safely format numbers with comprehensive validation
const safeNumber = (value: any, decimals: number = 2): string => {
  // Validate decimals parameter
  const validDecimals = Math.max(0, Math.min(20, Math.floor(decimals)))
  
  // Convert to number
  const num = Number(value)
  
  // Check for invalid numbers
  if (isNaN(num) || !isFinite(num)) {
    return '0.' + '0'.repeat(validDecimals)
  }
  
  // Check for numbers that are too large or too small for safe formatting
  // toFixed() has issues with numbers outside this range
  const MAX_SAFE_VALUE = 1e20
  const MIN_SAFE_VALUE = -1e20
  
  if (num > MAX_SAFE_VALUE || num < MIN_SAFE_VALUE) {
    return '0.' + '0'.repeat(validDecimals)
  }
  
  try {
    return num.toFixed(validDecimals)
  } catch (error) {
    console.error('Error in safeNumber formatting:', error)
    return '0.' + '0'.repeat(validDecimals)
  }
}

// Helper function to safely get numeric value with bounds checking
const safeNumericValue = (value: any): number => {
  const num = Number(value)
  
  // Check for invalid numbers
  if (isNaN(num) || !isFinite(num)) {
    return 0
  }
  
  // Clamp to safe integer range to prevent overflow
  const MAX_SAFE = Number.MAX_SAFE_INTEGER
  const MIN_SAFE = Number.MIN_SAFE_INTEGER
  
  if (num > MAX_SAFE) return MAX_SAFE
  if (num < MIN_SAFE) return MIN_SAFE
  
  return num
}

// Helper function to safely get string value
const safeString = (value: any): string => {
  if (value === null || value === undefined) {
    return '';
  }
  return String(value);
};

// Helper function for safe multiplication to prevent overflow
const safeMultiply = (a: any, b: any): number => {
  const num1 = safeNumericValue(a);
  const num2 = safeNumericValue(b);
  
  // Check if multiplication would overflow
  if (num1 !== 0 && Math.abs(num2) > Number.MAX_SAFE_INTEGER / Math.abs(num1)) {
    console.warn('Multiplication would overflow, returning 0');
    return 0;
  }
  
  const result = num1 * num2;
  
  // Final safety check
  if (!isFinite(result)) {
    return 0;
  }
  
  return result;
};

// Create Document Component
export function InvoicePDF({ invoice }: InvoicePDFProps) {
  // Validate and sanitize invoice data
  const sanitizedInvoice = {
    invoiceNumber: safeString(invoice.invoiceNumber),
    date: safeString(invoice.date),
    customerName: safeString(invoice.customerName),
    customerAddress: invoice.customerAddress ? safeString(invoice.customerAddress) : undefined,
    customerPhone: invoice.customerPhone ? safeString(invoice.customerPhone) : undefined,
    customerEmail: invoice.customerEmail ? safeString(invoice.customerEmail) : undefined,
    firmName: safeString(invoice.firmName),
    firmAddress: safeString(invoice.firmAddress),
    firmPhone: safeString(invoice.firmPhone),
    firmGstin: safeString(invoice.firmGstin),
    subtotal: safeNumericValue(invoice.subtotal),
    gstPercentage: safeNumericValue(invoice.gstPercentage),
    gstAmount: safeNumericValue(invoice.gstAmount),
    total: safeNumericValue(invoice.total),
    items: invoice.items.map(item => ({
      name: safeString(item.name),
      quantity: safeNumericValue(item.quantity),
      weight: safeNumericValue(item.weight),
      pricePerGram: safeNumericValue(item.pricePerGram),
      total: safeNumericValue(item.total),
    })),
  };

  return (
    <Document author={sanitizedInvoice.firmName} title={`Invoice ${sanitizedInvoice.invoiceNumber}`}>
      <Page size="A4" style={styles.page}>
        {/* --- HEADER SECTION --- */}
        <View style={styles.headerSection}>
          <View style={styles.headerColoredBand} />

          <Text style={styles.taxInvoiceTitle}>TAX INVOICE</Text>

          <Text style={styles.firmNameHeader}>{sanitizedInvoice.firmName}</Text>
          <Text style={styles.firmTagline}>Premium Jewelry</Text>
          <Text style={styles.firmAddressGstinHeader}>
            {sanitizedInvoice.firmAddress}
          </Text>
          <Text style={styles.firmAddressGstinHeader}>
            GSTIN: {sanitizedInvoice.firmGstin} | HSN: 7113
          </Text>
          <Text style={styles.telNumberHeader}>Tel.: {sanitizedInvoice.firmPhone}</Text>

          <View style={styles.invoiceMetaBlock}>
            <Text>Bill No.: {sanitizedInvoice.invoiceNumber}</Text>
            <Text>Date: {sanitizedInvoice.date}</Text>
          </View>
        </View>

        {/* --- CUSTOMER INFO SECTION --- */}
        <View style={styles.customerInfoContainer}>
          <View style={styles.customerInfoRow}>
            <Text style={styles.customerInfoLabel}>M/s.</Text>
            <Text style={styles.customerInfoValue}>{sanitizedInvoice.customerName}</Text>
          </View>
          {sanitizedInvoice.customerAddress && (
            <View style={styles.customerInfoRow}>
              <Text style={styles.customerInfoLabel}>Address:</Text>
              <Text style={styles.customerInfoValue}>{sanitizedInvoice.customerAddress}</Text>
            </View>
          )}
          {sanitizedInvoice.customerPhone && (
            <View style={styles.customerInfoRow}>
              <Text style={styles.customerInfoLabel}>Phone:</Text>
              <Text style={styles.customerInfoValue}>{sanitizedInvoice.customerPhone}</Text>
            </View>
          )}
          {sanitizedInvoice.customerEmail && (
            <View style={styles.customerInfoRow}>
              <Text style={styles.customerInfoLabel}>Email:</Text>
              <Text style={styles.customerInfoValue}>{sanitizedInvoice.customerEmail}</Text>
            </View>
          )}
        </View>

        {/* --- ITEMS TABLE SECTION --- */}
        <View style={styles.table}>
          <View style={styles.tableRow}>
            <Text style={[styles.tableColHeader, styles.colItem]}>Item</Text>
            <Text style={[styles.tableColHeader, styles.colQty]}>Qty</Text>
            <Text style={[styles.tableColHeader, styles.colWeight]}>Weight (g)</Text>
            <Text style={[styles.tableColHeader, styles.colPricePerGram]}>Price/10g (₹)</Text>
            <Text style={[styles.tableColHeader, styles.colAmount]}>Amount (₹)</Text>
          </View>

          {sanitizedInvoice.items.map((item, index) => (
            <View key={index} style={[styles.tableRow, index % 2 === 0 ? styles.tableRowLight : styles.tableRowDark]}>
              <Text style={[styles.tableCol, styles.colItem]}>{item.name}</Text>
              <Text style={[styles.tableCol, styles.colQty]}>{item.quantity}</Text>
              <Text style={[styles.tableCol, styles.colWeight]}>{safeNumber(item.weight, 3)}</Text>
              <Text style={[styles.tableCol, styles.colPricePerGram]}>₹{safeNumber(safeMultiply(item.pricePerGram, 10), 2)}</Text>
              <Text style={[styles.tableCol, styles.colAmount]}>₹{safeNumber(item.total, 2)}</Text>
            </View>
          ))}
        </View>

        {/* --- SUMMARY SECTION --- */}
        <View style={styles.summarySection}>
          <View style={styles.summaryTable}>
            <View style={styles.summaryRow}>
              <Text style={styles.summaryLabel}>Subtotal (Items Value):</Text>
              <Text style={styles.summaryValue}>₹{safeNumber(sanitizedInvoice.subtotal, 2)}</Text>
            </View>
            <View style={styles.summaryRow}>
              <Text style={styles.summaryLabel}>GST ({safeNumber(sanitizedInvoice.gstPercentage, 0)}%):</Text>
              <Text style={styles.summaryValue}>₹{safeNumber(sanitizedInvoice.gstAmount, 2)}</Text>
            </View>
            <View style={styles.grandTotalRow}>
              <Text style={styles.grandTotalLabel}>GRAND TOTAL:</Text>
              <Text style={styles.grandTotalValue}>₹{safeNumber(sanitizedInvoice.total, 2)}</Text>
            </View>
          </View>
        </View>

        {/* --- FOOTER SECTION --- */}
        <View style={styles.footerContainer} fixed>
          <View style={styles.footerDottedLine} />
          <Text style={styles.footerThankYou}>Thank You! Visit Again!</Text>

          <Text style={styles.footerTermsTitle}>Terms & Conditions:</Text>
          {TERMS_AND_CONDITIONS.map((term, index) => (
            <Text key={index} style={styles.footerTermItem}>
              {index + 1}. {term}
            </Text>
          ))}
          <Text style={styles.footerAgreement}>{AGREEMENT_TEXT}</Text>

          <View style={styles.footerSignatureSection}>
            <View style={styles.footerSignatureBox}>
              <Text>Customer Signature:</Text>
              <View style={styles.signatureLine} />
              <Text>({sanitizedInvoice.customerName})</Text>
            </View>
            <View style={[styles.footerSignatureBox, { textAlign: 'right' }]}>
              <Text>For {sanitizedInvoice.firmName}:</Text>
              <View style={styles.signatureLine} />
              <Text>(Authorised Signatory)</Text>
            </View>
          </View>
          <View style={styles.footerBottomText}>
            <Text>E. & O. E.</Text>
            <Text>This is a computer-generated invoice.</Text>
          </View>
        </View>
      </Page>
    </Document>
  );
}
</file>

<file path="lib/database.types.ts">
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      customers: {
        Row: {
          address: string | null
          created_at: string | null
          email: string | null
          id: string
          identity_doc: string | null
          identity_reference: string | null
          identity_type: string | null
          name: string
          notes: string | null
          phone: string | null
          referral_notes: string | null
          referred_by: string | null
          user_id: string
        }
        Insert: {
          address?: string | null
          created_at?: string | null
          email?: string | null
          id?: string
          identity_doc?: string | null
          identity_reference?: string | null
          identity_type?: string | null
          name: string
          notes?: string | null
          phone?: string | null
          referral_notes?: string | null
          referred_by?: string | null
          user_id: string
        }
        Update: {
          address?: string | null
          created_at?: string | null
          email?: string | null
          id?: string
          identity_doc?: string | null
          identity_reference?: string | null
          identity_type?: string | null
          name?: string
          notes?: string | null
          phone?: string | null
          referral_notes?: string | null
          referred_by?: string | null
          user_id?: string
        }
        Relationships: []
      }
      invoice_items: {
        Row: {
          created_at: string | null
          id: string
          invoice_id: string
          name: string
          price_per_gram: number
          quantity: number
          total: number
          user_id: string
          weight: number
        }
        Insert: {
          created_at?: string | null
          id?: string
          invoice_id: string
          name: string
          price_per_gram: number
          quantity: number
          total: number
          user_id: string
          weight: number
        }
        Update: {
          created_at?: string | null
          id?: string
          invoice_id?: string
          name?: string
          price_per_gram?: number
          quantity?: number
          total?: number
          user_id?: string
          weight?: number
        }
        Relationships: [
          {
            foreignKeyName: "invoice_items_invoice_id_fkey"
            columns: ["invoice_id"]
            isOneToOne: false
            referencedRelation: "invoices"
            referencedColumns: ["id"]
          },
        ]
      }
      invoices: {
        Row: {
          created_at: string | null
          customer_address_snapshot: string | null
          customer_email_snapshot: string | null
          customer_id: string | null
          customer_name_snapshot: string
          customer_phone_snapshot: string | null
          firm_address_snapshot: string | null
          firm_gstin_snapshot: string | null
          firm_name_snapshot: string
          firm_phone_snapshot: string | null
          grand_total: number
          gst_amount: number
          gst_percentage: number
          id: string
          invoice_date: string
          invoice_number: string
          notes: string | null
          status: string
          subtotal: number
          updated_at: string | null
          user_id: string
        }
        Insert: {
          created_at?: string | null
          customer_address_snapshot?: string | null
          customer_email_snapshot?: string | null
          customer_id?: string | null
          customer_name_snapshot: string
          customer_phone_snapshot?: string | null
          firm_address_snapshot?: string | null
          firm_gstin_snapshot?: string | null
          firm_name_snapshot: string
          firm_phone_snapshot?: string | null
          grand_total: number
          gst_amount: number
          gst_percentage: number
          id?: string
          invoice_date: string
          invoice_number: string
          notes?: string | null
          status?: string
          subtotal: number
          updated_at?: string | null
          user_id: string
        }
        Update: {
          created_at?: string | null
          customer_address_snapshot?: string | null
          customer_email_snapshot?: string | null
          customer_id?: string | null
          customer_name_snapshot?: string
          customer_phone_snapshot?: string | null
          firm_address_snapshot?: string | null
          firm_gstin_snapshot?: string | null
          firm_name_snapshot?: string
          firm_phone_snapshot?: string | null
          grand_total?: number
          gst_amount?: number
          gst_percentage?: number
          id?: string
          invoice_date?: string
          invoice_number?: string
          notes?: string | null
          status?: string
          subtotal?: number
          updated_at?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "invoices_customer_id_fkey"
            columns: ["customer_id"]
            isOneToOne: false
            referencedRelation: "customers"
            referencedColumns: ["id"]
          },
        ]
      }
      notifications: {
        Row: {
          action_url: string | null
          created_at: string
          id: string
          message: string
          read_at: string | null
          title: string
          type: string
          user_id: string
        }
        Insert: {
          action_url?: string | null
          created_at?: string
          id?: string
          message: string
          read_at?: string | null
          title: string
          type: string
          user_id: string
        }
        Update: {
          action_url?: string | null
          created_at?: string
          id?: string
          message?: string
          read_at?: string | null
          title?: string
          type?: string
          user_id?: string
        }
        Relationships: []
      }
      profiles: {
        Row: {
          avatar_url: string | null
          email_address: string | null
          full_name: string | null
          id: string
          phone_number: string | null
          updated_at: string | null
        }
        Insert: {
          avatar_url?: string | null
          email_address?: string | null
          full_name?: string | null
          id: string
          phone_number?: string | null
          updated_at?: string | null
        }
        Update: {
          avatar_url?: string | null
          email_address?: string | null
          full_name?: string | null
          id?: string
          phone_number?: string | null
          updated_at?: string | null
        }
        Relationships: []
      }
      purchase_invoices: {
        Row: {
          amount: number
          created_at: string | null
          id: string
          invoice_date: string
          invoice_file_url: string | null
          invoice_number: string
          notes: string | null
          number_of_items: number | null
          payment_status: string
          purchase_number: string
          status: string
          supplier_id: string | null
          updated_at: string | null
          user_id: string
        }
        Insert: {
          amount: number
          created_at?: string | null
          id?: string
          invoice_date: string
          invoice_file_url?: string | null
          invoice_number: string
          notes?: string | null
          number_of_items?: number | null
          payment_status?: string
          purchase_number: string
          status?: string
          supplier_id?: string | null
          updated_at?: string | null
          user_id: string
        }
        Update: {
          amount?: number
          created_at?: string | null
          id?: string
          invoice_date?: string
          invoice_file_url?: string | null
          invoice_number?: string
          notes?: string | null
          number_of_items?: number | null
          payment_status?: string
          purchase_number?: string
          status?: string
          supplier_id?: string | null
          updated_at?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "purchase_invoices_supplier_id_fkey"
            columns: ["supplier_id"]
            isOneToOne: false
            referencedRelation: "suppliers"
            referencedColumns: ["id"]
          },
        ]
      }
      stock_items: {
        Row: {
          category: string
          created_at: string
          description: string | null
          id: string
          image_urls: string[] | null
          is_sold: boolean
          item_number: string
          material: string
          purchase_date: string | null
          purchase_price: number
          purity: string | null
          sold_at: string | null
          supplier: string | null
          updated_at: string
          user_id: string
          weight: number
        }
        Insert: {
          category: string
          created_at?: string
          description?: string | null
          id?: string
          image_urls?: string[] | null
          is_sold?: boolean
          item_number: string
          material: string
          purchase_date?: string | null
          purchase_price: number
          purity?: string | null
          sold_at?: string | null
          supplier?: string | null
          updated_at?: string
          user_id: string
          weight: number
        }
        Update: {
          category?: string
          created_at?: string
          description?: string | null
          id?: string
          image_urls?: string[] | null
          is_sold?: boolean
          item_number?: string
          material?: string
          purchase_date?: string | null
          purchase_price?: number
          purity?: string | null
          sold_at?: string | null
          supplier?: string | null
          updated_at?: string
          user_id?: string
          weight?: number
        }
        Relationships: []
      }
      suppliers: {
        Row: {
          address: string | null
          contact_person: string | null
          created_at: string | null
          email: string | null
          id: string
          name: string
          notes: string | null
          phone: string | null
          updated_at: string | null
          user_id: string
        }
        Insert: {
          address?: string | null
          contact_person?: string | null
          created_at?: string | null
          email?: string | null
          id?: string
          name: string
          notes?: string | null
          phone?: string | null
          updated_at?: string | null
          user_id: string
        }
        Update: {
          address?: string | null
          contact_person?: string | null
          created_at?: string | null
          email?: string | null
          id?: string
          name?: string
          notes?: string | null
          phone?: string | null
          updated_at?: string | null
          user_id?: string
        }
        Relationships: []
      }
      user_settings: {
        Row: {
          firm_address: string | null
          firm_email: string | null
          firm_establishment_date: string | null
          firm_gstin: string | null
          firm_name: string | null
          firm_phone: string | null
          firm_website: string | null
          invoice_custom_data: Json | null
          invoice_default_notes: string | null
          invoice_default_prefix: string | null
          invoice_next_number: number | null
          label_copies: number | null
          label_include_barcode: boolean | null
          label_include_date: boolean | null
          label_include_metal: boolean | null
          label_include_price: boolean | null
          label_include_product_name: boolean | null
          label_include_purity: boolean | null
          label_include_qr_code: boolean | null
          label_include_weight: boolean | null
          label_qr_error_correction:
            | Database["public"]["Enums"]["qr_error_correction_level_enum"]
            | null
          label_type: Database["public"]["Enums"]["label_type_enum"] | null
          notifications_email_enabled: boolean | null
          notifications_frequency:
            | Database["public"]["Enums"]["notification_frequency_enum"]
            | null
          notifications_push_enabled: boolean | null
          notifications_quiet_hours_end: string | null
          notifications_quiet_hours_start: string | null
          notifications_sms_enabled: boolean | null
          notifications_whatsapp_enabled: boolean | null
          photo_compression_level:
            | Database["public"]["Enums"]["photo_compression_enum"]
            | null
          updated_at: string
          user_id: string
        }
        Insert: {
          firm_address?: string | null
          firm_email?: string | null
          firm_establishment_date?: string | null
          firm_gstin?: string | null
          firm_name?: string | null
          firm_phone?: string | null
          firm_website?: string | null
          invoice_custom_data?: Json | null
          invoice_default_notes?: string | null
          invoice_default_prefix?: string | null
          invoice_next_number?: number | null
          label_copies?: number | null
          label_include_barcode?: boolean | null
          label_include_date?: boolean | null
          label_include_metal?: boolean | null
          label_include_price?: boolean | null
          label_include_product_name?: boolean | null
          label_include_purity?: boolean | null
          label_include_qr_code?: boolean | null
          label_include_weight?: boolean | null
          label_qr_error_correction?:
            | Database["public"]["Enums"]["qr_error_correction_level_enum"]
            | null
          label_type?: Database["public"]["Enums"]["label_type_enum"] | null
          notifications_email_enabled?: boolean | null
          notifications_frequency?:
            | Database["public"]["Enums"]["notification_frequency_enum"]
            | null
          notifications_push_enabled?: boolean | null
          notifications_quiet_hours_end?: string | null
          notifications_quiet_hours_start?: string | null
          notifications_sms_enabled?: boolean | null
          notifications_whatsapp_enabled?: boolean | null
          photo_compression_level?:
            | Database["public"]["Enums"]["photo_compression_enum"]
            | null
          updated_at?: string
          user_id: string
        }
        Update: {
          firm_address?: string | null
          firm_email?: string | null
          firm_establishment_date?: string | null
          firm_gstin?: string | null
          firm_name?: string | null
          firm_phone?: string | null
          firm_website?: string | null
          invoice_custom_data?: Json | null
          invoice_default_notes?: string | null
          invoice_default_prefix?: string | null
          invoice_next_number?: number | null
          label_copies?: number | null
          label_include_barcode?: boolean | null
          label_include_date?: boolean | null
          label_include_metal?: boolean | null
          label_include_price?: boolean | null
          label_include_product_name?: boolean | null
          label_include_purity?: boolean | null
          label_include_qr_code?: boolean | null
          label_include_weight?: boolean | null
          label_qr_error_correction?:
            | Database["public"]["Enums"]["qr_error_correction_level_enum"]
            | null
          label_type?: Database["public"]["Enums"]["label_type_enum"] | null
          notifications_email_enabled?: boolean | null
          notifications_frequency?:
            | Database["public"]["Enums"]["notification_frequency_enum"]
            | null
          notifications_push_enabled?: boolean | null
          notifications_quiet_hours_end?: string | null
          notifications_quiet_hours_start?: string | null
          notifications_sms_enabled?: boolean | null
          notifications_whatsapp_enabled?: boolean | null
          photo_compression_level?:
            | Database["public"]["Enums"]["photo_compression_enum"]
            | null
          updated_at?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "user_settings_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: true
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      label_type_enum: "standard" | "large" | "small"
      notification_frequency_enum: "instant" | "daily" | "weekly"
      photo_compression_enum: "none" | "low" | "medium" | "high"
      qr_error_correction_level_enum: "L" | "M" | "Q" | "H"
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type DefaultSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never

export const Constants = {
  public: {
    Enums: {
      label_type_enum: ["standard", "large", "small"],
      notification_frequency_enum: ["instant", "daily", "weekly"],
      photo_compression_enum: ["none", "low", "medium", "high"],
      qr_error_correction_level_enum: ["L", "M", "Q", "H"],
    },
  },
} as const
</file>

</files>
